Считыватель документов «Регула»
Программный пакет разработчика
Версия 7.5
Руководство программиста
РГВИ.01.01.00 М3
Регула 2024Оглавление
Редакция от 26.11.2024

ОГЛАВЛЕНИЕ
ОГЛАВЛЕНИЕ ................................................................................................................................................................. 3
СПИСОК СОКРАЩЕНИЙ .......................................................................................................................................... 9
ВВЕДЕНИЕ...................................................................................................................................................................... 10
МИНИМАЛЬНЫЕ CИСТЕМНЫЕ ТРЕБОВАНИЯ ............................................................................................. 11
1. СТРУКТУРА SDK .................................................................................................................................................... 12
2. ВОЗМОЖНОСТИ SDK ......................................................................................................................................... 15
3. УСТАНОВКА И ИСПОЛЬЗОВАНИЕ СРЕДСТВ SDK ................................................................................. 16
4. РАБОТА СО СЧИТЫВАТЕЛЯМИ ДОКУМЕНТОВ ..................................................................................... 17
4.1. ОБЩИЕ СВЕДЕНИЯ ................................................................................................................................................. 17
4.2. ОРГАНИЗАЦИЯ РАБОТЫ С ГЛАВНОЙ УПРАВЛЯЮЩЕЙ БИБЛИОТЕКОЙ ...................................................................... 18
4.3. ПОДКЛЮЧЕНИЕ/ОТКЛЮЧЕНИЕ СЧИТЫВАТЕЛЯ ДОКУМЕНТОВ ..................................................................................... 20
4.4. ОПРЕДЕЛЕНИЕ ФУНКЦИОНАЛЬНЫХ ВОЗМОЖНОСТЕЙ СЧИТЫВАТЕЛЯ ДОКУМЕНТОВ ..................................................... 22
4.5. ПРОЦЕДУРА КАЛИБРОВКИ ....................................................................................................................................... 23
4.6. СКАНИРОВАНИЕ И ОБРАБОТКА ДАННЫХ .................................................................................................................. 25
4.6.1. Представление и хранение данных ............................................................................................................ 25
4.6.2. Сканирование документа и получение результатов обработки изображений ....................... 25
4.6.3. Получение результатов прямым опросом .............................................................................................. 27
4.6.4. Обработка списка заранее полученных изображений ...................................................................... 30
4.7.ФУНКЦИИОБРАБОТКИДАННЫХИПОРЯДОКИХПРИМЕНЕНИЯ ПРИ ПРОВЕДЕНИИ ЦИКЛОВ СКАНИРОВАНИЯ И ОБРАБОТКИ.................... 32
4.7.1. Получение отсканированных изображений ........................................................................................... 32
4.7.2. Локализация документа на изображении ............................................................................................... 33
4.7.3. Чтение и контроль качества заполнения машиносчитываемой зоны ....................................... 33
4.7.4. Определение типа документа ....................................................................................................................... 34
4.7.5. Чтение полей заполнения документа ........................................................................................................ 38
4.7.6. Чтение штрихкодов ........................................................................................................................................... 38
4.7.7. Проверка подлинности документа ............................................................................................................. 39
4.7.8. Сравнительный лексический анализ данных ......................................................................................... 39
4.8.ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ И ОПЦИИ.................................................................................................................... 41
4.8.1. Управление индикаторными светодиодами считывателя документов...................................... 41
4.8.2. Контроль степени зарядки аккумуляторной батареи при работе с «Регула» 83x3, 83х4 ..... 41
4.8.3. Управление рабочим видеорежимом цифровой камеры считывателя .................................... 41
4.8.4. Установка необходимого размера изображений, получаемых через функции
_CheckResult() и _CheckResultFromList()...................................................................................................... 42
4.8.5. Установка делителя частоты видеочипа ................................................................................................... 42
4.8.6. Режим отладки ..................................................................................................................................................... 43
4.9.РАБОТА С ИСС .......................................................................................................................................................... 44
5. ПРОГРАММНЫЕ СРЕДСТВА SDK ................................................................................................................... 45
5.1. ЭКСПОРТИРУЕМЫЕ ФУНКЦИИ ................................................................................................................................ 45
5.1.1. _Initialize() ............................................................................................................................................................... 45
5.1.2. _Free() ....................................................................................................................................................................... 45
5.1.3. _SetCallbackFunc() ................................................................................................................................................ 46
5.1.4. _ExecuteCommand() ............................................................................................................................................ 46
5.1.5. _ResultTypeAvailable() ........................................................................................................................................ 47
5.1.6. _CheckResult()........................................................................................................................................................ 47
5.1.7. _CheckResultFromList() ....................................................................................................................................... 48
5.1.8. _AllocRawImageContainer() .............................................................................................................................. 49
5.1.9. _FreeRawImageContainer()................................................................................................................................ 49
5.1.10._FDSUser_Connect() ............................................................................................................................................. 50
5.1.11._FDSUser_Disconnect()........................................................................................................................................ 50

3Оглавление
5.1.12._FDSUser_UpdateWindow()............................................................................................................................... 50
5.1.13._FDSUser_UpdatePanel() .................................................................................................................................... 50
5.1.14._FDSUser_SelectDocument() ............................................................................................................................. 51
5.1.15._LibraryVersion() ................................................................................................................................................... 51
5.2. CALLBACK-ФУНКЦИИ ............................................................................................................................................. 52
5.2.1. NotifyFunc() ............................................................................................................................................................ 52
5.2.2. ResultReceivingFunc() ......................................................................................................................................... 52
5.3. СТРУКТУРЫ ДАННЫХ .............................................................................................................................................. 53
5.3.1. TResultContainerList ............................................................................................................................................ 53
5.3.2. TResultContainer................................................................................................................................................... 53
5.3.3. TRawImageContainer .......................................................................................................................................... 54
5.3.4. TDocVisualExtendedInfo .................................................................................................................................... 54
5.3.5. TDocVisualExtendedField ................................................................................................................................... 55
5.3.6. TStringResultSDK .................................................................................................................................................. 56
5.3.7. TSymbolResult ....................................................................................................................................................... 57
5.3.8. TSymbolCandidate ............................................................................................................................................... 57
5.3.9. TDocGraphicsInfo ................................................................................................................................................. 57
5.3.10.TDocGraphicField.................................................................................................................................................. 58
5.3.11.TDocMRZTestQuality........................................................................................................................................... 58
5.3.12.TStrEstimation ........................................................................................................................................................ 59
5.3.13.TSingleRect ............................................................................................................................................................. 60
5.3.14.TTestTextField ........................................................................................................................................................ 61
5.3.15.TSymbolEstimation............................................................................................................................................... 61
5.3.16.TCommandsMRZTestQuality ............................................................................................................................ 62
5.3.17.TCandidatesListContainer .................................................................................................................................. 63
5.3.18.TOneCandidate...................................................................................................................................................... 63
5.3.19.TFDSIDList ............................................................................................................................................................... 64
5.3.20.TListDocsInfo.......................................................................................................................................................... 65
5.3.21.TOCRDocInfo ......................................................................................................................................................... 65
5.3.22.TDocBarCodeInfo.................................................................................................................................................. 66
5.3.23.TDocBarCodeField ................................................................................................................................................ 66
5.3.24.TIP_DECODE_MODULE........................................................................................................................................ 67
5.3.25.TIP_PDF417_INFO ................................................................................................................................................. 68
5.3.26.TListVerifiedFields ................................................................................................................................................. 68
5.3.27.TVerifiedFieldMap ................................................................................................................................................ 69
5.3.28.TAuthenticityCheckList........................................................................................................................................ 70
5.3.29.TAuthenticityCheckResult .................................................................................................................................. 70
5.3.30.TFibersType............................................................................................................................................................. 71
5.3.31.TSecurityFeatureCheck........................................................................................................................................ 71
5.3.32.TIdentResult............................................................................................................................................................ 73
5.3.33.TOCRSecurityTextResult ..................................................................................................................................... 74
5.3.34.TPhotoIdentResult ................................................................................................................................................ 75
5.3.35.TRegulaDeviceProperties ................................................................................................................................... 76
5.3.36.TIndicationLED ....................................................................................................................................................... 77
5.3.37.TPointArray ............................................................................................................................................................. 78
5.3.38.TAreaArray .............................................................................................................................................................. 78
5.3.39.TIRVisibilityElement.............................................................................................................................................. 78
5.3.40.TDwordArray .......................................................................................................................................................... 79
5.3.41.TLexDateFormat .................................................................................................................................................... 79
5.3.42.TBoundsResult ....................................................................................................................................................... 79
5.3.43.TImageQualityCheck............................................................................................................................................ 80
5.3.44.TImageQualityCheckList ..................................................................................................................................... 81
5.3.45.TVideodetectionNotification ............................................................................................................................. 81
5.3.46.TStatus...................................................................................................................................................................... 82
5.3.47.TDetailsRFID ........................................................................................................................................................... 82
4
Оглавление
5.3.48.TDetailsOptical ...................................................................................................................................................... 83
5.3.49.TTextResult.............................................................................................................................................................. 84
5.3.50.TTextValidity ........................................................................................................................................................... 84
5.3.51.TTextComparison .................................................................................................................................................. 84
5.3.52.TTextSource ............................................................................................................................................................ 85
5.3.53.TTextSymbol ........................................................................................................................................................... 85
5.3.54.TTextFieldValue ..................................................................................................................................................... 85
5.3.55.TTextField ................................................................................................................................................................ 86
5.3.56.TImagesResult........................................................................................................................................................ 87
5.3.57.TImageSource ........................................................................................................................................................ 87
5.3.58.TImageField ............................................................................................................................................................ 87
5.3.59.TImageFieldValue ................................................................................................................................................. 88
5.3.60.TRfidOrigin .............................................................................................................................................................. 88
5.4. ПЕРЕЧИСЛЕНИЯ (НАБОРЫ КОНСТАНТ).................................................................................................................... 90
5.4.1. eRPRM_ResultType............................................................................................................................................... 90
5.4.2. eRPRM_DeviceAdditionalFeatures .................................................................................................................. 93
5.4.3. eRPRM_DeviceControlTypes ............................................................................................................................. 95
5.4.4. eRPRM_DeviceTypes............................................................................................................................................ 95
5.4.5. eRPRM_Lights ...................................................................................................................................................... 101
5.4.6. eRPRM_VideoModes ......................................................................................................................................... 104
5.4.7. CDocFormat.......................................................................................................................................................... 105
5.4.8. eRPRM_Capabilities............................................................................................................................................ 106
5.4.9. eRPRM_GetImage_Modes................................................................................................................................ 108
5.4.10.eRPRM_FieldVerificationResult ....................................................................................................................... 111
5.4.11.eVisualFieldType ................................................................................................................................................. 111
5.4.12.eGraphicFieldType .............................................................................................................................................. 137
5.4.13.eBarCodeType...................................................................................................................................................... 139
5.4.14.eBarCodeResultCodes ....................................................................................................................................... 140
5.4.15.eBarCodeModuleType ...................................................................................................................................... 142
5.4.16.eTestTextField ...................................................................................................................................................... 142
5.4.17.eMRZClassQuality............................................................................................................................................... 143
5.4.18.eCheckResult ........................................................................................................................................................ 143
5.4.19.eCheckDiagnose ................................................................................................................................................. 144
5.4.20.eRPRM_PostCalbackAction.............................................................................................................................. 150
5.4.21.eRPRM_RCTP_Result_RecType........................................................................................................................ 150
5.4.22.eRFID_Presence ................................................................................................................................................... 151
5.4.23.eRPRM_Authenticity .......................................................................................................................................... 151
5.4.24.eRPRM_SecurityFeatureType .......................................................................................................................... 157
5.4.25.eSecurityCriticalFlag........................................................................................................................................... 161
5.4.26.eIR_Visibility_Flag ................................................................................................................................................ 161
5.4.27.eLED_Color ............................................................................................................................................................ 162
5.4.28.eFDS_Light ............................................................................................................................................................ 162
5.4.29.eFDS_Panel............................................................................................................................................................ 162
5.4.30.eFDS_Panel_Position .......................................................................................................................................... 163
5.4.31.eRPRM_OutputFormat ...................................................................................................................................... 163
5.4.32.eLexAnalysisDepth ............................................................................................................................................. 164
5.4.33.eLexDateFormat .................................................................................................................................................. 165
5.4.34.eImageQualityCheckType ................................................................................................................................ 166
5.4.35.diDocType ............................................................................................................................................................. 166
5.4.36.eRPRM_ResultStatus .......................................................................................................................................... 169
5.4.37.eRPRM_NotificationCodes ............................................................................................................................... 170
5.4.38.eRPRM_ErrorCodes ............................................................................................................................................ 172
5.4.39.eRPRM_Commands ............................................................................................................................................ 176
5.4.40.eDocumentStatus ............................................................................................................................................... 178
5.4.41.eDeviceLimitations ............................................................................................................................................. 178

5Оглавление
5.5. СИСТЕМА КОМАНД SDK ...................................................................................................................................... 179
5.5.1. RPRM_Command_Device_Count ................................................................................................................... 179
5.5.2. RPRM_Command_Device_Features............................................................................................................... 179
5.5.3. RPRM_Command_Device_RefreshList .......................................................................................................... 179
5.5.4. RPRM_Command_Device_ActiveIndex......................................................................................................... 180
5.5.5. RPRM_Command_Device_Connect ............................................................................................................... 180
5.5.6. RPRM_Command_Device_Disconnect.......................................................................................................... 180
5.5.7. RPRM_Command_Device_Light_ScanList_Clear ........................................................................................ 180
5.5.8. RPRM_Command_Device_Light_ScanList_Default .................................................................................... 180
5.5.9. RPRM_Command_Device_Light_ScanList_Count ...................................................................................... 181
5.5.10.RPRM_Command_Device_Light_ScanList_Item ......................................................................................... 181
5.5.11.RPRM_Command_Device_Light_ScanList_AddTo ..................................................................................... 181
5.5.12.RPRM_Command_Device_Light_TurnOn ..................................................................................................... 181
5.5.13.RPRM_Command_Device_LED ........................................................................................................................ 182
5.5.14.RPRM_Command_Device_Set_ParamLowLight ......................................................................................... 182
5.5.15.RPRM_Command_Device_ PlaySound ......................................................................................................... 182
5.5.16.RPRM_Command_Device_Get_ParamLowLight ........................................................................................ 182
5.5.17.RPRM_Command_Device_Calibration .......................................................................................................... 182
5.5.18.RPRM_Command_Process ............................................................................................................................... 182
5.5.19.RPRM_Command_ProcessImagesList ........................................................................................................... 183
5.5.20.RPRM_Command_Options_GraphicFormat_Count .................................................................................. 183
5.5.21.RPRM_Command_Options_GraphicFormat_Select .................................................................................. 183
5.5.22.RPRM_Command_Options_GraphicFormat_Name .................................................................................. 183
5.5.23.RPRM_Command_Options_GraphicFormat_ActiveIndex ....................................................................... 184
5.5.24.RPRM_Command_Options_GetSDKCapabilities ....................................................................................... 184
5.5.25.RPRM_Command_Options_GetSDKAuthCapabilities .............................................................................. 184
5.5.26.RPRM_Command_Options_Set_MRZTestQualityParams ....................................................................... 184
5.5.27.RPRM_Command_Options_Get_MRZTestQualityParams....................................................................... 184
5.5.28.RPRM_Command_Options_Get_CurrentDocumentType ....................................................................... 185
5.5.29.RPRM_Command_Options_Set_CurrentDocumentType ........................................................................ 185
5.5.30.RPRM_Command_Options_Set_CustomDocTypeMode ......................................................................... 185
5.5.31.RPRM_Command_Options_Get_CustomDocTypeMode ........................................................................ 185
5.5.32.RPRM_Command_Get_DocumentsInfoList ................................................................................................. 185
5.5.33.RPRM_Command_OCRLexicalAnalyze ......................................................................................................... 186
5.5.34.RPRM_Command_Device_IsCalibrated ........................................................................................................ 186
5.5.35.RPRM_Command_Device_Set_WorkingVideoMode................................................................................ 186
5.5.36.RPRM_Command_Device_Get_WorkingVideoMode ............................................................................... 186
5.5.37.RPRM_Command_Options_Set_CheckResultHeight ................................................................................ 187
5.5.38.RPRM_Command_Options_Set_AuthenticityCheckMode ...................................................................... 187
5.5.39.RPRM_Command_Options_Get_AuthenticityCheckMode ..................................................................... 187
5.5.40.RPRM_Command_Options_Get_BatteryStatus .......................................................................................... 187
5.5.41.RPRM_Command_Options_BuildExtLog ...................................................................................................... 188
5.5.42.RPRM_Command_Device_SetFrequencyDivider ....................................................................................... 188
5.5.43.RPRM_Command_Device_Get_DriverVersion ............................................................................................ 188
5.5.44.RPRM_Command_Device_APM_Mode......................................................................................................... 188
5.5.45.RPRM_Command_Device_UseVideoDetection.......................................................................................... 188
5.5.46.RPRM_Command_ExpertAnalyze................................................................................................................... 188
5.5.47.RPRM_Command_ClearResults ...................................................................................................................... 189
5.5.48. RPRM_Command_Options_GraphicFormat_SetCompressionRatio............................................................................ 189
5.5.49. RPRM_Command_Options_GraphicFormat_GetCompressionRatio........................................................................... 189
5.5.50.RPRM_Command_Process_Cancel ................................................................................................................ 189
5.5.51.RPRM_Command_ExcludeCapabilities......................................................................................................... 189
5.5.52.RPRM_Command_ExcludeAuthCapabilities ............................................................................................... 189
5.5.53.RPRM_Command_MakeSingleShot .............................................................................................................. 190
5.5.54.RPRM_Command_Device_GetFrequencyDivider ...................................................................................... 190
6
Оглавление
5.5.55.RPRM_Command_ComplexAuthenticityCheck ......................................................................................... 190
5.5.56.RPRM_Command_Options_Set_GlareCompensation .............................................................................. 190
5.5.57.RPRM_Command_Options_Set_ExtendProcessingModes ..................................................................... 190
5.5.58.RPRM_Command_Options_Get_AppendVisa ............................................................................................ 190
5.5.59.RPRM_Command_Options_Set_AppendVisa ............................................................................................. 191
5.5.60. RPRM_Command_Options_Set_MultiPageProcessingMode..................................................................... 191
5.5.61. RPRM_Command_Device_Get_Calibration_FrequencyDivider......................................................................... 191
5.5.62. RPRM_Command_PortraitGraphicalAnalyze ...................................................................................................... 191
5.5.63. RPRM_Command_Options_Set_SmartUV .......................................................................................................... 191
5.5.64. RPRM_Command_Options_Set_RotateResultImages ....................................................................................... 191
5.5.65. RPRM_Command_BSIDocCheckXML.................................................................................................................. 192
5.5.66. RPRM_Command_Options_Get_BatteryNumber .............................................................................................. 192
5.5.67. RPRM_Command_Options_Get_QuickBoardingPassProcessing ..................................................................... 192
5.5.68. RPRM_Command_Options_Set_QuickBoardingPassProcessing...................................................................... 192
5.5.69. RPRM_Command_Options_Set_QuickMrzProcessing ...................................................................................... 192
5.5.70. RPRM_Command_Options_Get_QuickMrzProcessing...................................................................................... 192
5.5.71. RPRM_Command_Device_SetVideoDetectionDivider....................................................................................... 193
5.5.72. RPRM_Command_Device_GetVideoDetectionDivider...................................................................................... 193
5.5.73. RPRM_Command_Device_SetRequiredOcrFields .............................................................................................. 193
5.5.74. RPRM_Command_Device_GetRequiredOcrFields ............................................................................................. 193
5.5.75. RPRM_Command_Options_Set_WaitForReadingComplete............................................................................. 193
5.5.76. RPRM_Command_ReadingComplete ................................................................................................................. 193
5.5.77. RPRM_Command_Options_Get_LexAnalysisDepth........................................................................................... 194
5.5.78. RPRM_Command_Options_Set_LexAnalysisDepth............................................................................................ 194
5.5.79. RPRM_Command_Options_Get_LexDateFormat............................................................................................... 194
5.5.80. RPRM_Command_Options_Set_LexDateFormat................................................................................................ 194
5.5.81. RPRM_Command_Device_Get_GetJpegImages................................................................................................. 194
5.5.82. RPRM_Command_Device_Set_GetJpegImages ................................................................................................. 194
5.5.83. RPRM_Command_BSIDocCheckXMLv2.............................................................................................................. 194
5.5.84. RPRM_Command_Options_Get_TrustDPI........................................................................................................... 194
5.5.85. RPRM_Command_Options_Set_TrustDPI ........................................................................................................... 194
5.5.86. RPRM_Command_Options_Get_LexParams ....................................................................................................... 195
5.5.87. RPRM_Command_Options_Set_LexParams........................................................................................................ 195
5.5.88. RPRM_Command_Options_Get_StopOnBadInputImage................................................................................. 195
5.5.89. RPRM_Command_Options_Set_StopOnBadInputImage.................................................................................. 195
5.5.90. RPRM_Command_Set_ProcessParametersJson ................................................................................................. 195
5.5.91. RPRM_Command_Options_Set_VideodetectionLowSensibility....................................................................... 195
5.5.92. RPRM_Command_Options_Set_TrustVideodetectionResult ............................................................................ 196
5.5.93. RPRM_Command_Device_Get_LED ..................................................................................................................... 196
5.5.94. RPRM_Command_Get_DatabaseInfo.................................................................................................................. 196
5.5.95. RPRM_Command_Device_Fingerprints_Scan ..................................................................................................... 196
5.5.96. RPRM_Command_Fingerprints_Compare .......................................................................................................... 196
5.5.97. RPRM_Command_Add_External_Containers...................................................................................................... 196
5.5.98. RPRM_Command_Fingerprints_Search............................................................................................................... 196
5.6. НАСТРОЙКИ JSON ............................................................................................................................................... 198
5.6.1. Trivia............................................................................................................................................................................ 198
5.6.2. Режим Authenticity Safe.......................................................................................................................................... 200
5.6.3. Отключение проверки подлинности ................................................................................................................. 200
5.6.4. Режим Evaluation ..................................................................................................................................................... 200
5.6.5. Обезличивание изображений............................................................................................................................. 201
5.6.6. Сравнение портретов ............................................................................................................................................ 202
5.6.7. Проверки стоп-листа ............................................................................................................................................. 203
5.6.8. Интеграция Face SDK.............................................................................................................................................. 204
5.6.8.1. livePortrait ...................................................................................................................................................205
5.6.8.2. extPortrait....................................................................................................................................................205

7Оглавление
5.6.8.3. oneShotIdentification ..............................................................................................................................206
5.6.9. Включение обнаружения Card Access Number................................................................................................ 206
8
Список сокращений
СПИСОК СОКРАЩЕНИЙ
SDK– Software Development Kit – программный пакет разработчика
ИСС– информационно-справочная система, содержащая сведения об
основных признаках подлинности паспортов, идентификационных и
проездных документов, документов на право управления
и распоряжения автотранспортными средствами на пяти уровнях
системы защиты: полиграфия, ультрафиолетовая 365 нм и 254 нм,
инфракрасная и специальные материалы
OCR– Optical Character Recognition – оптическое распознавание символов
MRZ (МСЗ)– Machine Readable Zone – машиносчитываемая зона (документа) –
МСЗ
RFID– Radio Frequency Identification – радиочастотная идентификация
RFID-
микросхема – бесконтактная идентификационная микросхема
MCL– Main Control Library – главная управляющая библиотека SDK
ВД– владелец документа
ВУ– водительское удостоверение
ИК– инфракрасный (диапазон спектра) свет
ОС– операционная система
ПК– персональный компьютер
ТС– транспортное средство
УФ– ультрафиолетовый (диапазон спектра) свет

9Введение
ВВЕДЕНИЕ
Данное «Руководство программиста» описывает порядок использования SDK
при разработке пользовательских приложений для работы с приборами «Регула»
моделей 70х3, 70x4, 70x7, 70x8, 4820, 83x3, 83x4, 8307 (расшифровку обозначений символов
«x» см. в «Руководстве по эксплуатации»).
10
Минимальные cистемные требования
МИНИМАЛЬНЫЕ CИСТЕМНЫЕ
ТРЕБОВАНИЯ
Процессор ......................................................Intel Core 2 1.8 GHz
RAM.....................................................................1 Gb
VideoRAM ........................................................32 Mb
OC ........................................................................Windows 7
SystemBus ........................................................USB 2.0 HighSpeed
HDD свободное место .............................1 Gb
Дополнительное ПО .................................ИСС SDU, FDS, Passport или Autodocs

11Структура SDK
1. СТРУКТУРА SDK
\ProgramData\Regula\Document Reader SDK\
RegulaReader.ini
– файл конфигурации SDK;
\Program Files\Regula\Drivers\ – драйвера устройств;
Для SDK x64 - \Windows\SysWOW64\
Для SDK x86 - \Windows\System32\
borlndmm.dll
– системные библиотеки;
cc*mt.dll
libiomp5md.dll
ipp*.dll
libcrypto*.dll
opencv_*.dll
rtl*.bpl
vcl*.bpl
vclimg*.bpl
vclx*.bpl
xmlrtl*.bpl
WltRS.dll (только x86)
mpir.dll
\Program Files\Regula\Document Reader SDK\
PasspR40.dll
– управляющая библиотека RFID и её файлы
devices.dat
данных;
resource.dat
libssl-*.dll
– криптографические и SSL библиотеки;
libcrypto-*.dll
libeay32.dll
ssleay32.dll
MRZCMP.dll
– служебные библиотеки для оптического
mrzproc.dll, .ini
распознавания символов машиносчитываемой
TestOcrB.bin
зоны;
OCRBEXT.dat
IntelIPPDlls.ini
ippImProc.dll, .ini– служебные библиотеки и конфигурационные
файлы для расознавания типа документа,
считывания текста и графических данных,
автоматической аутентификации документа;
Imaging.dll– служебная библиотека для чтения/записи
изображений;
– демонстрационная программа SDK и её файл
локализации;
– программа Debug View для анализа логов
системы;
READERDEMO.exe
Translator.xml
Dbgview.exe
12
Структура SDK
TrackR.dll,.dat, .json,
.xml
RegulaReaderFX.dll
(устанавливается всегда)
– библиотеки для захвата видеопотока с веб-
камеры и отслеживания движения лица;
– библиотеки управления цифровыми камерами
Regula, 3M и DESKO;
Reader3M.dll
ReaderDesko.dll
(устанавливаются в составе
third-party компонентов)
BiolinkFPR.dll
bsdk6x.dll
TouchlabFPR.dll
– библиотеки управления считывателями
отпечатков пальцев BioLink и Jenetric;
(устанавливаются в составе
third-party компонентов)
realsense2.dll
(устанавливается в составе
third-party компонентов)
– библиотека управления камерой Intel(R)
RealSense (TM) Depth.
\Program Files\Regula\Document Reader SDK\Data\ – директория, содержащая
данные, необходимые для обработки документа (классификация типа, OCR
и т. д.);
\Program Files\Regula\:
RegulaQS.url
– ссылка на Regula Quick Support;
For SDK x64 - \Windows\twain_64\
For SDK x86 - \Windows\twain_32\
RegulaReaderDS.ds
– файл интерфейса TWAIN для работы со
считывателем;
\Program Files\Regula\Samples\ – директория, содержащая проекты тестовых
приложений, иллюстрирующих использование программных средств SDK;
\Program Files\Regula\Samples\Include\
PasspR.h
– заголовочный файл SDK (C++);
PasspR.pas
– заголовочный файл SDK (Delphi);
– библиотека типов SDK (Delphi);
READERDEMO.tlb
READERDEMO_TLB.pas
\Program Files\Regula\Document Reader SDK\Doc\:
Documents List.pdf
– содержимое текущей базы данных документов
Documents List Autodocs.pdf

SDK;
– содержимое текущей базы данных документов
SDK (только автодокументы);
13Структура SDK
Documents List Passports.pdf
Documents List Other.pdf
Programmers Guide (en).pdf
Programmers Guide (ru).pdf
COM interface documentation.pdf
Test Application(en).pdf
Test Application(ru).pdf
Eula.pdf
– содержимое текущей базы данных документов
SDK (только проездные документы);
– содержимое текущей базы данных документов
SDK (остальные документы);
– данное Руководство;
– документация COM-объекта;
– описание демонстрационной программы;
– пользовательское соглашение
Примечание. По умолчанию документация устанавливается на двух языках: русском и
английском. Это поведение можно изменить, выбрав один конкретный
язык или полностью исключить установку документации.
14
Возможности SDK
2. ВОЗМОЖНОСТИ SDK
SDK позволяет:
• получать изображения от считывателей документов с использованием различных
схем освещения;
• локализовать страницу документа на изображении;
• производить чтение текстовых данных, проверять подлинность и оценивать
качество печати МСЗ;
• осуществлять поиск и чтение штрихкодов;
• производить чтение данных из текстовых и графических полей заполнения
документа;
• автоматически проверять подлинность документа путем анализа изображений,
полученных с использованием различных схем освещения;
• проводить сравнительный анализ текстовых данных, полученных при
распознавании МСЗ, полей заполнения документа, чтении штрихкодов и
данных, считанных из памяти RFID-микросхемы проездного документа (при
совместном использовании со средствами «SDK для считывателей
бесконтактных идентификационных микросхем»);
• вызывать образцы изображений и описание документа из ИСС для
проведения
визуального
сравнительного
анализа
с
изображениями
обрабатываемого документа.

15Установка и использование средств SDK
3. УСТАНОВКА И ИСПОЛЬЗОВАНИЕ
СРЕДСТВ SDK
Для
установки
программного
пакета
необходимо
запустить
Regula
Document Reader SDK.exe из директории \SDK\ инсталляционного носителя. При
этом происходит установка всех необходимых для работы программных компонентов,
включая драйвера считывателя документов. Драйвера будут установлены
автоматически. Пользователь должен подтвердить установку, если система спросит его
об этом.
ВНИМАНИЕ! Установка должна производиться пользователем ОС, обладающим
правами администратора.
Подключить устройство в свободный слот USB. При этом ОС сообщит о нахождении нового
устройства и произведет активизацию драйвера. В случае запроса системы о
местоположении отдельных компонент драйвера необходимо указать путь к директории
\Program Files\Regula\Drivers\ или соответствующей директории установочного
носителя. При успешной активизации драйвера индикаторная лампочка состояния
прибора загорится оранжевым светом (см. «Руководство по эксплуатации»).
Для использования программных средств SDK в пользовательском проекте
необходимо:
1) подключить заголовочный файл PasspR.h c описаниями экспортируемых из
PasspR40.dll функций, используемых структур данных и констант или заменить их
соответствующими объявлениями, если приложение разрабатывается не на C++;
2) динамически подключить управляющую библиотеку PasspR40.dll, получить
указатели на экспортируемые функции библиотеки с помощью функции Windows
API GetProcAddress().
Путь к библиотеке PasspR40.dll регистрируется в строковом поле Path ключа
HKEY_LOCAL_MACHINE\SOFTWARE\Regula\Document Reader SDK в реестре при
инсталляции SDK. Версия SDK указывается в строковом поле Version того же ключа.
В процессе функционирования главной управляющей библиотеки некоторые
необходимые для ее работы данные (калибровочные сведения, файлы конфигурации,
файлы протоколирования при работе в отладочном режиме) сохраняются в директории
\Users\[User Name]\AppData\Local\Regula\Document Reader SDK.
16
Работа со считывателями документов
4. РАБОТА СО СЧИТЫВАТЕЛЯМИ
ДОКУМЕНТОВ
4.1. ОБЩИЕ СВЕДЕНИЯ
Различные модели приборов обладают различной функциональностью и могут быть
классифицированы по следующим признакам:
1. Формату обрабатываемого документа (ISO/IEC 7810):
• для документов формата ID1 (модели 70х3);
• документов формата ID1–ID3 (модели 70x4, 70x7, 70x8,4820, 83х3 и 83х4);
• только МСЗ для документов формата ID1 (модель 8307).
2. Типу осветителей:
• общий белый свет;
• белый свет с раздельным управлением боковыми и верхним/нижним
осветителями;
• общий ИК-свет;
• ИК-свет с раздельным управлением боковыми и верхним/нижним
осветителями;
• общий УФ-свет;
• коаксиальный белый свет с раздельным управлением левым и правым
осветителями;
• белый свет с матричным управлением, позволяющим контролировать состояние
каждого точечного источника света, входящего в состав осветителей;
• ИК-свет с матричным управлением, позволяющим контролировать состояние
каждого точечного источника света, входящего в состав осветителей.
Программные средства SDK поддерживают работу со всеми вышеперечисленными
типами считывателей документов в полном объеме.
В качестве дополнительного устройства считыватели документов могут
комплектоваться считывателем RFID-микросхем, работа с которым должна
производиться в соответствии с рекомендациями «SDK для считывателей
бесконтактных идентификационных микросхем».

17Работа со считывателями документов
4.2. ОРГАНИЗАЦИЯ РАБОТЫ
С ГЛАВНОЙ УПРАВЛЯЮЩЕЙ БИБЛИОТЕКОЙ
Главная управляющая библиотека SDK PasspR40.dll экспортирует ряд функций,
с помощью которых осуществляется работа со считывателями документов.
Их работа организована с учетом возможного использования многопоточной схемы
обработки данных. Вызов любых функций библиотеки (за небольшим исключением)
может производиться из разных потоков пользовательского приложения. Это,
например, дает возможность организовать сканирование и обработку данных в
фоновом режиме, оставляя основной интерфейс программы незаблокированным.
Внимание! Выполнение функций MCL _Initialize(), _Free(), а так же выполнение
команд RPRM_Command_Device_Connect и RPRM_Command_Device_Disconnect
должно выполняться в главном потоке программы.
Библиотека PasspR40.dll разработана для проведения динамического
подключения с помощью Windows API функции LoadLibrary(). Указатели на
экспортируемые функции можно получить с использованием Windows API
функции GetProcAddress().
После загрузки библиотеки в память необходимо произвести вызов функции
инициализации _Initialize(). Она объявляет необходимые для дальнейшей работы
системные ресурсы, производит поиск и строит список всех подключенных к ПК
в данный момент времени считывателей документов.
Основной функцией библиотеки, посредством которой пользовательское приложение
может инициировать все необходимые действия для работы со считывателями
документов, является функция _ExecuteCommand(). В качестве параметров она
принимает командный триплет: код команды, входной параметр команды и указатель
на контейнер-приемник для возвращаемых результатов.
Выполнение управляющей библиотекой всех команд проводится по синхронной
схеме. Это означает, что на момент возврата из функции _ExecuteCommand()
в вызывающую ее функцию пользовательского приложения запрошенное действие
полностью завершено, все возможные результаты выполнения команды получены
и являются действительными.
Для получения подробной информации о текущих действиях, происходящих
в процессе выполнения команд, используется механизм callback-функции. С помощью
экспортируемой функции _SetCallbackFunc() можно инициализировать указатель
на функцию пользовательского приложения, имеющую тип NotifyFunc, которая
18
Работа со считывателями документов
будет вызываться на различных этапах выполнения той или иной команды
с представлением кода события и дополнительных сведений в контексте данного
события. При нахождении в callback-функции повторный вызов _ExecuteCommand()
приведет к блокировке выполняющегося потока. Допускается повторный вызов
_ExecuteCommand()
только
с командой
управления
индикаторами
RPRM_Command_Device_LED.
В ряде особых случаев callback-функция может вызываться асинхронно, т. е. вне
контекста текущего рабочего потока приложения, например, при срабатывании
датчика наличия документа.
Запрашиваемые результаты сканирования и обработки данных поступают
в пользовательское приложение через другую callback-функцию, имеющую тип
ResultReceivingFunc,
которая
также
устанавливается
вызовом
_SetCallbackFunc().
Все результаты, сформированные в процессе последнего цикла сканирования
документа и последующей обработки полученных изображений, остаются
доступными также для чтения посредством вызовов функций _CheckResult()
и _CheckResultFromList() до момента проведения следующего цикла
сканирования. Это дает возможность приложениям, разрабатываемым в средах
программирования с существующими объективными ограничениями в работе со
сложными типами данных, получать доступ к результатам с использованием
упрощенного механизма передачи данных (через буфер обмена, файл, в текстовом
виде, формате XML или JSON и т. п.).
По окончании работы с главной управляющей библиотекой необходимо вызвать
функцию _Free() и выгрузить библиотеку из памяти с помощью Windows API функции
FreeLibrary().
Успех выполнения той или иной функции или команды определяется кодом возврата
при ее выполнении. Набор возможных значений определен в перечислении
eRPRM_ErrorCodes.

19Работа со считывателями документов
4.3. ПОДКЛЮЧЕНИЕ/ОТКЛЮЧЕНИЕ СЧИТЫВАТЕЛЯ ДОКУМЕНТОВ
При подключении считывателя документов к свободному USB 2.0 разъему ПК
ОС определит его наличие, произведет активацию драйвера и первичную
инициализацию. При этом в Диспетчере устройств считыватель документов будет
зарегистрирован в разделе «Regula Document Readers» либо «Forensic
Devices».
Главная управляющая библиотека SDK поддерживает работу с любым количеством
считывателей, одновременно подключенных к ПК, но в один момент времени
доступным для обработки может быть лишь один из них.
Для определения общего количества считывателей, подключенных к ПК в текущий
момент времени, служит команда RPRM_Command_Device_Count.
Каждому конкретному устройству в качестве идентификатора ставится в соответствие
его порядковый номер (индекс) в общем списке. Для получения индекса устройства,
с которым установлена связь в текущий момент, служит команда RPRM_Command_Device_ActiveIndex.
Для получения информации о каком-либо устройстве из общего списка служит
команда RPRM_Command_Device_Features. Данная команда заполняет структуру
TRegulaDeviceProperties информацией о считывателе документов с указанным
индексом, что дает пользовательскому приложению возможность определить
конкретное устройство, которое необходимо подключить для дальнейшей работы.
Поскольку считыватели документов, являясь USB-устройствами, могут отключаться
и подключаться к ПК в любой момент времени, список подключенных устройств теряет
свою актуальность. Для обновления списка подключенных к ПК считывателей
документов служит команда RPRM_Command_Device_RefreshList. В отличие от
процедуры поиска подключенных устройств при выполнении функции
_Initialize() эта команда лишь проверяет наличие устройства из ранее
сформированного списка, и, если произошло отключение устройства, удаляет его из
списка. Для обнаружения новых устройств необходимо провести процедуру
переинициализации MCL – произвести последовательный вызов _Free()/_Initialize().
Для подключения конкретного считывателя из общего списка служит команда
RPRM_Command_Device_Connect.
Все команды на чтение данных и все получаемые сообщения о появлении документа
в считывателе будут предназначаться (соответствовать) только текущему активному
устройству.
20
Работа со считывателями документов
В случае, если калибровочная информация считывателя отсутствует на ПК, она
скачивается из считывателя. В ходе этого процесса вызывается callback-функция
NotifyFunc с сообщением RPRM_Notification_DownloadingCalibrationInfo и
с параметром, содержащим текущее значение процесса в процентах.
Для завершения работы с текущим считывателем документов служит команда
RPRM_Command_Device_Disconnect.
Для переключения с одного считывателя документов на другой пользовательское
приложение должно сначала отключить текущее устройство командой
RPRM_Command_Device_Disconnect и лишь затем для другого считывателя
выполнять RPRM_Command_Device_Connect.
При необходимости (в случае отсутствия ее вызова со стороны пользовательского
приложения)
команда
RPRM_Command_Device_Disconnect
выполняется
автоматически при вызове _Free() или во время выгрузки библиотеки из памяти.
Если программно подключенное устройство было физически отключено от USB-порта
ПК, будет вызвана callback-функция NotifyFunc с кодом сообщения
RPRM_Notification_DeviceDisconnected. В этом случае необходимо завершить
текущую
сессию
работы
со
считывателем,
выполнив
команду
RPRM_Command_Device_Disconnect.
Код возврата RPRM_Error_NoError (или RPRM_Error_AlreadyDone) из функции
_ExecuteCommand() при выполнении команды RPRM_Command_Device_Connect
означает, что устройство успешно подключено и полностью готово к работе. Любой
другой код возврата говорит о возникновении ошибок и невозможности дальнейшей
работы с устройством.

21Работа со считывателями документов
4.4. ОПРЕДЕЛЕНИЕ ФУНКЦИОНАЛЬНЫХ ВОЗМОЖНОСТЕЙ
СЧИТЫВАТЕЛЯ ДОКУМЕНТОВ
Одним из этапов подключения считывателя документов является определение набора
функций получения изображений и обработки данных, доступных при работе с этим
устройством.
Битовую комбинацию флагов, определяющую функциональные возможности по
обработке данных для активного считывателя, можно получить с помощью команды
RPRM_Command_Options_GetSDKCapabilities.
Набор функций получения изображений определяется доступными схемами освещения
считывателя. Для получения полного их списка необходимо воспользоваться
командами опроса списка схем освещения для сканирования. При подключении
считывателя происходит заполнение этого списка значениями по умолчанию,
которыми и являются идентификаторы всех доступных схем освещения.
Для принудительного заполнения списка значениями по умолчанию служит команда
RPRM_Command_Device_Light_ScanList_Default.
Для
получения
количества
элементов списка – RPRM_Command_Device_Light_ScanList_Count. Для получения
значения элемента списка – RPRM_Command_Device_Light_ScanList_Item.
Таким образом, сразу после подключения считывателя документов пользовательское
приложение должно опросить список схем освещения для сканирования, чтобы
получить полный набор доступных схем освещения. В дальнейшем для проведения
сканирования можно указывать только эти значения. Любые другие идентификаторы схем
освещения будут игнорироваться.
22
Работа со считывателями документов
4.5. ПРОЦЕДУРА КАЛИБРОВКИ
Важнейшим этапом подготовки считывателя документов к полноценной работе
является процедура калибровки. Она нужна для того, чтобы определить необходимые
параметры работы цифровой камеры (коэффициент усиления, баланс белого цвета)
для каждой схемы освещения и подготовить данные, которые впоследствии будут
использованы для компенсации геометрических искажений, неравномерности
освещения и цветового баланса в получаемых изображениях.
Все приборы откалиброваны и требуют перекалибровки только в случаях нарушения
качества получаемых изображений, каждый раз после использования команды
RPRM_Command_Device_SetFrequencyDivider и изменения делителя частоты, при
переходе с питания устройства по USB-кабелю на питание от внешнего источника
и наоборот.
Процедура калибровки инициируется командой RPRM_Command_Device_Calibration.
На первом этапе калибровки будут определены необходимые параметры цифровой
камеры для каждой схемы освещения – устройство последовательно включит
соответствующие осветители. Вначале будет проведен полный цикл сканирования
чистого (белого) тест-объекта, изображения которого будут использоваться для
компенсации неравномерности освещения и цветового баланса. Вслед за этим –
полный цикл сканирования тест-объекта в виде шахматной доски, данные обработки
изображений которого необходимы для компенсации геометрических искажений.
Набор схем освещения для процедуры калибровки определяется списком схем
освещения для сканирования по умолчанию.
Начало и окончание процедуры калибровки устройства отмечается вызовами callback-
функции NotifyFunc с кодом сообщения RPRM_Notification_Calibration
с параметром «false» и «true» соответственно.
Прогресс проведения калибровки отмечается вызовами callback-функции NotifyFunc
с кодом сообщения RPRM_Notification_CalibrationProgress и параметром,
содержащим значение степени выполнения калибровки в процентах.
Для представления пользователю диалога с просьбой вставить тот или иной
калибровочный тест-объект используется вызов callback-функции NotifyFunc
с кодом сообщения RPRM_Notification_CalibrationStep и параметром,
содержащим фазу калибровки:
0 – необходим калибровочный тест-объект № 1 (белый);
1 – необходим калибровочный тест-объект № 2 (шахматная доска).

23Работа со считывателями документов
Полученные калибровочные данные сохраняются в памяти прибора и на диске
в директориях \Users\[User Name]\AppData\Local\Regula\Document Reader
SDK \Calibration.
Загрузка ранее полученных калибровочных данных входит в процедуру подключения
считывателя документов к пользовательскому приложению.
Команда RPRM_Command_Device_IsCalibrated позволяет узнать, была ли проведена
процедура калибровки для текущего активного считывателя и являются ли данные
калибровки корректными.
Без проведения калибровки возможно только сканирование необрезанных
изображений. Никакая их обработка выполняться не будет. Об этом будет
сигнализировать код возврата из функций главной управляющей библиотеки
RPRM_Error_DeviceNotCalibrated.
24
Работа со считывателями документов
4.6. СКАНИРОВАНИЕ И ОБРАБОТКА ДАННЫХ
4.6.1. Представление и хранение данных
Результаты сканирования и обработки полученных изображений представляются
единообразно с использованием структуры-контейнера TResultContainer (для
отдельного результата) и списка TResultContainerList (для хранения и передачи
нескольких результатов за одну операцию).
Для хранения различных типов результатов работы MCL существует набор соответствующих
структур данных. Каждая из них может быть помещена в TResultContainer с целью
передачи в пользовательское приложение.
Тип данных, содержащихся в TResultContainer, определяется полем result_type этой
структуры. Оно может содержать одно из значений перечисления eRPRM_ResultType и
однозначно определяет тип указателя, хранящегося в поле buffer. Пользовательское
приложение должно лишь привести этот указатель к необходимому типу, чтобы получить
доступ к содержимому структуры данных результата.
Данные результатов, полученных в одном цикле сканирования и обработки,
сохраняются и после возврата из функции _ExecuteCommand() до момента ее
следующего вызова для выполнения команд RPRM_Command_Process или
RPRM_Command_ProcessImagesList.
4.6.2. Сканирование документа и получение результатов
обработки изображений
Цикл сканирования и обработки получаемых изображений должен быть инициирован
пользовательским приложением путем выполнения команды RPRM_Command_Process.
При этом необходимо убедиться, чтобы в этот момент времени документ находился
в считывателе.
О наличии документа в считывателе сигнализирует приход в callback-функцию
NotifyFunc сообщения с кодом RPRM_Notification_DocumentReady. Значение
параметра сообщения («true» или «false») показывает, что документ был
соответственно помещен в считыватель или удален из него.
Перед тем как непосредственно запустить цикл сканирования и обработки
изображений следует предварительно:
• определить набор данных, который необходимо получить в качестве результата;

25Работа со считывателями документов
• определить набор схем освещения, для которых необходимо получить
отсканированные изображения документа (если выбран соответствующий тип
запрашиваемого результата – RPRM_GetImage_Modes_GetImages);
• в случае необходимости получения изображения для схемы УФ-освещения
установить для нее значение экспозиции сканирования;
• если в набор запрашиваемых данных входит результат проверки качества
заполнения МСЗ (RPRM_GetImage_Modes_OCR_TestMRZQuality) – установить
параметры проведения проверки.
Набор запрашиваемых результатов формируется логической комбинацией (операцией
«OR») значений из перечисления eRPRM_GetImage_Modes и передается в качестве
параметра команды RPRM_Command_Process. Только выбранные таким образом результаты
будут переданы пользовательскому приложению в процессе выполнения команды.
Набор необходимых схем освещения формируется заполнением списка схем
освещения для сканирования.
Команда RPRM_Command_Device_Light_ScanList_Clear очищает текущий список.
Команда RPRM_Command_Device_Light_ScanList_AddTo заносит в список новый
элемент. Если указанный идентификатор схемы освещения не входит в состав списка
схем освещения по умолчанию, он игнорируется, что индицируется кодом возврата
RPRM_Error_LightIsNotAllowed.
Команда RPRM_Command_Device_Get_ParamLowLight возвращает текущую величину
экспозиции сканирования для схемы УФ-освещения.
Команда RPRM_Command_Device_Set_ParamLowLight
экспозиции сканирования для схемы УФ-освещения.
устанавливает
величину
В дополнение к схеме освещения могут быть установлены опциональные параметры
“Умный УФ” и “Компенсация бликов”. Их установка осуществляется вызовом команд
RPRM_Command_Options_Set_SmartUV
и
RPRM_Command_Options_Set_GlareCompensation соответственно.
В случае если пользовательское приложение установило callback-функцию
ResultReceivingFunc для получения результатов, она будет вызываться по мере
формирования результатов сканирования и последующей обработки изображений. В
качестве параметра эта функция получает указатель на структуру TResultContainer,
содержащую данные результата того или иного типа.
26
Работа со считывателями документов
В процессе выполнения цикла сканирования и обработки данных возможен также
вызов другой callback-функции – NotifyFunc – для передачи информационных
сообщений.
Начало и окончание сканирования изображений документа отмечается приходом
сообщения RPRM_Notification_Scanning с параметром «false» при начале
сканирования и «false» при его окончании.
Начало и окончание обработки изображений документа отмечается приходом
сообщения RPRM_Notification_Processing с параметром «false» при начале
обработки и «false» при ее окончании.
Получение сообщения RPRM_Notification_DocumentCanBeRemoved означает, что
документ может быть убран из считывателя. До этого момента наличие неподвижного
документа в считывателе обязательно.
Получение сообщения RPRM_Notification_Error с параметром, содержащим один
из кодов eRPRM_ErrorCodes, говорит о возникновении некритической ошибки, чаще
всего – о невозможности формирования какого-либо из запрошенных результатов
(например, когда был запрошен результат чтения МСЗ, а сама МСЗ не была
обнаружена на документе).
Код возврата из _ExecuteCommand() говорит об успешности завершения цикла
сканирования и обработки данных. При его значении, отличном от RPRM_Error_NoError,
операция завершилась с ошибкой или была выполнена не в полном объеме. В любом
случае все уже полученные пользовательским приложением результаты остаются
действительными до момента запуска следующего цикла сканирования.
4.6.3. Получение результатов прямым опросом
Кроме использования механизма получения результатов сканирования и обработки
данных через callback-функцию ResultReceivingFunc существует возможность
доступа к ним уже после возврата из _ExecuteCommand().
Для реализации дополнительного способа получения результатов чтения данных
используются следующие экспортируемые функции главной управляющей библиотеки:
_ResultTypeAvailable(), _CheckResult() и _CheckResultFromList().
Этот способ получения результатов следует использовать в случаях:
• необходимости представления результатов в формате XML;
• необходимости записи полученных изображений или XML-представления
результата в файл;
• если пользовательское приложение не использует механизм получения
результатов через callback-функцию;

27Работа со считывателями документов
• при разработке пользовательского приложения в среде программирования
с ограниченными возможностями использования сложных структурированных типов
данных. В этом случае предлагаемый способ обеспечивает доступ к результатам с
использованием простых стандартных типов данных (Windows DIB, текст) и способов
обмена ими (через буфер обмена ОС или файл);
• для получения дополнительных результатов обработки изображений (например,
RPRM_ResultType_ChosenDocumentTypeCandidate).
Общее количество (соответственно, их доступность) результатов определенного типа,
сформированных за последний цикл сканирования и обработки данных, возвращается
функцией _ResultTypeAvailable().
В качестве входных параметров _CheckResult() принимает тип запрашиваемых
данных (одно из значений eRPRM_ResultType в параметре функции type), индекс объекта
в общем списке доступных результатов запрашиваемого типа (параметр idx), формат
и механизм передачи данных (OR-комбинация значений eRPRM_ OutputFormat в
параметре функции output) и параметры передачи данных (параметр param в
контексте значения output).
Если возвращаемое _CheckResult() значение «меньше 0», то оно является одним из
кодов ошибки eRPRM_ResultStatus. Если возвращаемое значение «больше 0», то оно
фактически является указателем на структуру TResultContainer, содержащую
запрашиваемые данные. Его можно использовать непосредственно, приведя к типу
TResultContainer*, либо для доступа к полям структур, являющихся списками
однотипных данных, через функцию _CheckResultFromList(). Во втором случае
вызов функции _CheckResult() является промежуточным шагом для получения
конкретных данных.
Кроме получения указателя на соответствующую структуру данных результата,
дополнительную форму представления данных можно формировать комбинацией
значений из перечисления eRPRM_OutputFormat в параметре output:
• для записи изображений (тип результата RPRM_ResultType_RawImage) в файл
необходимо указать комбинацию ofrFormat_FileBuffer и ofrTransport_File.
Формат записи будет соответствовать текущему установленному формату записи
графических файлов. Указатель на символьную строку с именем файла в кодировке
UTF8 должен передаваться в параметре param;
• для формирования XML-представления структуры данных результата необходимо
указать ofrFormat_XML. В этом случае поле XML_buffer возвращаемой
структуры TResultContainer будет содержать указатель на начало текстового
буфера XML-образа, а поле XML_length – длину этого буфера. Добавление
ofrTransport_File указывает на необходимость записи сформированного XML-
представления результата в файл, имя которого в кодировке UTF8 передается в
param. В случае если ofrFormat_XML находится в комбинации
28
Работа со считывателями документов
с ofrFormat_FileBuffer, в XML-форму будет преобразовано содержимое
буфера, включающего образ графического файла – результата записи изображения;
• для передачи изображения или текста XML-представления результата через
буфер обмена ОС необходимо включить ofrTransport_Clipboard в
комбинацию output.
Для доступа к отдельным полям структур, являющихся списками однотипных текстовых
(TDocVisualExtendedInfo) или графических (TDocGraphicsInfo) данных, служит
функция _CheckResultFromList().
В качестве входных данных _CheckResultFromList() принимает в параметре
container дескриптор списка результатов, полученный при вызове _Check Result(),
в параметре output – идентификатор механизма передачи данных (одно из значений
eRPRM_OutputFormat) и в param – специфические (в контексте значения output)
параметры передачи данных. Возвращаемое функцией значение содержит тип
передаваемого поля (одно из значений eVisualFieldType или eGraphicFieldType).
В случае возникновения ошибки или при достижении конца списка полей
возвращается одно из значений eRPRM_ResultStatus.
В отличие от _CheckResult() параметр output функции _CheckResultFromList()
должен содержать не комбинацию значений из eRPRM_OutputFormat, а конкретное
значение из этого перечисления, определяющее способ передачи содержимого полей
списка результатов:
• ofrTransport_Clipboard – через буфер обмена Windows (для текстовых полей
структуры TDocVisualExtendedInfo и графических изображений из структуры
TDocGraphicsInfo);
• ofrTransport_File – через файл (для графических изображений из структуры
TDocGraphicsInfo).
В первом случае параметр функции param игнорируется. Во втором случае он должен
содержать указатель на символьную строку с именем файла. Формат записи будет
соответствовать текущему установленному формату записи графических файлов.
Команда RPRM_Command_Options_GraphicFormat_Count возвращает
количество доступных графических форматов записи изображений.
общее
Команда RPRM_Command_Options_GraphicFormat_Name возвращает символьную
строку с расширением файла для указанного индекса формата записи изображений.
Выбор формата записи изображений по индексу
RPRM_Command_Options_GraphicFormat_Select.
производится
командой
Команда RPRM_Command_Options_GraphicFormat_ActiveIndex возвращает индекс
текущего формата записи изображений в общем списке.

29Работа со считывателями документов
Таким образом, для получения содержимого всех текстовых или графических
полей, содержащихся в структурах-списках, необходимы следующие действия:
• вызов _CheckResult() с указанием соответствующего типа запрашиваемого
результата;
• вызов _CheckResultFromList() с использованием полученного дескриптора
результата до момента достижения конца списка (код возврата –
RPRM_ResultStatus_EndOfList).
После возврата из _CheckResultFromList() запрашиваемые данные находятся
либо в буфере обмена, либо записаны в файл с указанным именем.
4.6.4. Обработка списка заранее полученных изображений
Для выполнения цикла обработки заранее полученных изображений документа
служит команда RPRM_Command_ProcessImagesList. Она является полным аналогом
команды RPRM_Command_Process с той только разницей, что при ее выполнении не
происходит реального сканирования документа, а в качестве входных данных
используется список изображений, передаваемый в параметре команды.
По умолчанию можно обработать только изображения, полученные ранее на этом же
считывателе. Возможность RPRM_Capabilities_ProcessImages, позволяющая
обработать изображения, полученные из другого источника, должна быть добавлена
в считыватель по индивидуальному запросу.
Обязательным условием успешного выполнения данной команды является тот факт, что все
передаваемые изображения должны быть полными (необработанными). Это достигается
путем их получения в цикле сканирования без указания каких-либо дополнительных
функций обработки, кроме RPRM_GetImage_Modes_GetImages. В этом случае получаемые
в контейнере с типом RPRM_ResultType_RawImage изображения будут
единственным результатом выполнения цикла сканирования.
В качестве параметра команды RPRM_Command_ProcessImagesList выступает список
TResultContainerList структур-контейнеров TResultContainer, содержащих
изображения документа. Изображения должны быть представлены в формате
TRawImageContainer, на что должно указывать значение поля result_type каждой
структуры TResultContainer списка (оно должно быть равно RPRM_ResultType_RawImage).
Существуют две экспортируемые функции главной управляющей библиотеки SDK,
отвечающие за правильное выделение памяти для хранения изображений в виде
TRawImageContainer
и
освобождение
этой
памяти.
Это
функции
_AllocRawImageContainer() и _FreeRawImageContainer() соответственно.
При создании копии получаемых изображений для последующего использования
в команде RPRM_Command_ProcessImagesList рекомендуется, чтобы пользовательское
30
Работа со считывателями документов
приложение оперировало этими
правильного распределения памяти.

сервисными
функциями
для
гарантированно
31Работа со считывателями документов
4.7. ФУНКЦИИ ОБРАБОТКИ ДАННЫХ И ПОРЯДОК ИХ ПРИМЕНЕНИЯ
ПРИ ПРОВЕДЕНИИ ЦИКЛОВ СКАНИРОВАНИЯ И ОБРАБОТКИ
Как уже отмечалось, определение набора функций получения изображений
и обработки данных, доступных при работе со считывателем документов,
производится на этапе подключения устройства.
Битовую комбинацию значений из перечисления eRPRM_Capabilities, определяющую
функциональные возможности по обработке данных для активного считывателя, можно
получить с помощью команды RPRM_Command_Options_GetSDKCapabilities.
Набор действий, которые необходимо выполнить в процессе проведения цикла
сканирования и обработки данных, и, соответственно, набор данных-результатов этих
действий, требуемый пользовательским приложением, определяется параметром
команды RPRM_Command_Process (или RPRM_Command_ProcessImagesList).
Далее приводится описание каждого из этапов получения и обработки данных
в хронологической последовательности проведения цикла сканирования.
4.7.1. Получение отсканированных изображений
Для получения изображений документа в качестве результатов выполнения цикла
сканирования
и
обработки
данных
необходимо
указать
RPRM_GetImage_Modes_GetImages в наборе функций цикла сканирования (в параметре
команд RPRM_Command_Process или RPRM_Command_ProcessImagesList).
Набор схем освещения, для которых необходимо получить изображения, определяется
содержимым списка схем освещения для сканирования. Каждое из соответствующих
изображений будет представлено в виде структуры данных TRawImage Container и
передано через callback-функцию ResultReceivingFunc либо может быть получено
через вызов _CheckResult().
Помимо указанных в списке схем освещения для выполнения заявленных функций
обработки могут понадобиться и изображения документа, снятые для схем освещения,
не включенных в список. В этом случае они будут получены, но не будут включены в
набор сформированных результатов для передачи пользовательскому приложению.
Начало и окончание основного сканирования изображений документа отмечается
сообщением RPRM_Notification_Scanning (с параметром «false» при начале
сканирования и «true» по его окончании).
Список необходимых для сканирования схем освещения может быть также уточнен после
проведения процедуры определения типа документа. В этом случае необходимые
изображения будут получены дополнительным сканированием, после чего
32
Работа со считывателями документов
пользовательское
приложение
получит
сообщение
RPRM_Notification_DocumentCanBeRemoved. Получение именно этого сообщения
означает, что документ может быть убран из считывателя. До данного момента наличие
неподвижного документа в считывателе обязательно.
Изображения документа, получаемые при дальнейшей обработке (вырезанные по
границе документа, с проведенной компенсацией неравномерности освещения
и коррекцией цветового баланса), будут переданы в пользовательское
приложение при завершении выполнения команды RPRM_Command_Process
(или RPRM_Command_ProcessImagesList). Для этих изображений тип результата
будет установлен в RPRM_ResultType_RawImage.
4.7.2. Локализация документа на изображении
Для нахождения документа на отсканированных изображениях, а также формирования
результирующих изображений документа, вырезанных по найденным границам, с
проведенной компенсацией неравномерности освещения и коррекцией цветового
баланса, необходимо указать RPRM_GetImage_Modes_LocateDocument в наборе
функций цикла сканирования (в параметре команд RPRM_Command_Process или
RPRM_Command_ProcessImagesList).
После успешного определения границ документа производится дополнительный
анализ формата документа (по ISO/IEC 7810). В соответствии с его результатами
возможен дополнительный поворот изображения.
4.7.3. Чтение и контроль качества заполнения
машиносчитываемой зоны
Для получения результатов чтения МСЗ документа в качестве результата
выполнения цикла сканирования и обработки данных необходимо указать
RPRM_GetImage_Modes_OCR_MRZ в наборе функций цикла сканирования (в параметре
команд RPRM_Command_Process или RPRM_Command_ProcessImagesList).
Для получения
результата
контроля
качества
заполнения
МСЗ
–
RPRM_ResultType_MRZ_TestQuality.
Результаты передаются в пользовательское приложение в виде
TDocVisualExtendedInfo и TDocMRZTestQuality соответственно.
структур
Для структуры TDocVisualExtendedInfo тип результата устанавливается равным
RPRM_ResultType_MRZ_OCR_Extended, для TDocMRZTestQuality им является
RPRM_ResultType_MRZ_TestQuality.

33Работа со считывателями документов
После чтения МСЗ в зависимости от ее месторасположения может быть выполнен
дополнительный поворот изображений.
Параметры проверки качества заполнения МСЗ устанавливаются
RPRM_Command_Options_Set_MRZTestQualityParams.
Команда
RPRM_Command_Options_Get_MRZTestQualityParams
текущие значения параметров проверки качества заполнения МСЗ.
Правильность текстового заполнения МСЗ определяется
требованиями ICAO 9303 для машиносчитываемых документов.
в
командой
возвращает
соответствии
с
Качество печати текста в МСЗ проверяется в соответствии с ISO 1831:1980
«Характеристики печатного изображения для оптического распознавания символов».
По умолчанию выполняются проверки на предмет правильности заполнения МСЗ
и контрольных сумм.
4.7.4. Определение типа документа
Для определения типа документа и получения этой информации в качестве результата
выполнения цикла сканирования и обработки данных необходимо указать
RPRM_GetImage_Modes_DocumentType в наборе функций цикла сканирования
(в параметре команд RPRM_Command_Process или RPRM_Command_ProcessImagesList).
Определение типа документа основано на информации, хранящейся в базе данных
документов, которая входит в состав SDK и копируется на диск в процессе его установки.
По умолчанию база данных размещается в \<директория_установки_SDK>\Data\.
Данные о типе документа содержат разнообразную информацию, включая набор
необходимых схем освещения для проведения последующих операций чтения полей
заполнения документа и проведения проверки подлинности документа. Именно на
основании этих данных происходит получение изображений дополнительным
сканированием.
Существует три режима процедуры определения типа документа:
1. СТАНДАРТНЫЙ РЕЖИМ. В этом режиме работы тип документа определяется
автоматически (путем анализа полученных изображений документа) и
исключительно на основе данных из базы данных документов.
34
Работа со считывателями документов
Информация об обнаруженных кандидатах на искомый тип документа передается
в параметре result callback-функции ResultReceivingFunc в виде списка
TCandidatesListContainer.
Пользовательское приложение должно выбрать один из предложенных кандидатов
и поместить его идентификатор (значение поля ID структуры TOneCandidate)
в возвращаемый параметр callback-функции PostActionParameter. При этом
другой возвращаемый параметр PostAction должен содержать значение
RPRM_PostCalbackAction_ProcessCandidate.
Если параметр PostAction будет содержать значение RPRM_PostCalbackAction_Continue по
возвращении обратно в главную управляющую библиотеку, для дальнейших операций
будет выбран первый элемент из списка предложенных кандидатов. То же самое произойдет
и в случае, если callback-функция получения результатов ResultReceivingFunc не была
установлена.
Если параметр PostAction будет содержать значение RPRM_PostCalbackAction_Cancel по
возвращении обратно в главную управляющую библиотеку, дальнейшие операции,
связанные с необходимостью точного определения типа документа (например, чтение
полей заполнения документа), проводиться не будут.
2. ПОЛЬЗОВАТЕЛЬСКИЙ РЕЖИМ. В этом режиме работы тип документа определяется
пользовательским приложением самостоятельно. Это возможно, например, если
оно обладает собственным алгоритмом, на вход которого можно передать
изображения (RPRM_ResultType_RawImage), полученные ранее в процессе
выполнения текущего цикла сканирования и обработки.
В этом режиме вызов ResultReceivingFunc производится с пустым параметром
result, и пользовательское приложение должно заполнить PostAction
и PostActionParameter самостоятельно определенными значениями, имеющими
такую же смысловую нагрузку, как и в стандартном режиме.
Тонким моментом здесь является тот факт, что идентификатор типа документа,
помещаемый
в
PostActionParameter,
должен
являться
действительным
идентификатором документа, информация о котором содержится в базе данных
документов.
Таким
образом,
должен
существовать
некий
механизм,
позволяющий
пользовательскому приложению установить соответствие между типом документа,
определенным по собственному алгоритму, и конкретным типом документа,
описанным в существующей базе данных.
Одним из шагов, позволяющих установить такую связь, служит возможность
получения информации обо всех типах документов, содержащихся в базе данных.

35Работа со считывателями документов
Она реализуется
вызовом
команды
RPRM_Command_Get_DocumentsInfoList.
Получаемый список TListDocsInfo содержит массив элементов TOCRDocInfo,
каждый из которых соответствует одному зарегистрированному типу документа.
Помимо текстового названия документа, его формата и другой дополнительной
информации, структура TOCRDocInfo содержит два идентификатора: один – числовой
DocID, другой – символьный DocTxtID. Числовой идентификатор служит для указания типа
документа при возврате из ResultReceivingFunc (в параметре PostActionParameter) и
генерируется автоматически при внесении новой записи о документе в базу данных.
Символьный же идентификатор может быть определен вручную и содержать какую-либо
дополнительную информацию (например, внутренний идентификатор), позволяющую
связать этот тип документа с данными, используемыми пользовательским приложением
при самостоятельном определении типа документа.
Таким образом, определив по необработанным изображениям тип документа и имея
его внутренний идентификатор, пользовательское приложение может осуществить его
поиск среди всех документов базы данных, получить соответствующий цифровой
идентификатор и далее использовать его для выбора типа документа при возврате из
callback-функции.
Тип результата RPRM_ResultType_DocumentsInfoList, соответствующий
списку TListDocsInfo, доступен также и через вызов _CheckResult().
Активизация режима пользовательского определения типа документа производится
командой RPRM_Command_Options_Set_CustomDocTypeMode.
Команда
RPRM_Command_Options_Get_CustomDocTypeMode
возвращает
текущее
состояние режима пользовательского определения типа документа (режим активен или нет).
3. РУЧНОЙ РЕЖИМ . В этом режиме работы тип документа, который необходимо
выбрать для проведения дальнейших операций чтения данных, определяется
заданием конкретного значения символьного идентификатора (поле DocTxtID
структуры TOCRDocInfo).
Установка символьного идентификатора типа документа производится командой
RPRM_Command_Options_Set_CurrentDocumentType,
чтение
его
текущего
значения – командой RPRM_Command_Options_Get_CurrentDocumentType.
Этот режим предназначен для использования при невозможности установки callback-
функции для получения результатов ResultReceivingFunc и в ситуации, когда
выбор первого элемента из списка найденных кандидатов (как при работе
в стандартном режиме) не является оптимальным.
36
Работа со считывателями документов
В этом случае, если текущий установленный идентификатор типа документа
не найден в базе данных, процесс выполнения команды RPRM_Command_Process
(или RPRM_Command_ProcessImagesList) будет прерван, и пользовательское
приложение получит информационное сообщение RPRM_Notification_Error
с кодом RPRM_Error_CantRecognizeDocumentType.
Таким образом, для определения типа документа в ручном режиме необходимо:
• проанализировать сформированный список кандидатов, запросив его через
вызов _CheckResult();
• выбрать нужный тип документа в списке кандидатов;
• в общем списке документов базы данных найти соответствующую запись,
определить символьный идентификатор типа документа;
• командой RPRM_Command_Options_Set_CurrentDocumentType установить
идентификатор типа документа;
• повторить цикл сканирования и обработки данных.
Ручной режим определения типа документа имеет наивысший приоритет среди всех
режимов. Это означает, что, если текущий символьный идентификатор типа документа
не пуст, поиск типа документа в базе данных будет всегда проводиться только по нему.
Для перехода к стандартному или пользовательскому режиму необходимо установить
командой RPRM_Command_Options_Set_CurrentDocumentType пустой текстовый
идентификатор.
При выполнении команды RPRM_Command_ProcessImagesList существует
возможность того, что предоставленный для обработки набор изображений не
содержит изображения для всех необходимых схем освещения. И если в случае
выполнения команды RPRM_Command_Process они могут быть досканированы, то при
работе с фиксированным списком это невозможно.
В этом случае выполнение команды будет прервано, и _ExecuteCommand() вернет
код ошибки RPRM_Error_IncompleteImagesList.
Для продолжения работы необходимо получить информацию о типе документа,
который был определен на основании анализа текущего списка изображений,
с помощью
вызова
_CheckResult()
с
запросом
типа
результата
RPRM_ResultType_ChosenDocumentTypeCandidate.
Возвращаемая
структура
данных TOneCandidate будет содержать информацию о необходимых схемах освещения
в поле Necessary Lights. После этого нужно уточнить содержимое списка схем освещения
для сканирования, провести цикл сканирования для получения соответствующих
необработанных изображений и выполнить команду RPRM_Command_ProcessImagesList
уже с обновленным списком изображений.

37Работа со считывателями документов
4.7.5. Чтение полей заполнения документа
Для получения результатов чтения текстовых и графических полей заполнения
документа в процессе выполнения цикла сканирования и обработки данных необходимо
указать RPRM_GetImage_Modes_OCR_Visual в наборе функций цикла сканирования
(в параметре команд RPRM_Command_Process или RPRM_Command_ProcessImagesList).
Результаты передаются в пользовательское приложение в виде структур
TDocVisualExtendedInfo и TDocGraphicsInfo соответственно.
Для структуры TDocVisualExtendedInfo тип результата устанавливается
RPRM_ResultType_Visual_OCR_Extended,
для
TDocGraphicsInfo
–
RPRM_ResultType_Graphics.
Набор и характеристики считываемых полей заполнения документа определяются на
основе информации для выбранного типа документа, хранящейся в базе данных
документов. В случае, когда тип документа не определен, процедура чтения данных из
текстовых полей заполнения документа не проводится.
Если геометрический формат документа, определенный на этапе локализации
документа на изображении, соответствует формату документа ID3, но тип документа
не определен, происходит выделение зоны фотографии по координатам, определенным
в документе Doc 9303 ICAO. В этом случае результат типа RPRM_ResultType_Graphics
будет содержать одно графическое поле.
4.7.6. Чтение штрихкодов
Для получения результатов чтения штрихкодов в процессе выполнения цикла
сканирования
и
обработки
данных
необходимо
указать
RPRM_GetImage_Modes_OCR_BarCodes в наборе функций цикла сканирования (в
параметре команд RPRM_Command_Process или RPRM_Command_ProcessImagesList).
Результаты передаются в пользовательское приложение в виде структур четырех
различных типов:
• TDocBarCodeInfo
(тип
результата
–
RPRM_ResultType_BarCodes),
содержащий полный набор данных штрихкода в двоичном виде;
• TDocVisualExtendedInfo (тип результата – RPRM_ResultType_BarCodes_TextData),
содержащий логически разделенные по типам текстовые данные;
• TDocGraphicsInfo (тип результата – RPRM_ResultType_BarCodes_ImageData),
содержащий логически разделенные графические данные;
• Массив байт (тип результата – RPRM_ResultType_FingerprintTemplateISO),
содержащий шаблон отпечатка пальца в формате ISO в двоичном виде.
38
Работа со считывателями документов
Если на предыдущем этапе обработки был определен тип документа, то будут читаться
лишь штрихкоды, для которых заданы соответствующие области изображения документа
в качестве полей заполнения и информация о которых содержится в базе данных.
Если тип документа определен не был, то поиск областей штрихкодов на изображении
и считывание данных из них будут произведены автоматически.
Для дополнительной настройки формата считываемых данных модулей штрихкода (массив
mData структуры TIP_DECODE_MODULE) служит файл настройки IPDecode.ini,
находящийся в директории установки SDK. В его полях ErrorByteCode и ErrorTextCode
можно указать ASCII-коды символов, которые будут помещаться в результирующий
массив данных (для байтовых и текстовых модулей соответственно) вместо ошибочно
считанных символов.
4.7.7. Проверка подлинности документа
Для получения результатов проверки подлинности документа в процессе
выполнения цикла сканирования и обработки данных необходимо указать
RPRM_GetImage_Modes_Authenticity в наборе функций цикла сканирования
(в параметре команд RPRM_Command_Process или RPRM_Command_ProcessImagesList).
Набор необходимых проверок подлинности устанавливается
RPRM_Command_Options_Set_AuthenticityCheckMode.
командой
Результаты передаются в пользовательское приложение в виде структуры
TAuthenticityCheckList с типом результата RPRM_ResultType_Authenticity.
Проверка подлинности документа проводится на основании обработки и анализа
полученных изображений документа для различных схем освещения.
4.7.8. Сравнительный лексический анализ данных
Лексический анализ данных позволяет сопоставить результаты чтения текстовых
данных МСЗ, зоны заполнения документа, штрихкодов и данных из памяти RFID-
микросхемы (при совместной работе с «SDK для считывателей бесконтактных
идентификационных микросхем») для дополнительной оценки подлинности документа.
Команда RPRM_Command_OCRLexicalAnalyze служит для проведения лексического
анализа данных.
В качестве сравниваемых данных используются текстовые результаты чтения МСЗ, зоны
заполнения документа и штрихкодов, полученные в последнем цикле сканирования
и обработки. Данные из памяти RFID-микросхемы могут передаваться в качестве
параметра команды в виде указателя на структуру TDocVisualExtendedInfo

39Работа со считывателями документов
(см. «Считыватель бесконтактных идентификационных микросхем. Программный
пакет разработчика. Руководство программиста»).
Результаты передаются в пользовательское приложение в виде структуры
TListVerifiedFields с типом результата RPRM_ResultType_OCRLexical Analyze.
Даты приводятся к формату текущих настроек локализации системы.
40
Работа со считывателями документов
4.8. ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ И ОПЦИИ
В качестве дополнительных настроек и опций при работе с главной управляющей
библиотекой выступают параметры, описанные в пп. 4.8.1–4.8.6.
4.8.1. Управление индикаторными светодиодами
считывателя документов
Для управления индикаторными светодиодами считывателя документов служит
команда RPRM_Command_Device_LED. С ее помощью пользовательское приложение
может предложить собственный алгоритм поведения индикаторных светодиодов при
выполнении различных команд. В этом случае новые параметры поведения
индикаторов необходимо устанавливать при получении нотификационных сообщений
и при возврате из функций MCL для того, чтобы перекрыть установленные к этому
моменту значения по умолчанию.
По умолчанию световая индикация работает следующим образом (задействован
только первый индикатор – «состояние прибора»):
• в процессе подключения устройства, калибровки и сканирования индикатор
мигает оранжевым светом;
• при успешном подключении и в момент окончания сканирования индикатор
загорается зеленым светом;
• при отключении устройства индикатор загорается оранжевым светом.
4.8.2. Контроль степени зарядки аккумуляторной батареи
при работе с «Регула» 83x3, 83х4
Для контроля степени зарядки аккумуляторной
RPRM_Command_Options_Get_BatteryStatus.
батареи
служит
команда
4.8.3. Управление рабочим видеорежимом
цифровой камеры считывателя
Для переключения рабочего видеорежима цифровой камеры считывателя,
например с 3-мегапиксельного режима в 1-мегапиксельный, служит команда
RPRM_Command_Device_Set_WorkingVideoMode.
Доступность различных видеорежимов работы камеры считывателя указывается
в поле VideoModes структуры TRegulaDeviceProperties, возвращаемой по
команде RPRM_Command_Device_Features.

41Работа со считывателями документов
4.8.4. Установка необходимого размера изображений,
получаемых через функции
_CheckResult() и _CheckResultFromList()
Для установки необходимого размера изображений, получаемых через функции
CheckResult()
и
CheckPesultFromList()
служит
команда
RPRM_Command_Options_Set_CheckResultHeight.
С ее
помощью
задается
желаемая высота получаемых изображений.
Эта команда игнорируется при вызове _CheckResult() в следующих случаях:
• получение RPRM_ResultType_RawImage без параметра output установленного
в ofrFormat_XML и/или ofrFormat_FileBuffer;
• получение RPRM_ResultType_EOSImage.
4.8.5. Установка делителя частоты видеочипа
Изменение делителя частоты видеочипа может понадобиться только при работе
со считывателями с видеочипом Micron. Для остальных считывателях эта команда
игнорируется.
Для
установки
делителя
частоты
видеочипа
служит
команда
RPRM_Command_Device_SetFrequencyDivider. С
ее помощью задается
желаемый делитель от 0 до 5. Нулевое значение означает не использовать делитель
частоты работы видеочипа.
ВНИМАНИЕ! После изменения значения необходимо выполнить перекалибровку
прибора.
Повторный вызов этой команды с тем же значением делителя частоты не требует
калибровки.
Необходимость изменения этого параметра очень редка и может возникнуть только
в случае получения «битых» изображений или частого выхода из процесса
сканирования с ошибкой RPRM_Error_ScanAborted. Рекомендуется повышать этот
параметр на одно значение до тех пор, пока получение изображений не
стабилизируется.
При работе в операционной системе Windows 7 стабильная работа возможна при
делителе частоты, равном 1 и выше.
42
Работа со считывателями документов
4.8.6. Режим отладки
Для
режима
отладки
RPRM_Command_Options_BuildExtLog.
служит
параметр
команда
Протокол работы SDK с подробной информацией о производимых действиях
создается в отладочной консоли. Для просмотра отладочной консоли в состав SDK
входит программа DebugView (Dbgview.exe).
Дополнительная информация может быть добавлена в журнал путем установки
значения 1 для ключа в реестре HKEY_CURRENT_USER\SOFTWARE\Regula\Document
Reader SDK\LogToDebugView.

43Работа со считывателями документов
4.9. РАБОТА С ИСС
Для работы пользовательского приложения с ИСС необходимо, чтобы она была
предварительно установлена на используемый ПК.
При загрузке главной управляющей библиотеки происходит поиск динамической
библиотеки взаимодействия с ИСС – FDS_Dll.dll, которая должна присутствовать в
директории установки ИСС. По умолчанию поиск проводится по пути,
зарегистрированному
в
процессе
установки
ИСС
в
ключе
реестра
HKEY_LOCAL_MACHINE\SOFTWARE\Regula\FDS в строковом элементе Path.
Для подключения ИСС к пользовательскому приложению необходимо выполнить
следующие действия:
• в рабочем окне пользовательского приложения предусмотреть наличие
дополнительного дочернего окна для отображения в нем информации из системы
ИСС;
• подключить систему ИСС вызовом функции _FDSUser_Connect(), передав ей
в качестве параметра дескриптор (HWND) выделенного под ИСС дочернего окна;
• установить рабочие размеры отображаемой в дочернем окне панели управления
ИСС вызовом функции _FDSUser_UpdateWindow() и передачей ей в качестве
параметров размеров панели.
Для отображения в окне ИСС информации об отсканированном документе
необходимо вызвать функцию _FDSUser_SelectionDocument(), передав ей в
качестве параметров трехбуквенный код выдачи документа государства,
двухбуквенный код типа документа и тип освещения eFDS_Light.
Коды государства и типа документа могут быть получены, например, из результатов чтения
МСЗ или зоны заполнения документа. При вызове _FDSUser_SelectionDocument() для них
допустимо указывать нулевые значения. В этом случае будет открыто изображение,
соответствующее переданному в третьем параметре функции типу освещения для
текущего выбранного в панели ИСС документа.
Набор информационных панелей ИСС, отображаемых на
контролировать с помощью функции _FDSUser_UpdatePanel.
экране,
можно
Отключение системы ИСС от пользовательского приложения осуществляется вызовом
процедуры _FDSUser_Disconnect().
44
Программные средства SDK
5. ПРОГРАММНЫЕ СРЕДСТВА SDK
5.1. ЭКСПОРТИРУЕМЫЕ ФУНКЦИИ
Все экспортируемые функции объявлены со спецификатором extern «C».
5.1.1. _Initialize()
Тип
Символьное имя
Назначение:
Параметры:
lpParams
hParent
– typedef long (*_InitializeFunc)(void *lpParams, HWND
hParent)
– _Initialize
инициализация главной управляющей библиотеки
– зарезервирован
– дескриптор окна пользовательского приложения, которое
будет являться родительским для всех диалоговых окон,
выводимых на экран при работе с главной управляющей
библиотекой, или NULL
При вызове этой функции происходит инициализация необходимых для дальнейшей
работы системных ресурсов, производится поиск и построение списка всех
подключенных к ПК в данный момент времени считывателей документов.
Код возврата – одно из значений eRPRM_ErrorCodes.
Любое из возвращаемых значений, отличных от RPRM_Error_NoError
(RPRM_Error_AlreadyDone), свидетельствует, что дальнейшая работа невозможна из-за
возникновения критических ошибок. В этом случае необходимо вызвать функцию
деинициализации _Free(), выгрузить DLL из памяти и завершить работу приложения или,
предприняв необходимые меры по восстановлению работоспособности, повторить вызов
функции инициализации.
5.1.2. _Free()
Тип
Символьное имя
Назначение:
– typedef long (*_FreeFunc)()
– _Free
деинициализация главной управляющей библиотеки
При вызове этой функции происходит отключение активного считывателя документов
и освобождение всех ресурсов главной управляющей библиотеки. Для возобновления
работы необходимо вновь вызвать _Initialize().

45Программные средства SDK
Код возврата – одно из значений eRPRM_ErrorCodes.
5.1.3. _SetCallbackFunc()
Тип
Символьное имя
Назначение:
– typedef void (*_SetCallbackFuncFunc)(ResultReceiving
Func f1, NotifyFunc f2)
– _SetCallbackFunc
установка callback-функций для получения результатов
и информационных сообщений
В качестве параметров данная функция принимает указатели на функции
соответствующих типов, объявленных в пользовательском приложении, которые и будут
вызываться по необходимости.
Существует два типа callback-функций пользовательского приложения, вызываемых из
главной управляющей библиотеки SDK при возникновении определенных событий
(NotifyFunc) и по готовности запрошенных результатов (ResultReceivingFunc).
Вызов функции ResultReceivingFunc всегда является синхронным (т. е. выполняется в
контексте главного потока пользовательского приложения), в то время как вызов
NotifyFunc может выполняться асинхронно, что требует (по необходимости)
соответствующих модификаций пользовательского кода для обеспечения поддержки
многопоточного режима.
5.1.4. _ExecuteCommand()
Тип
Символьное имя
Назначение:
Параметры:
command
params
result
– typedef long (*_ExecuteCommandFunc)(long
void *params, void *result)
– _ExecuteCommand
запрос на выполнение команды
command,
– код команды (одна из констант eRPRM_Commands)
– входные параметры команды
– указатель на контейнер для приема результатов
Код возврата – одно из значений eRPRM_ErrorCodes.
Типы данных входного параметра и приемника результатов определяются исходя из
контекста каждой конкретной команды.
46
Программные средства SDK
5.1.5. _ResultTypeAvailable()
Тип
Символьное имя
Назначение:
Параметр
type
– typedef
uint32_t
(*_ResultTypeAvailableFunc)(long
type)
– _ResultTypeAvailable
проверка наличия данных для результата заданного типа
– тип запрашиваемого результата (одно из значений
eRPRM _ ResultType)
Возвращаемое значение – общее количество экземпляров данных для результата
указанного типа, сформированных в процессе проведения предшествующего цикла
сканирования и обработки данных.
5.1.6. _CheckResult()
Тип
Символьное имя
Назначение:
Параметры:
type
idx
output
param
– typedef HANDLE (*_CheckResultFunc)(long type,
long idx, long output, void *param)
– _CheckResult
получение структуры-контейнера с результатами обработки
данных заданного типа;
дополнительное преобразование данных к формату XML;
запись изображений и XML-данных в файл
– тип
запрашиваемого
результата
(один
из
типов
представления данных eRPRM_ResultType)
– индекс объекта в общем списке доступных результатов
запрашиваемого типа
– дополнительное представление результата (OR-комбинация
значений eRPRM_OutputFormat)
– параметры
в
контексте
значения
дополнительного
представления результата
Если возвращаемое значение > 0, то оно является дескриптором структуры,
содержащей данные запрашиваемого типа (TResultContainer *, приведенный
к типу HANDLE); если < 0, то одно из значений eRPRM_ResultStatus.
Для формирования образа графического файла изображения в параметре type
необходимо указать ofrFormat_FileBuffer. Формат кодирования изображения
будет соответствовать текущему установленному формату записи графических файлов.
Результирующий буфер будет передан в пользовательское приложение в структуре-
контейнере, содержащей данные типа RPRM_ResultType_FileImage, через вызов
callback-функции ResultReceivingFunc. При этом поле buffer структуры

47Программные средства SDK
TResultContainer будет указывать на начало буфера с двоичным образом файла, а
поле buf_length содержать длину этого буфера.
Для формирования дополнительного XML- или JSON-представления возвращаемой
структуры данных (в том числе и для RPRM_ResultType_FileImage) в параметре
type необходимо указать ofrFormat_XML или ofrFormat_JSON соответственно.
Для физической записи изображения или XML/JSON-представления результата на диск
в параметре type необходимо указать ofrTransport_File. В этом случае параметр
param должен содержать указатель на символьную строку в кодировке UTF8 с полным
именем файла.
Если в параметре type дополнительно присутствует значение ofrTransport_Clipboard,
изображение или XML/JSON-представление результата будет помещено в буфер обмена
ОС: изображение – как объект CF_DIB, текст – как объект CF_TEXT (см. документацию
по программированию в среде Windows). Эти данные будут доступны
в пользовательском приложении после возврата из _CheckResult() через функцию
Windows API GetClipboardData().
5.1.7. _CheckResultFromList()
Тип
Символьное имя
Назначение:
Параметры:
container
output
param
– typedef long (*_CheckResultFromListFunc)(HANDLE
container, long output, void* param)
– _CheckResultFromList
доступ к отдельным полям структуры результата, являющейся
списком
– дескриптор результата, полученного через функцию
_CheckResult()
– дополнительное представление результата (одно из
значений eRPRM_OutputFormat)
– параметры для дополнительного представления результата
Если возвращаемое значение ≥ 0, то оно является цифровым кодом передаваемого
поля (одно из значений eVisualFieldType или eGraphicFieldType); если < 0, то
одно из значений eRPRM_ResultStatus.
При type=ofrTransport_Clipboard содержимое текущего поля (текстового или
графического) будет помещено в буфер обмена Windows в формате CF_TEXT или
CF_DIB и будет доступно после возвращения из _CheckResultFromList() через
функцию WindowsAPI GetClipboardData().
type=ofrTransport_File используется только для приема графических
изображений из структуры-списка TDocGraphicsInfo). Изображение из текущего
48
Программные средства SDK
поля будет записано в файл. В param необходимо передать указатель на текстовую строку
(в кодировке UTF8), содержащую полное имя файла. Формат записи будет
соответствовать текущему установленному формату записи графических файлов.
type=ofrFormat_FileBuffer используется только для приема графических
изображений из структуры-списка TDocGraphicsInfo). Будет создан образ файла для
изображения из текущего поля. В этом случае param должен содержать указатель
TResultContainer * для сохранения результата. Указатель на массив данных
результирующего образа файла будет записан в поле buffer, а его длина – в поле
buf_length.
5.1.8. _AllocRawImageContainer()
Тип
Символьное имя
Назначение:
Параметры:
cont
w
h
bits_cnt
resolution
– typedef
long
(*_AllocRawImageContainerFunc)
(TRawImageContainer **cont, long w, long h, long
bits_cnt, long resolution)
– _AllocRawImageContainer
выделение
памяти
под
структуру
данных
TRawImageContainer для хранения изображения с
заданными характеристиками
– адрес указателя в пользовательском приложении
– ширина изображения в точках
– высота изображения в точках
– число бит на цвет
– разрешение изображения (число точек на метр)
Код возврата – одно из значений eRPRM_ErrorCodes.
Память, выделяемую этой функцией, необходимо освобождать через вызов функции
_FreeRawImageContainer().
5.1.9. _FreeRawImageContainer()
Тип
Символьное имя
Назначение:
Параметр
cont
– typedef
long
(*_FreeRawImageContainerFunc)
(TRawImageContainer *cont)
– _FreeRawImageContainer
освобождение области памяти, выделенной функцией
_AllocRawImageContainer()
– указатель на структуру
Код возврата – одно из значений eRPRM_ErrorCodes.

49Программные средства SDK
5.1.10.
_FDSUser_Connect()
Тип
Символьное имя
Назначение:
Параметр
hWnd
– typedef long (*_FDSUser_ConnectFunc)(HWND hWnd)
– _FDSUser_Connect
подключение ИСС к пользовательскому приложению
– дескриптор окна пользовательского приложения, в
пределах которого будут отображаться информационные
панели ИСС
Код возврата – одно из значений eRPRM_ErrorCodes.
5.1.11.
_FDSUser_Disconnect()
Тип
Символьное имя
Назначение:
– typedef long (*_FDSUser_DisconnectFunc)()
– _FDSUser_Disconnect
отключение системы ИСС от пользовательского приложения
Код возврата – одно из значений eRPRM_ErrorCodes.
5.1.12.
_FDSUser_UpdateWindow()
Тип
Символьное имя
Назначение:
Параметры:
w
h
– typedef long (*_FDSUser_UpdateWindowFunc)(long w,
long h, long show)
– _FDSUser_UpdateWindow
установка новых общих размеров информационных панелей
ИСС и их видимости
– новая ширина для информационных панелей ИСС
– новая
суммарная
высота
для
отображаемых
информационных панелей ИСС
– общая видимость информационных панелей ИСС («true»
или «false»)
show
Код возврата – одно из значений eRPRM_ErrorCodes.
5.1.13.
_FDSUser_UpdatePanel()
Тип
Символьное имя
Назначение:
Параметры:
panel
50
– typedef
long(*_FDSUser_UpdatePanelFunc)(long panel,
long position, long height)
– _FDSUser_UpdatePanel
индивидуальное управление расположением, размерами
и видимостью информационных панелей ИСС
– идентификатор панели (одно из значений eFDS_Panel)
Программные средства SDK
– расположение и видимость панели (одно из значений
eFDS_Panel_Position)
– новая высота панели
position
height
Код возврата – одно из значений eRPRM_ErrorCodes.
5.1.14.
_FDSUser_SelectDocument()
Тип
Символьное имя
Назначение:
CountryCode
DocCode
Light
– typedef
long
(*_FDSUser_SelectDocumentFunc)(char
*CountryCode, char *DocCode, long Light)
– _FDSUser_SelectDocument
отображение в окне ИСС информации о документе
– трехбуквенный код государства выдачи документа (символы
с третьего по пятый в первой строке МСЗ)
– двухбуквенный код типа документа (первые два символа
в первой строке МСЗ)
– код типа освещения/уровня защиты, который необходимо
активизировать в панели ИСС (одно из значений eFDS_Light)
Код возврата – одно из значений eRPRM_ErrorCodes.
5.1.15.
_LibraryVersion()
Тип
Символьное имя
Назначение:
– typedef uint32_t (*_LibraryVersionFunc)()
– _LibraryVersion
возвращает версию главной управляющей библиотеки SDK:
HIWORD() – старший номер версии,
LOWORD() – младший номер версии (для версии 5.2 – 5 и 2
соответственно).

51Программные средства SDK
5.2. CALLBACK-ФУНКЦИИ
Это функции пользовательского приложения, которые вызываются в процессе
функционирования главной управляющей библиотекой для сообщения о статусе
выполнения команд или об изменении состояния устройства, а также для передачи
результатов проведения цикла сканирования и обработки данных.
Типы callback-функций объявлены в PasspR.h:
typedef void (__stdcall *ResultReceivingFunc)(TResultContainer *result,
uint32_t *PostAction, uint32_t *PostActionParameter);
typedef void (__stdcall *NotifyFunc)( intptr_t code, intptr_t value );
В пользовательском приложении они должны быть объявлены как:
void__stdcall MyResultReceivingFunc(TResultContainer *result,
uint32_t *PostAction, uint32_t *PostActionParameter);
void__stdcall MyNotifyFunc(intptr_t code, intptr_t value);
и установлены следующим образом:
SetCallbackFunc(MyResultReceivingFunc, MyNotifyFunc);.
5.2.1. NotifyFunc()
Тип
Назначение:
Параметры:
code
value
– typedef void (__stdcall*NotifyFunc)( intptr_t code,
intptr_t value)
получение сообщения о статусе выполнения команд или об
изменении внутреннего состояния библиотеки или устройства
– код сообщения (eRPRM_NotificationCodes)
– значение (в контексте кода)
5.2.2. ResultReceivingFunc()
Тип
Назначение:
result
PostAction
52
– typedef
void
(__stdcall*ResultReceivingFunc)(TResultContainer
*result,
uint32_t
*PostAction,
uint32_t
*PostActionParameter)
получение результатов сканирования или обработки данных
– указатель на структуру, содержащую данные результата
сканирования или обработки данных
– одно из значений eRPRM_PostCalbackAction, заполняемое
пользовательским приложением при возврате из callback-
функции
Программные средства SDK
PostActionParameter – параметр для PostAction
5.3. СТРУКТУРЫ ДАННЫХ
5.3.1. TResultContainerList
Структура TResultContainerList используется для хранения и передачи списка
изображений для обработки командой RPRM_Command_ProcessImagesList.
struct TResultContainerList
{
uint32_t
Count;
TResultContainer *List;
};
Объявление:
Поля:
Count
List
PasspR.h
– количество элементов массива List
– массив контейнеров для данных различного типа представления
Элементами массива List являются структуры типа TResultContainer, которые
должны содержать изображения в формате RPRM_ResultType_RawImage.
5.3.2. TResultContainer
Структура TResultContainer используется для хранения и передачи в
пользовательское приложение результатов, формируемых в ходе выполнения цикла
сканирования и обработки данных.
struct TResultContainer
{
uint32_t result_type;
uint32_t light;
uint32_t buf_length;
void *buffer;
uint32_t XML_length;
BYTE *XML_buffer;
uint32_t list_idx;
uint32_t page_idx;
};
Объявление:
Поля:
result_type
light
PasspR.h
– тип результата, хранящегося в этом контейнере (один из
идентификаторов eRPRM_ResultType)
– код схемы освещения для данного результата (используется
только для изображений)

53Программные средства SDK
buf_length
buffer
XML_length
XML_buffer
list_idx
page_idx
– размер структуры данных, на которую указывает buffer
– указатель на структуру с результатами чтения данных. Конкретный
тип данных определяется значением поля result_type
– размер массива XML_buffer, байт
– текстовый массив, содержащий представление структуры
с результатами чтения данных в формате XML
– для внутреннего использования
– индекс страницы (при работе с многостраничным
документом)
Поля XML_length и XML_buffer инициализируются только при вызове функции
_CheckResult() с указанием типа запрашиваемого результата ofrFormat_XML.
5.3.3. TRawImageContainer
Структура TRawImageContainer используется для хранения и передачи в
пользовательское приложение графических изображений в формате Windows DIB без
компрессии. Соответствующий тип результата – RPRM_ResultType_RawImage или
RPRM_ResultType_RawUncroppedImage.
struct TRawImageContainer
{
BITMAPINFO *bmi;
BYTE
*bits;
};
Объявление:
Поля:
bmi
bits
PasspR.h
– заголовок Windows DIB с палитрой 256 цветов (если формат
изображения предусматривает присутствие палитры)
– массив точек изображения (с выравниванием на границу
uint32_t)
Объем памяти, выделенной под bmi:
sizeof(BITMAPINFOHEADER) + sizeof(RGBQUAD)*256.
Объем памяти, выделенной под bits:
bmi.bmiHeader.biSizeImage.
5.3.4. TDocVisualExtendedInfo
Структура TDocVisualExtendedInfo служит для хранения текстовых результатов
чтения
МСЗ,
полей
заполнения
документа
и
штрихкодов.
Типы
результата:RPRM_ResultType_MRZ_OCR_Extended,
54
Программные средства SDK
RPRM_ResultType_Visual_OCR_Extended
и RPRM_ResultType_BarCodes_TextData соответственно.
struct TDocVisualExtendedInfo
{
int
nFields;
TDocVisualExtendedField *pArrayFields;
};
Объявление:
Поля:
nFields
pArrayFields
PasspR.h
– количество элементов массива pArrayFields
– массив структур, содержащих логически разделенные
текстовые данные
5.3.5. TDocVisualExtendedField
Структура TDocVisualExtendedField является базовой структурой-контейнером
для списка TDocVisualExtendedInfo и хранит информацию об одном текстовом
поле данных.
struct TDocVisualExtendedField
{
union
{
int FieldType;
struct
{
WORD wFieldType;
WORD wLCID;
};
};
union
{
RECT FieldRect;
struct
{
long RFID_OriginDG;
long RFID_OriginDGTag;
long RFID_OriginTagEntry;
long RFID_OriginEntryView;
};
};
char
FieldName[256];
int
StringsCount;
TStringResultSDK *StringsResult;
intBuf_Length;
char
*Buf _Text;
char
*FieldMask;
int
Validity;
int
InComparison;
uint32_t
Reserved2;
uint32_t
Reserved3;
};
Объявление:
Поля:
PasspR.h

55Программные средства SDK
– логический тип текстового поля (одно из значений
eVisualFieldType)
wFieldType
– логический тип текстового поля (одно из значений
eVisualFieldType)
wLCID
– идентификатор языка, служит для различия полей одного
типа
FieldRect
– координаты области текстового поля на изображении
документа (для результатов чтения полей заполнения
документа RPRM_ResultType_Visual_OCR_Extended)
RFID_OriginDG
– информационная группа данных – источник текстового поля
(eRFID_eRFDataGroupTypeTag)
RFID_OriginDGTag – не используется (всегда содержит 0)
RFID_OriginTagEntry – индекс
записи-источника
текстового
поля
в
информационной группе данных
RFID_OriginEntryView – не используется (всегда содержит 0)
FieldName
– символьное имя текстового поля
StringsCount
– количество элементов массива StringsResult
StringsResult
– массив результатов распознавания отдельных строк
многострочного текстового поля
Buf_Length
– длина текстовой строки в Buf_Text
Buf_Text
– строка с текстовыми данными поля в формате UTF8.
Результаты чтения разных строк многострочного поля
разделяются символом «^»
FieldMask
– строка маски формата текстовых данных поля (для
внутреннего использования)
Validity
– для внутреннего использования SDK
InComparison
– для внутреннего использования SDK
Reserved2
– не используется
Reserved3
– не используется
FieldType
5.3.6. TStringResultSDK
Структура TStringResultSDK описывает результат распознавания отдельной строки
многострочного текстового поля документа.
struct TStringResultSDK
{
uint32_t
SymbolsCount;
uint32_t
Reserved;
TSymbolResult *StringResult;
};
Объявление:
Поля:
SymbolsCount
Reserved
StringResult
56
PasspR.h
– количество элементов массива StringResult
– для внутреннего использования
– массив результатов распознавания отдельных символов строки
Программные средства SDK
5.3.7. TSymbolResult
Структура TSymbolResult описывает результат распознавания отдельного символа в
строке поля документа.
struct TSymbolResult
{
RECT
SymbolRect;
uint32_t
CandidatesCount;
TSymbolCandidate ListOfCandidates[4];
uint32_t
Reserved;
};
Объявление:
Поля:
SymbolRect
CandidatesCount
ListOfCandidates
Reserved
PasspR.h
– границы области, занимаемой символом на изображении
– количество значимых элементов массива ListOfCandidates
– массив символов-кандидатов. Отсортирован по убыванию
вероятности распознавания (первый элемент имеет
наивысшую вероятность)
– не используется
5.3.8. TSymbolCandidate
Структура TSymbolCandidate описывает результат распознавания отдельного
символа в строке поля документа.
struct TSymbolCandidate
{
uint32_t SymbolCode;
uint32_t SymbolProbability;
uint32_t Reserved;
};
Объявление:
PasspR.h
Поля:
SymbolCode
– ASCII-код символа
SymbolProbability – вероятность распознавания символа (0–100, %)
Reserved
– не используется
5.3.9. TDocGraphicsInfo
Структура TDocGraphicsInfo служит для хранения графических результатов
чтения полей заполнения документа и штрихкодов. Типы результата :
RPRM_ResultType_Graphics и RPRM_ResultType_BarCodes_ImageData соответственно.
struct TDocGraphicsInfo

57Программные средства SDK
{
};
int
nFields;
TDocGraphicField *pArrayFields;
Объявление:
Поля:
nFields
pArrayFields
PasspR.h
– количество элементов массива pArrayFields
– массив изображений
5.3.10. TDocGraphicField
Структура TDocGraphicField является базовой структурой-контейнером для списка
TDocGraphicsInfo и содержит информацию об одном графическом поле.
struct TDocGraphicField
{
int FieldType;
union
{
RECT FieldRect;
struct
{
long RFID_OriginDG;
long RFID_OriginDGTag;
long RFID_OriginTagEntry;
long RFID_OriginEntryView;
};
};
char
FieldName[256];
TRawImageContainer image;
};
Объявление:
Поля:
FieldType
PasspR.h
– логический тип графического поля (одно из значений
eGraphicFieldType)
FieldRect
– координаты области поля на общем изображении
(для результатов чтения полей заполнения документа
RPRM_ResultType _Graphics)
RFID_OriginDG
– информационная группа данных, которая является
источником
изображения
(одно
из
значений
eRFID_eRFDataGroupTypeTag)
OriginDGTag
– индекс записи-источника изображения с биометрической
информацией в информационной группе данных
RFID_OriginTagEntry – индекс образца в записи с биометрическими данными
RFID_OriginEntryView – индекс варианта образца биометрических данных
FieldName
– символьное имя графического поля
image
– изображение
5.3.11. TDocMRZTestQuality
Структура TDocMRZTestQuality служит для хранения информации о результатах
проведения контроля качества заполнения МСЗ документа. Тип результата –
RPRM_ResultType_MRZ_TestQuality.
58
Программные средства SDK
struct TDocMRZTestQuality
{
long
DOC_FORMAT;
long
MRZ_FORMAT;
long
TEXTUAL_FILLING;
long
CHECK _SUMS;
long
CONTRAST_PRINT;
long
STAIN _MRZ;
long
PRINT _POSITION;
long
SYMBOLS_PARAM;
long
StrCount;
TStrEstimation Strings[3];
};
Объявление:
Поля:
DOC_FORMAT
MRZ_FORMAT
TEXTUAL_FILLING
CHECK_SUMS
CONTRAST_PRINT
STAIN_MRZ
PRINT_POSITION
SYMBOLS_PARAM
StrCount
Strings
PasspR.h
– геометрический формат документа по ISO/IEC 7810 (одно из
значений CDocFormat)
– формат МСЗ по Doc 9303 ICAO (одно из значений CDocFormat)
– оценка правильности текстового заполнения МСЗ
– оценка правильности всех контрольных сумм МСЗ
– оценка контраста печати МСЗ
– оценка наличия пятен в МСЗ
– оценка компоновки печати: расположение строк, расстояние
между строками, выравнивание символов в строке
– оценка параметров символов: изменение контраста в
символе, неровность края штриха, наличие пустот в символе,
знаковый интервал в строке, выравнивание смежных
символов, размер символов
– количество строк в МСЗ
– массив результатов проверок для каждой строки
Значения оценок для этой и всех подчиненных структур данных (TStrEstimation
и TSymbolEstimation) устанавливаются в соответствии с eCheckResult.
5.3.12. TStrEstimation
Структура TStrEstimation служит для хранения информации о результатах
проверок для отдельной строки МСЗ.
struct TStrEstimation
{
long
SymbolsCount;
float
StringAngle;
RECT
StringBorders;
long
STRING _POSITION;
TSingleRect
ErrorPOSITION;
long
STRINGS _DISTANCE;
float
SizeError_DISTANCE;
long
STRINGS _INTERVAL;
float
SizeError_INTERVAL;
long
ALIGNMENT_SYMBOLS_IN_STRING;
float
SizeError_ALIGNMENT;
long
SYMBOLS _PARAM;
long
STRING _FILLING;

59Программные средства SDK
};
long
CHECK_SUMS;
long
FieldCount;
TTestTextField
Fields[12];
TSymbolEstimation SymbolsEstimations[44];
Объявление:
Поля:
SymbolsCount
StringAngle
PasspR.h
– количество обработанных символов в строке
– угол наклона строки в радианах («+» – по часовой стрелке,
«–» – против часовой стрелки)
StringBorders
– границы строки
STRING_POSITION
– оценка позиции строки относительно краев документа
ErrorPOSITION
– величина отклонения положения строки от допуска, мм
STRINGS_DISTANCE
– оценка расстояния между строками
SizeError_DISTANCE
– величина выхода за допуск расстояния между строками,
мм
STRINGS_INTERVAL
– оценка интервала между строками
SizeError_INTERVAL
– величина выхода за допуск интервала между
строками, мм
ALIGNMENT_SYMBOLS_IN_STRING – оценка выравнивания символов в строке
SizeError_ALIGNMENT
– величина выхода за допуск выравнивания символов
в строке, мм
SYMBOLS_PARAM
– оценка параметров символов в строке
STRING_FILLING
– оценка правильности текстового заполнения полей строки
CHECK_SUMS
– оценка правильности всех контрольных сумм полей
строки
FieldCount
– количество проверенных текстовых полей в строке
Fields[12]
– массив результатов проверок текстовых полей строки
SymbolsEstimations
– подробная информация об оценке параметров
символов в строке
5.3.13. TSingleRect
Структура TSingleRect служит для хранения информации о величине ошибки
позиционирования строки МСЗ. Все значения – в мм.
struct TSingleRect
{
float Left, Top, Right, Bottom;
};
Объявление:
Поля:
Left
Top
Right
60
PasspR.h
– величина отклонения положения строки МСЗ от допуска влево
– величина отклонения положения строки МСЗ от допуска вправо
– величина отклонения положения строки МСЗ от допуска вверх
Программные средства SDK
Bottom
– величина отклонения положения строки МСЗ от допуска вниз
5.3.14. TTestTextField
Структура TTestTextField служит для хранения информации о результатах
проверок правильности заполнения отдельных текстовых полей МСЗ.
struct TTestTextField
{
uint32_t TEST_RESULT;
uint32_t FieldType;
WORD FieldPos;
WORD FieldLength;
WORD ValidCheckSum;
WORD reserved;
};
Объявление:
Поля:
TEST_RESULT
FieldType
FieldPos
FieldLength
ValidCheckSum
PasspR.h
– результат
проверки
поля (комбинация значений
eTestTextField)
– логический тип поля (одно из значений eVisualField Type)
– индекс (начиная с 0) первого символа поля в строке МСЗ
– количество символов в поле
– рассчитанное по содержимому проверяемого поля значение
контрольной суммы
5.3.15. TSymbolEstimation
Структура TSymbolEstimation служит для хранения информации о результатах
оценки параметров печати одного символа МСЗ.
struct TSymbolEstimation
{
char CharSymbol;
RECT SymbolBounds;
uint32_t SYMBOL_PARAM;
uint32_t EMPTINESS;
uint32_t EDGE;
uint32_t STAIN;
uint32_t CONTRAST_PRINT;
uint32_t CONTRAST_SYMBOL;
uint32_t ALIGNMENT_NEAREST_SYMBOLS
float SizeErrorAlignWithPrev;
float SizeErrorAlignWithNext;
uint32_t SYMBOLS_INTERVAL;
float SizeErrorIntervWithPrev;
float SizeErrorIntervWithNext;
uint32_t SYMBOL_SIZE;
float SizeErrorSymbolHeight;
float SizeErrorSymbolWidth;
};

61Программные средства SDK
Объявление:
PasspR.h
Поля:
CharSymbol
– результат распознавания символа
SymbolBounds
– границы символа на изображении
SYMBOL_PARAM
– обобщенная оценка параметров печати символа
EMPTINESS
– оценка пустот в символе
EDGE
– оценка неровности края штриха символа
STAIN
– оценка наличия пятен в знакоместе символа
CONTRAST_PRINT
– оценка контраста печати символа
CONTRAST_SYMBOL
– оценка изменения контраста печати в символе
ALIGNMENT_NEAREST_SYMBOLS – оценка выравнивания по вертикали смежных символов
SizeErrorAlignWithPrev – величина ошибки выравнивания (выход за допуск, мм)
по отношению к предыдущему символу
SizeErrorAlignWithNext – величина ошибки выравнивания (выход за допуск, мм)
по отношению к следующему символу
SYMBOLS_INTERVAL
– оценка знакового интервала в строке
SizeErrorIntervWithPrev – величина выхода значения интервала за допуск по
отношению к предыдущему символу, мм
SizeErrorIntervWithNext – величина выхода значения интервала за допуск по
отношению к следующему символу, мм
SYMBOL_SIZE
– оценка размеров символа
SizeErrorSymbolHeight – величина выхода за допуск высоты символа, мм
SizeErrorSymbolWidth – величина выхода за допуск ширины символа, мм
5.3.16. TCommandsMRZTestQuality
Структура TCommandsMRZTestQuality служит для хранения параметров контроля
качества заполнения МСЗ.
struct TDocMRZTestQuality
{
uint32_t TEST_CLASS_QUALITY;
uint32_t EXEC_SYMBOLS_PARAM;
uint32_t EXEC_PRINT_POSITION;
uint32_t EXEC_TEXTUAL_FILLING;
uint32_t EXEC_CHECK_SUMS;
uint32_t RESERVED1;
uint32_t RESERVED2;
};
Объявление:
Поля:
TEST_CLASS_QUALITY
62
PasspR.h
– класс проверки качества (одно из значений eMRZClass
Quality)
Программные средства SDK
EXEC_SYMBOLS_PARAM
EXEC_PRINT_POSITION
EXEC_TEXTUAL_FILLING
EXEC_CHECK_SUMS
– TRUE или FALSE. Объединяет следующие проверки:
контраст печати, изменение контраста в символе,
неровность края штриха символа, наличие пустот внутри
символов, наличие пятен, расположение символов в
строке, размеры символов
– TRUE или FALSE. Проверка компоновки печати
(расположение строк)
– TRUE или FALSE. Проверка правильности текстового
заполнения МСЗ (выполнение данной проверки
установлено по умолчанию)
– TRUE или FALSE. Проверка контрольных сумм МСЗ
(выполнение
данной
проверки
установлено
по
умолчанию)
5.3.17. TCandidatesListContainer
Структура TCandidatesListContainer служит для хранения и передачи
в пользовательское приложение информации о документах-кандидатах при
проведении
процедуры
распознавания
типа.
Тип
результата
–
RPRM_ResultType_Document TypesCandidates.
struct TCandidatesListContainer
{
uint32_t
RecResult;
uint32_t
Count;
TOneCandidate *Candidates;
};
Объявление:
Поля:
RecResult
Count
Candidates
PasspR.h
– результат определения типа документа (одно из значений
eRPRM_RCTP_Result_RecType)
– количество элементов в массиве Candidates
– массив кандидатов распознавания
5.3.18. TOneCandidate
Структура TOneCandidate является базовой структурой-контейнером для списка
TCandidatesListContainer и содержит информацию об одном документе-
кандидате при определении типа документа.
struct TOneCandidate
{
char
*DocumentName;
int
ID;
double
P;
WORD
Rotated180;
WORD
RotationAngle;
uint32_t
NecessaryLights;
TRawImageContainer *preview;
uint32_t
RFID_Presence;
uint32_t
CheckAuthenticity;
uint32_t
UVExp;
WORD
OVIExp;

63Программные средства SDK
};
uint32_tAuthenticityNecessaryLights;
TFDSIDList
*extendedInfo;
Объявление:
Поля:
DocumentName
ID
P
PasspR.h
– наименование типа документа
– числовой код типа документа
– мера вероятности правильного распознавания при
анализе данного типа документа
Rotated180
– «true», если определено, что документ данного типа
повернут на 180 градусов
NecessaryLights
– комбинация
идентификаторов
схем
освещения
(eRPRM_Lights), необходимых для проведения OCR для
данного типа документа
preview
– уменьшенное изображение образца документа
RFID_Presence
– признак наличия в документе RFID-микросхемы (одно из
значений eRFID_Presence)
CheckAuthenticity
– предусмотренный для данного типа документа набор
опций контроля подлинности (комбинация значений
eRPRM_Authenticity)
UVExp
– необходимое значение экспозиции видеокамеры при
получении изображений документа данного типа для
схемы УФ-освещения
OVIExp
– необходимое значение экспозиции видеокамеры при
получении изображений документа данного типа для
схемы аксиального освещения
AuthenticityNecessaryLights – комбинация
идентификаторов
схем
освещения
(eRPRM_Lights), необходимых для проведения контроля
подлинности данного типа документа
extendedInfo
– указатель на структуру TFDSIDList, содержащую
дополнительную информацию о документе и его связи с
ИСС
5.3.19. TFDSIDList
Структура TFDSIDList служит для хранения дополнительной информации о
документе и его связи с документами в ИСС.
struct TFDSIDList
{
char
ICAOCode[4];
uint32_t
Count;
uint32_t
*List;
uint32_t
dType;
uint32_t
dFormat;
bool
dMRZ;
64
Программные средства SDK
};
char
char
char
char
char
bool
*dDescription;
*dYear;
*dCountryName;
*dStateCode;
*dStateName;
isDeprecated;
Объявление:
Поля:
ICAOCode
Count
List
dType
PasspR.h
– код ICAO страны, выдавшей документ
– количество элементов в массиве List
– массив идентификаторов документов в ИСС
– тип документа, одно из значений перечисления
diDocType
– формат документа, одно из значений перечисления
CDocFormat
– флаг, обозначающий наличие МСЗ на документе
– текст описания документа
– год издания документа
– название страны, выдавшей документ
– код штата страны, выдавшей документ
– название штата страны, выдавшей документ
- документ устарел
dFormat
dMRZ
dDescription
dYear
dCountryName
dStateCode
dStateName
isDeprecated
5.3.20. TListDocsInfo
Структура TListDocsInfo служит для хранения и передачи в пользовательское
приложение полного списка документов, хранящихся в текущей базе данных
документов. Тип результата – RPRM_ResultType_DocumentsInfoList.
struct TListDocsInfo
{
uint32_t
Count;
TOCRDocInfo *ArrayOfDocs;
};
Объявление:
Поля:
Count
ArrayOfDocs
PasspR.h
– количество элементов в массиве ArrayOfDocs
– массив описаний документов
5.3.21. TOCRDocInfo
Структура TOCRDocInfo является базовой структурой-контейнером для списка
TListDocsInfo и содержит информацию об одном документе.
struct TOCRDocInfo
{
char DocName[256];
uint32_t DocID;

65Программные средства SDK
};
char DocTxtID[256];
uint32_t DocFormat;
uint32_t NecessaryLights;
uint32_t nFields;
uint32_t RFID_Presence;
uint32_t reserved1;
uint32_t reserved2;
uint32_t reserved3;
Объявление:
Поля:
DocName
DocID
DocTxtID
NecessaryLight
nFields
RFID_Presence
Reserved1
Reserved2
Reserved3
PasspR.h
– наименование документа
– числовой код типа документа
– символьный код типа документа
– комбинация идентификаторов схем освещения (eRPRM_Lights),
необходимых для проведения OCR для данного типа документа
– общее количество текстовых и графических полей,
присутствующих в описании документа
– признак наличия в документе RFID-микросхемы (одно из
значений eRFID_Presence)
– не используется
– не используется
– не используется
5.3.22. TDocBarCodeInfo
Структура TDocBarCodeInfo служит для хранения и передачи в пользовательское
приложение результатов поиска на сканируемой странице документа областей
штрихкодов и их чтения в двоичном неформатированном виде. Тип результата –
RPRM_ResultType_BarCodes.
struct TDocBarCodeInfo
{
int
nFields;
TDocBarCodeField *pArrayFields;
};
Объявление:
Поля:
nFields
pArrayFields
PasspR.h
– количество элементов в массиве pArrayFields
– массив результатов чтения отдельных штрихкодов
5.3.23. TDocBarCodeField
Структура TDocBarCodeField является базовой структурой-контейнером для списка
TDocBarCodeInfo и содержит данные чтения штрихкода.
66
Программные средства SDK
struct TDocBarCodeField
{
long
bcCodeResult;
long
bcType_DETECT;
RECT
bcROI_DETECT;
float
bcAngle_DETECT;
long
bcType_DECODE;
long
bcCountModule;
TIP_DECODE_MODULE *bcDataModule;
TIP_PDF417_INFO
bcPDF417INFO;
long
bcReserved1;
long
bcReserved2;
long
bcReserved3;
};
Объявление:
Поля:
bcCodeResult
bcType_DETECT
bcROI_DETECT
bcAngle_DETECT
bcType_DECODE
bcCountModule
bcDataModule
bcPDF417INFO
Reserved1
Reserved2
Reserved3
PasspR.h
– результат
чтения
штрихкода
(одно
из
значений
eBarCodeResultCodes либо другое значение, являющееся
внутренним кодом ошибки SDK)
– тип найденного штрихкода (1 – линейный, 2 – двухмерный:
PDF417)
– координаты области штрихкода на изображении
– угол разворота штрихкода, радианы
– тип декодированного штрихкода (одно из значений
eBarCodeType)
– число прочитанных модулей штрихкода (количество
элементов массива bcDataModule)
– результаты чтения данных из модулей штрихкода
– информация о параметрах кода PDF417 (только для PDF417)
– не используется
– не используется
– не используется
5.3.24. TIP_DECODE_MODULE
Структура TIP_DECODE_MODULE используется для хранения результатов чтения одного
модуля штрихкода.
struct TIP_DECODE_MODULE
{
long mType;
long mLength;
BYTE *mData;
long mReserved1;
long mReserved2;
};

67Программные средства SDK
Объявление:
Поля:
mType
mLength
mData
mReserved1
mReserved2
PasspR.h
– тип модуля (одно из значений eBarCodeModuleType)
– длина массива данных модуля (количество значимых
элементов массива mData)
– прочитанные данные модуля
– не используется
– не используется
5.3.25. TIP_PDF417_INFO
Структура TIP_PDF417_INFO используется для хранения дополнительной информации
о параметрах штрихкода формата PDF417.
struct TIP_PDF417_INFO
{
long bcColumn;
long bcRow;
long bcErrorLevel;
float minX;
float minY;
float Angle;
};
Объявление:
Поля:
bcColumn
bcRow
bcErrorLevel
minX
minY
Angle
PasspR.h
– число столбцов в штрихкоде
– число строк в штрихкоде
– уровень коррекции ошибок штрихкода
– ширина минимального элемента штрихкода на изображении,
точки
– высота минимального элемента штрихкода на изображении,
точки
– угол поворота кода при декодировании, радианы
5.3.26. TListVerifiedFields
Структура TListVerifiedFields служит для хранения и передачи в
пользовательское приложение результатов сравнения текстовых данных МСЗ, зоны
заполнения документа, штрихкодов и данных из памяти RFID-микросхемы (при
совместной работе с «SDK для считывателей бесконтактных идентификационных
микросхем»). Тип результата – RPRM_ResultType_OCRLexicalAnalyze.
struct TListVerifiedFields
{
uint32_t
Count;
TVerifiedFieldMap *pFieldMaps;
};
Объявление:
Поля:
68
PasspR.h
Программные средства SDK
Count
pFieldMaps
– количество элементов в массиве pFieldMaps
– массив результатов анализа данных текстовых
заполнения документа
полей
5.3.27. TVerifiedFieldMap
Структура TVerifiedFieldMap является базовой структурой-контейнером для списка
TListVerifiedFields и содержит информацию о результатах сравнения данных,
полученных из разных источников, для одного и того же логического типа поля.
struct TVerifiedFieldMap
{
WORD FieldType;
WORD LCID;
char *Field_MRZ;
char *Field_RFID;
char *Field_Visual;
char *Field_Barcode;
BYTE Matrix[10];
};
Объявление:
PasspR.h
Поля:
FieldType
– логический тип текстового поля (одно из значений
eVisualFieldType)
LCID
– идентификатор языка, служит для различия полей одного
типа
Field_MRZ
– данные поля, полученные операцией чтения МСЗ
Field_RFID
– данные поля, полученные операцией чтения памяти RFID-
микросхемы
Field_Visual
– данные поля, полученные операцией чтения текстовых полей
заполнения документа
Field_Barcode
– данные поля, полученные операцией чтения штрихкодов
Matrix
– матрица сравнения результатов
Результаты чтения разных строк многострочного поля разделяются символом «^».
Элементы матрицы Matrix принимают одно из значений
eRPRM_FieldVerificationResult. Элементы матрицы с индексами 0, 1, 2, 3
принимают одно из значений RCF_Disabled, RCF_Verified или
RCF_Not_Verified, элементы с индексами 4, 5, 6, 7, 8 – одно из значений
RCF_Disabled, RCF_Compare_True или RCF_Compare_False.
Элементы матрицы Matrix имеют следующее смысловое значение:
• элемент с индексом 0 – результат верификации данных из МСЗ;
• » 1 – результат верификации данных из RFID-микросхемы;
• » 2 – результат верификации данных из текстовых зон заполнения документа;
• » 3 – результат верификации данных из штрихкодов;
• » 4 – результат сравнения данных МСЗ и RFID-микросхемы;
• » 5 – результат сравнения данных МСЗ и текстовых зон заполнения документа;
• » 6 – результат сравнения данных МСЗ и штрихкодов;
• » 7 – результат сравнения данных текстовых зон заполнения документа и RFID-
микросхемы;

69Программные средства SDK
• » 8 – результат сравнения данных текстовых зон заполнения документа и штрихкодов;
• » 9 – результат сравнения данных RFID-микросхемы и штрихкодов.
Примечание. Даты, содержащиеся в структуре TVerifiedFieldMap, могут являться
автоматически преобразованными к единому формату представления
дат, заданному в системе. Например, дата рождения, представленная в
МСЗ строкой «681013» (c маской YYMMDD, где YY – год, MM – месяц, DD –
день), а в поле заполнения документа строкой «13 OCT 1968», будет
преобразована к формату DD.MM.YY («13.10.68») и уже именно в этом
формате помещена в TVerifiedFieldMap.
Представление элементов Matrix в формате XML начинается с 1.
5.3.28. TAuthenticityCheckList
Структура TAuthenticityCheckList служит для хранения и передачи в
пользовательское приложение результатов проверки подлинности документа по
изображениям
для
различных
схем
освещения.
Тип
результата
–
RPRM_ResultType_Authenticity.
struct TAuthenticityCheckList
{
int
Count;
TAuthenticityCheckResult **List;
};
Объявление:
Поля:
Count
List
PasspR.h
– количество элементов массива List
– массив указателей на структуры, содержащие результаты
проведения проверок элементов подлинности различных
типов
5.3.29. TAuthenticityCheckResult
Структура TAuthenticityCheckResult служит для хранения результатов проверки
элементов подлинности документа одного типа.
struct TAuthenticityCheckResult
{
int Type;
int Result;
int Count;
void **List;
};
Объявление:
Поля:
Type
Result
Count
70
PasspR.h
– тип проверки (eRPRM_Authenticity)
– общий результат проверки (eCheckResult)
– число значимых элементов в List
Программные средства SDK
List
– массив указателей на структуры данных с результатами
проверки данного типа
5.3.30. TFibersType
Структура TFibersType служит для хранения результатов проверки изображения для
схемы УФ-освещения для одного типа люминесцирующих волокон (для проверки
RPRM_Authenticity_UV_Fibers).
struct TFibersType
{
union
{
WORD ErrorCode;
struct
{
WORD ElementResult;
WORD ElementDiagnose;
};
};
uint32_t RectCount;
RECT *RectArray;
uint32_t *Width;
uint32_t *Length;
uint32_t *Area;
BYTE ColorValues[3];
uint32_t ExpectedCount;
};
Объявление:
Поля:
ErrorCode
ElementResult
ElementDiagnose
RectCount
RectArray
Width
Length
Area
ColorValues
ExpectedCount
PasspR.h
– результат проверки (eCheckResult)
– элемент, отвечающий за результат проверок (eCheckResult)
– элемент, при помощи которого проверяются ошибки
ElementResult (eCheckDiagnose)
– число элементов RectArray, Width, Length, Area
– координаты найденных на изображении областей с
волокнами данного типа
– ширина волокон из областей RectArray, точки
– длины волокон из областей RectArray, точки
– площади волокон из областей RectArray, точки
– цвет волокон данного типа (R, G, B)
– ожидаемое число волокон
5.3.31. TSecurityFeatureCheck
Структура TSecurityFeatureCheck служит для хранения результата проверки
одного элемента изображения для одного из типов проверок:
• RPRM_Authenticity_IR_B900 – контраст МСЗ по изображению для схемы ИК-
освещения;
• RPRM_Authenticity_UV_Luminescence – контроль люминесценции материала
документа для схемы УФ-освещения;

71Программные средства SDK
• RPRM_Authenticity_Axial_Protection – поиск областей с нарушением
целостности ламинирующей пленки для схемы белого коаксиального освещения;
• RPRM_Authenticity_Mrz – проверка подлинности МСЗ;
• RPRM_Authenticity_Photo_Embed_Type
–
проверка типа внедрения
фотографии в документ (вклеена или напечатана);
• RPRM_Authenticity_Holograms – проверка на наличие статического
голографического изображения;
• RPRM_Authenticity_Photo_Area – специфическая проверка для российских
внутренних паспортов, контролирующая выравнивание фотографии и
обрамляющего её орнамента;
• RPRM_Authenticity_BarcodeFormatCheck – контроль количества и типов
штрихкодов для исследуемого документа, а также проверка декодированного
контента на допустимость значений;
• RPRM_Authenticity_Ocr – контроль качества печати личных данных по их
месторасположению;
• RPRM_Authenticity_StatusOnly – проверка на статус.
struct TSecurityFeatureCheck
{
union
{
int Result;
struct
{
WORD ElementResult;
WORD ElementDiagnose;
};
};
int
ElementType;
RECT
ElementRect;
uint32_t
Visibility;
uint32_t
CriticalFlag;
TAreaArray *AreaList;
uint32_t
Reserved2;
};
Объявление:
Поля:
Result
ElementResult
ElementDiagnose
ElementType
ElementRect
Visibility
CriticalFlag
72
PasspR.h
– результат проверки (eCheckResult)
– элемент, отвечающий за результат проверок (eCheckResult)
– элемент, при помощи которого проверяются ошибки
ElementResult (eCheckDiagnose)
– тип элемента (eRPRM_SecurityFeatureType)
– область элемента
– флаг видимости элемента (eIR_ Visibility_Flag)
– флаг критичности проверки (eSecurityCriticalFlag)
Программные средства SDK
5.3.32. TIdentResult
Структура TIdentResult служит для хранения результата проверки одного
элемента изображения для одного из типов проверок:
• RPRM_Authenticity_Image_Pattern - для схемы УФ-освещения (контроль
наличия люминесцирующего объекта);
• RPRM_Authenticity_IR_Visibility – контроль
видимости/невидимости
элементов бланка для схемы ИК-освещения;
• RPRM_Authenticity_OVI – проверка подлинности элементов Optically
Variable Ink;
• RPRM_Authenticity_Portrait_Comparison – сравнение портретов из
различных источников;
• RPRM_Authenticity_Kinegram
– проверка подлинности элементов
Kinegram;
• RPRM_Authenticity_Letter_Screen – проверка подлинности элементов
LetterScreen;
• RPRM_Authenticity_Holograms_Detection
–
проверка голограмм,
основанная на серии кадров;
• RPRM_Authenticity_Fingerprint_Comparison – сравнение отпечатков
пальцев;
• RPRM_Authenticity_Liveness – проверка живости документа.
struct TIdentResult
{
union{
uint32_t Result;
struct
{
WORD ElementResult;
WORD ElementDiagnose;
};
};
uint32_t LightIndex;
RECT Area;
TRawImageContainer Image;
TRawImageContainer EtalonImage;
uint32_t PercentValue;
TAreaArray *AreaList;
union{
uint32_t ElementType;
struct
{
uint16_t elemType;
uint16_t elemID;
};
};
};
Объявление:
Поля:
Result
PasspR.h
– результат проверки (eCheckResult)

73Программные средства SDK
ElementResult
ElementDiagnose
LightIndex
Area
Image
EtalonImage
PercentValue
ElementType
elemType
elemID
– элемент, отвечающий за результат проверок (eCheckResult)
– элемент, при помощи которого проверяются ошибки
ElementResult (eCheckDiagnose)
– идентификатор схемы освещения (eRPRM_Lights)
– область фрагмента на общем изображении документа
– найденный на общем изображении документа фрагмент
– ожидаемый фрагмент изображения
– процент
совпадения
эталона
и
образца
для
RPRM_Authenticity_Image_Pattern
или
флаг
видимости
элемента
(eIR_Visibility_Flag)
для
RPRM_Authenticity_IR_Visibility
– тип элемента (eRPRM_SecurityFeatureType)
– тип элемента (eRPRM_SecurityFeatureType)
– номер паттерна среди всех доступных паттернов для этого
elemType
5.3.33. TOCRSecurityTextResult
Структура TOCRSecurityTextResult служит для хранения результата OCR скрытого
текста и его сравнения с заданным источником аналогичной текстовой
информации для одного элемента изображения, например , проверка номера
документа, напечатанного люминесцирующей в УФ-лучах. Применяется в
следующих проверках подлинности:
•RPRM_Authenticity_OCRSecurityText – распознавание скрытого текста
для схемы видимого и/или УФ-освещения и его сравнения с заданным
источником аналогичной текстовой информации;
•RPRM_Authenticity_EncryptedIPI – визуализация и распознавание
зашифрованной IPI и её сравнение с тектовыми данными VIZ или MRZ.
struct TOCRSecurityTextResult
{
union
{
uint32_t ResultCode;
struct
{
WORD ElementResult;
WORD ElementDiagnose;
};
};
uint32_t CriticalFlag;
uint32_t LightType;
RECT
FieldRect;
uint32_t EtalonResultType;
uint32_t EtalonFieldType;
uint32_t EtalonLightType;
74
Программные средства SDK
RECT
EtalonFieldRect;
char
SecurityTextResultOCR[256];
char
EtalonResultOCR[256];
uint32_t Reserved1;
uint32_t Reserved2;
};
Объявление:
Поля:
ResultCode
ElementResult
ElementDiagnose
PasspR.h
– код результата проверки (eCheckResult)
– элемент, отвечающий за результат проверок (eCheckResult)
– элемент, при помощи которого проверяются ошибки
ElementResult (eCheckDiagnose)
CriticalFlag
– флаг критичности проверки (1 – текст присутствует всегда; 0 –
текст может отсутствовать)
LightType
– тип освещения, при котором получено изображение
(eRPRM_ Light)
FieldRect
– координаты области элемента изображения
EtalonResultType
– тип результата для сравнения (допустимы значения из
eRPRM_ResultType:
RPRM_ResultType_MRZ_OCR_Extended,
RPRM_ResultType_Visual_OCR_Extended,
RPRM_ResultType_BarCodes_TextData)
EtalonFieldType
– тип поля для сравнения (textFieldTypes)
EtalonLightType
– тип освещения
EtalonFieldRect
– координаты области поля для сравнения
SecurityTextResultOCR – результат распознавания
EtalonResultOCR
– результат распознавания, выбранный для сравнения в
качестве эталонного
5.3.34. TPhotoIdentResult
Структура TPhotoIdentResult служит для хранения результатов визуализации одного
внедренного скрытого изображения (для проверки RPRM_Authenticity_IPI).
struct TPhotoIdentResult
{
union
{
int Result;
struct
{
WORD ElementResult;
WORD ElementDiagnose;
};
};
int
LightIndex;
RECT
Area;
TRawImageContainer
SourceImage;
TRawImageContainerList ResultImages;
uint32_t
FieldTypesCount;
uint32_t*
FieldTypesList;
int
Reserved1;

75Программные средства SDK
};
int
int
Объявление:
Поля:
Result
ElementResult
ElementDiagnose
LightIndex
Area
SourceImage
ResultImages
FieldTypesCount
FieldTypesList
Reserved1
Reserved2
Reserved3
Reserved2;
Reserved3;
PasspR.h
– код результата проверки (eMRZCheckResult)
– элемент, отвечающий за результат проверок (eCheckResult)
– элемент, при помощи которого проверяются ошибки
ElementResult (eCheckDiagnose)
– идентификатор схемы освещения (eRPRM_Lights)
– координаты области
– исходное изображение
– массив выходных изображений
– количество типов полей, текст которых закодирован в IPI.
Зарезервировано для внутреннего использования
– список констант типов полей, текст которых закодирован в IPI.
Зарезервировано для внутреннего использования
– не используется
– не используется
– не используется
5.3.35. TRegulaDeviceProperties
Структура TRegulaDeviceProperties служит для хранения информации
о считывателе документов.
struct TRegulaDeviceProperties
{
uint32_t DeviceID;
uint32_t Lights;
uint32_t SerialNumber;
uint32_t Features;
uint32_t DeviceCtrl;
LPSTR DirectShowName;
LPSTR DirectShowUID;
LPSTR Name;
uint32_t VideoModes;
uint64_t LabelSerialNumber;
LPSTR LabelSerialNumberStr;
uint64_t CameraSerialNumber;
GUID CameraGuid;
uint32_t Capabilities;
uint32_t Authenticity;
uint32_t Database;
uint32_t Limitations;
time_t ValidUntil;
bool WillConnect;
};
Объявление:
Поля:
DeviceID
Lights
SerialNumber
76
PasspR.h
– идентификатор модели считывателя (одно из значений
eRPRM_DeviceTypes)
– комбинация идентификаторов всех доступных схем освещения
считывателя (OR-комбинация значений eRPRM_Lights)
– серийный номер считывателя
Программные средства SDK
– дополнительные свойства считывателя (OR-комбинация
значений eRPRM_DeviceAdditionalFeatures)
DeviceCtrl
– тип управления считывателем (одно из значений
eRPRM_DeviceControlTypes)
DirectShowName
– символьное имя считывателя (для устройств с управлением
посредством DirectShow)
DirectShowUID
– уникальный символьный идентификатор считывателя,
формируемый ОС при подключении устройства в порт USB
(для устройств с управлением посредством DirectShow)
Name
– символьное имя считывателя (для устройств с прямым
управлением)
VideoModes
– поддерживаемые считывателем размеры сканируемых
изображений (комбинация значений eRPRM_VideoModes)
LabelSerialNumber – серийный номер считывателя, нанесенный на его корпус
LabelSerialNumberStr–
строковое
представление
серийного
номера
считывателя, нанесенного на его корпус
CameraSerialNumber– серийный номер камеры считывателя
CameraGuid
– GUID камеры считывателя
Capabilities
– набор доступных возможностей
Authenticity
– набор доступных проверок подлинности
Database
– тип базы данных
Limitations
–
ограничения
устройства,
одно
из
значений
eDeviceLimitations
ValidUntil
– дата окончания действия лицензии (timestamp)
WillConnect
– индикация о возможности подключения считывателя после
окончания действия лицензии.
Features
5.3.36. TIndicationLED
Структура TIndicationLED служит для задания алгоритма поведения индикаторных
светодиодов считывателя документов.
struct TIndicationLED
{
WORD wColorLed;
WORD wFreq;
};
Объявление:
Поля:
wColorLed
PasspR.h
– выбор индикаторного светодиода и цвета свечения. Младший
байт (LOBYTE) должен содержать одно из значений eLED_Color,
выбирающее цвет индикатора, старший байт (HIBYTE) –
порядковый номер индикатора, начиная с индекса 0 (для
считывателей с несколькими индикаторными светодиодами)

77Программные средства SDK
wFreq
– выбор режима поведения индикатора. Младший и старший
байты должны содержать значения в диапазоне 1–7.
Значение младшего байта определяет длительность
промежутка времени, в течение которого индикатор
выключен, старший байт – длительность промежутка
времени, в течение которого индикатор включен.
Значение 1 – кратчайший интервал, 7 – наибольший. При
задании нулевого (0) значения для какого-либо параметра
мигание светодиода прекращается
5.3.37. TPointArray
Структура TPointArray служит для хранения областей.
struct TPointArray
{
int
PointCount;
POINT *PointsList;
};
Объявление:
Поля:
PointCount
PointsList
PasspR.h
– количество точек в массиве PointsList
– массив координат точек
5.3.38. TAreaArray
Структура TAreaArray служит для хранения областей и контуров.
struct TAreaArray
{
int
Count;
RECT
*List;
TPointArray *Points;
};
typedef TAreaArray* PAreaArray;
Объявление:
Поля:
Count
List
Points
PasspR.h
– количество элементов в поле List и Points
– массив областей
– массив точек
5.3.39. TIRVisibilityElement
Структура TIRVisibilityElement служит для хранения результата проверки
IRVisibility.
struct TIRVisibilityElement
{
RECT Field;
78
Программные средства SDK
};
long Visibility;
long CheckResult;
long ElementType;
long Reserved;
Объявление:
Поля:
Field
Visibility
CheckResult
ElementType
PasspR.h
– координаты элемента
– флаг видимости/невидимости
– результат проверки
– тип проверяемого элемента
5.3.40. TDwordArray
Структура TDwordArray служит для хранения массива значений типа uint32_t.
struct TDwordArray
{
uint32_t Count;
uint32_t *List;
};
Объявление:
Поля:
Count
List
PasspR.h
– количество элементов
– массив элементов
5.3.41. TLexDateFormat
Структура TLexDateFormat служит для передачи формата даты командами
RPRM_Command_Options_Get_LexDateFormat
и
RPRM_Command_Options_Set_LexDateFormat.
struct TLexDateFormat
{
uint32_t format;
char customFormatString[32];
};
Объявление:
PasspR.h
Поля:
format
– формат даты, одно из значений eLexDateFormat
customFormatString– специальная строка формата, обязательна для LDF_Custom
5.3.42. TBoundsResult
Структура TBoundsResult служит для хранения результатов поиска границ.

79Программные средства SDK
struct TBoundsResult
{
int docFormat;
int Width;
int Height;
POINT Center;
float Angle;
POINT LeftTop;
POINT LeftBottom;
POINT RightTop;
POINT RightBottom;
int Inverse;
BYTE PerspectiveTr;
BYTE ResultStatus;
BYTE Reserve1;
BYTE Reserve2;
BYTE ObjArea;
BYTE ObjIntAngleDev;
int Dpi;
};
Объявление:
Поля:
docFormat
Width
Height
Center
Angle
LeftTop
LeftBottom
RightTop
RightBottom
Inverse
PerspectiveTr
ResultStatus
Reserve1
Reserve2
ObjArea
ObjIntAngleDev
Dpi
PasspR.h
– формат документа, одно из значений CDocFormat
– ширина документа
– высота документа
– координаты центра документа
– угол поворота документа
– координаты левого верхнего угла документа
– координаты левого нижнего угла документа
– координаты правого верхнего угла документа
– координаты правого нижнего угла документа
– параметр для внутреннего использования
– параметр для внутреннего использования
– параметр для внутреннего использования
– параметр для внутреннего использования
– параметр для внутреннего использования
– параметр для внутреннего использования
– параметр для внутреннего использования
– разрешение в точках на дюйм
5.3.43. TImageQualityCheck
Структура TImageQualityCheck служит для хранения результата проверки качества
входного изображения.
struct TImageQualityCheck
{
eImageQualityCheckType type;
eCheckResult result;
eRPRM_SecurityFeatureType featureType;
TAreaArray *areas;
80
Программные средства SDK
};
float mean;
float std_dev;
int probability;
Объявление:
Поля:
type
result
featureType
areas
mean
std_dev
probability
PasspR.h
– тип
проверки
качества,
одно
из
значений
eImageQualityCheckType
– результат проверки, одно из значений eCheckResult
– результат
проверки,
одно
из
значений
eRPRM_SecurityFeatureType
– аномальные области изображения
– среднее значение проверки
– значение отклонения
– вероятность проверки
5.3.44. TImageQualityCheckList
Структура TImageQualityCheckList служит для хранения списка результатов
проверки качества входного изображения.
struct TImageQualityCheckList
{
uint32_t Count;
eCheckResult result;
TImageQualityCheck ** List;
};
Объявление:
PasspR.h
Поля:
Count
– количество результатов в списке
result
– общий
результат
проверки,
одно
eCheckResult
List
– массив указателей отдельных проверок
из
значений
5.3.45. TVideodetectionNotification
Структура TVideodetectionNotification служит для хранения информации
видеодетекции.
struct TVideodetectionNotification
{
uint32_t sensorState;
TRawImageContainer* image;
TBoundsResult* mrzPosition;
};
Объявление:
PasspR.h
Поля:

81Программные средства SDK
sensorState
image
mrzPosition
– состояние датчика
– изображение видеодетекции
– местоположение МСЗ на изображении
5.3.46. TStatus
Структура TStatus служит для предоставления статуса проверки документов.
struct TStatus
{
eCheckResult overallStatus;
TDetailsOptical detailsOptical;
eCheckResult optical;
TDetailsRFID detailsRFID;
eCheckResult rfid;
eCheckResult portrait;
eCheckResult stopList;
};
Объявление:
PasspR.h
Поля:
overallStatus
– общий статус
detailsOptical
– подробное описание оптической проверки
optical
- оптическая проверка
detailsRFID
- подробное описание RFID
rfid -
- проверка RFID
portrait
- проверка портрета
stopList
- проверка по стоплисту
5.3.47. TDetailsRFID
Структура TDetailsRFID служит для предоставления подробностей проверки
электронного документа.
struct TDetailsRFID
{
eCheckResult overallStatus;
eCheckResult PA;
eCheckResult AA;
eCheckResult CA;
eCheckResult TA;
eCheckResult BAC;
eCheckResult PACE;
};
Объявление:
PasspR.h
Поля:
overallStatus
- общий статус
PA
- статус пассивной аутентификации
82
Программные средства SDK
AA
CA
TA
BAC
PACE
- статус активной аутентификации
- статус чиповой аутентификации
- статус терминальной аутентификации
- Basics access control
- Password Authenticated Connection Establishment
5.3.48. TDetailsOptical
Структура TDetailsOptical служит для предоставления подробностей оптической
проверки.
struct TDetailsOptical
{
eCheckResult overallStatus;
eCheckResult mrz;
eCheckResult text;
eCheckResult docType;
eCheckResult security;
eCheckResult imageQA;
eCheckResult expiry;
uint32_t pagesCount;
eCheckResult vds;
};
Объявление:
PasspR.h
Поля:
overallStatus
- общий статус
mrz
- статус МСЗ
text
- статус текста
docType
- статус типа документа. Распознавание типа документа
считается выполненным, если распознаны все страницы
документа и в каждом входном изображении распознан хотя
бы один документ. Единственным исключением является
формат ID1, для таких карточек допускается отсутствие
распознавания обратных сторон при условии, что основной
документ распознан и у него нет подчиненных документов
(других страниц) по нашему описанию. Если распознавание
типа документа не производилось (запрос не содержал
явного или неявного требования идентифицировать тип
документа), возвращает ch_Check_WasNotDone.
security
- статус проверки подлинности
imageQA
- статус качества входных изображений
expiry
- статус срока действия
pagesCount
- количество страниц
vds
- статус видимой цифровой печати

83Программные средства SDK
5.3.49. TTextResult
Структура TTextResult служит для хранения текстовых результатов.
struct TTextResult
{
uint32_t status;
uint32_t validityStatus;
uint32_t comparisonStatus;
char* dateFormat;
uint32_t fieldCount;
TTextField* fieldList;
uint32_t availableSourceCount;
TTextSource* availableSourceList;
};
Объявление:
PasspR.h
Поля:
status
– общий статус
validityStatus
– статус достоверности
comparisonStatus
– статус сравнения
dateFormat
– формат даты
fieldCount
– количество полей
fieldList
– список полей
availableSourceCount – количество источников
availableSourceList – список источников
5.3.50. TTextValidity
Структура TTextValidity служит для хранения результатов достоверности
текстового поля указанного источника.
struct TTextValidity
{
char* source;
uint32_t status;
};
Объявление:
PasspR.h
Поля:
source
– имя источника
status
– статус достоверности
5.3.51. TTextComparison
Структура TTextComparison служит для сравнения текстовых результатов.
struct TTextComparison
{
char* sourceLeft;
char* sourceRight;
uint32_t status;
};
84
Программные средства SDK
Объявление:
PasspR.h
Поля:
sourceLeft, sourceRight – имена источников
status
– статус сравнения
5.3.52. TTextSource
Структура TTextSource служит для описания источника текстовых данных.
struct TTextSource
{
char* source;
uint32_t containerType;
uint32_t validityStatus;
};
Объявление:
PasspR.h
Поля:
source
– имя источника
containerType
– тип контейнера
validityStatus
- статус достоверности источника
5.3.53. TTextSymbol
Структура TTextSymbol служит для хранения результата чтения символа.
struct TTextSymbol
{
uint32_t code;
RECT rect;
uint32_t probability;
};
Объявление:
PasspR.h
Поля:
code
– код символа
rect
– область символа
probability
– вероятность распознавания
5.3.54. TTextFieldValue
Структура TTextFieldValue служит для хранения значений текстового поля.
struct TTextFieldValue
{
char* value;
char* originalValue;
uint32_t originalValidity;
char* source;
uint32_t containerType;
uint32_t pageIndex;
RECT fieldRect;
TRfidOrigin rfidOrigin;

85Программные средства SDK
uint32_t probability;
uint32_t originalSymbolsCount;
TTextSymbol* originalSymbols;
};
Объявление:
PasspR.h
Поля:
value
– значение поля в текущем формате предоставления данных
originalValue
– оригинальное значение поля
originalValidity
– достоверность оригинала
source
– источник
containerType
– тип контейнера
pageIndex
– индекс страницы
fieldRect
– область поля
rfidOrigin
- источник поля из электронного документа
probability
– вероятность распознавания поля
originalSymbolsCount– количество оригинальных символов
originalSymbols
– оригинальные символы
5.3.55. TTextField
Структура TTextField служит для хранения текстового поля.
struct TTextField
{
uint16_t fieldType;
char* fieldName;
uint16_t lcid;
char* lcidName;
uint32_t status;
char* value;
uint32_t valueCount;
TTextFieldValue* valueList;
uint32_t validityStatus;
uint32_t validityCount;
TTextValidity* validityList;
uint32_t comparisonStatus;
uint32_t comparisonCount;
TTextComparison* comparisonList;
};
Объявление:
PasspR.h
Поля:
fieldType
– тип поля
fieldName
– имя поля
lcid
– код LCID
lcidName
– имя LCID
status
– статус поля
value
– значение поля
valueCount
– количество значений
valueList
– список значений
validityStatus
– статус достоверности
86
Программные средства SDK
validityCount
validityList
comparisonStatus
comparisonCount
comparisonList
– количество результатов достоверности
– список результатов достоверности
– статус сравнения
– количество результатов сравнения
– список результатов сравнения
5.3.56. TImagesResult
Структура TImagesResult служит для представления всех графических результатов в
одном контейнере.
struct TImagesResult
{
uint32_t fieldCount;
TImageField* fieldList;
uint32_t availableSourceCount;
TImageSource* availableSourceList;
};
Объявление:
PasspR.h
Поля:
fieldCount
– количество полей
fieldList
– список полей
availableSourceCount
– количество доступных источников
availableSourceList
– список доступных источников
5.3.57. TImageSource
Структура TImageSource служит для описания источника графической информации.
struct TImageSource
{
char* source;
uint32_t containerType;
};
Объявление:
PasspR.h
Поля:
source
- источник
containerType
- тип контейнера
5.3.58. TImageField
Структура TImageField служит для предоставления одного изображения или
графического поля.
struct TImageField
{
uint32_t fieldType;

87Программные средства SDK
char* fieldName;
uint32_t valueCount;
TImageFieldValue* valueList;
};
Объявление:
PasspR.h
Поля:
fieldType
- тип поля
fieldname
- наименование поля
valueCount
- количество значений
valueList
- список значений
5.3.59. TImageFieldValue
Структура TImageFieldValue служит для представления изображения.
struct TImageFieldValue
{
char* value;
char* originalValue;
char* source;
uint32_t containerType;
uint32_t pageIndex;
uint32_t lightIndex;
RECT fieldRect;
TRfidOrigin rfidOrigin;
uint32_t originalPageIndex;
};
Объявление:
PasspR.h
Поля:
value
- файл изображения в Base64
originalValue
- файл оригинального изображения в Base64
source
- источник
containerType
- тип контейнера
pageIndex
- индекс страницы
lightIndex
- идентификатор схемы освещения
fieldRect
- область поля
rfidOrigin
- источник поля из электронного документа
originalPageIndex - индекс страницы входного изображения, на котором был
найден результат
5.3.60. TRfidOrigin
Структура TRfidOrigin служит для описания источника данных электронного
документа.
struct TRfidOrigin
{
88
Программные средства SDK
int32_t dg;
int32_t dgTag;
int32_t tagEntry;
int32_t entryView;
};
Объявление:
PasspR.h
Поля:
Dg
- data group
dgTag
- DG tag
tagEntry
- tag entry
entryView
- entry view

89Программные средства SDK
5.4. ПЕРЕЧИСЛЕНИЯ (НАБОРЫ КОНСТАНТ)
5.4.1. eRPRM_ResultType
Перечисление eRPRM_ResultType содержит набор констант, которые определяют тип
данных, хранящихся в структуре-контейнере TResultContainer.
enum eRPRM_ResultType
{
RPRM_ResultType_Empty
RPRM_ResultType_RawImage
RPRM_ResultType_FileImage
RPRM_ResultType_MRZ_OCR_Extended
RPRM_ResultType_BarCodes
RPRM_ResultType_Graphics
RPRM_ResultType_MRZ_TestQuality
RPRM_ResultType_DocumentTypesCandidates
RPRM_ResultType_ChosenDocumentTypeCandidate
RPRM_ResultType_DocumentsInfoList
RPRM_ResultType_OCRLexicalAnalyze
RPRM_ResultType_RawUncroppedImage
RPRM_ResultType_Visual_OCR_Extended
RPRM_ResultType_BarCodes_TextData
RPRM_ResultType_BarCodes_ImageData
RPRM_ResultType_Authenticity
RPRM_ResultType_ExpertAnalyze
RPRM_ResultType_OCRLexicalAnalyzeEx
RPRM_ResultType_EOSImage
RPRM_ResultType_Bayer
RPRM_ResultType_MagneticStripe
RPRM_ResultType_MagneticStripe_TextData
RPRM_ResultType_FieldFileImage
RPRM_ResultType_DatabaseCheck
RPRM_ResultType_FingerprintTemplateISO
RPRM_ResultType_InputImageQuality
RPRM_ResultType_DeviceInfo
RPRM_ResultType_LivePortrait
RPRM_ResultType_Status
RPRM_ResultType_Portrait_Comparison
RPRM_ResultType_ExtPortrait
RPRM_ResultType_Text
RPRM_ResultType_Images
RPRM_ResultType_FingerPrints
RPRM_ResultType_FingerPrint_Comparison
RPRM_ResultType_BarcodePosition
RPRM_ResultType_BSI_XML_v2
RPRM_ResultType_DocumentPosition
RPRM_ResultType_BSI_XML
RPRM_ResultType_Custom
};
90
= 0,
= 1,
= 2,
= 3,
= 5,
= 6,
= 7,
= 8,
= 9,
= 10,
= 15,
= 16,
= 17,
= 18,
= 19,
= 20,
= 21,
= 22,
= 23,
= 24,
= 25,
= 26,
= 27,
= 28,
= 29,
= 30,
= 31,
= 32,
= 33,
= 34,
= 35,
= 36,
= 37,
= 38,
= 39,
= 62,
= 73,
= 85,
= 92,
= 100,
Программные средства SDK
Эти значения записываются в поле result_type структуры TResultContainer
и однозначно определяют тип структуры данных, указателем на которую является
значение поля buffer:
• RPRM_ResultType_Empty – результат отсутствует, пустой контейнер;
• RPRM_ResultType_RawImage – результат представлен в виде структуры
TRawImageContainer;
• RPRM_ResultType_FileImage – двоичного массива длиной buf_length, в
котором содержится образ графического файла изображения;
• RPRM_ResultType_MRZ_OCR_Extended – структуры TDocVisualExtendedInfo;
• RPRM_ResultType_BarCodes – структуры TDocBarCodeInfo;
• RPRM_ResultType_Graphics – структуры TDocGraphicsInfo;
• RPRM_ResultType_MRZ_TestQuality – структуры TDocMRZTestQuality;
• RPRM_ResultType_DocumentTypesCandidates – структуры TCandidatesListContainer;
• RPRM_ResultType_ChosenDocumentTypeCandidate – структуры TOneCandidate;
• RPRM_ResultType_DocumentsInfoList
ИСПОЛЬЗУЕТСЯ;
– структуры
TListDocsInfo.
НЕ
• RPRM_ResultType_OCRLexicalAnalyze – структуры TListVerifiedFields;
• RPRM_ResultType_RawUncroppedImage – структуры TRawImageContainer.
НЕ ИСПОЛЬЗУЕТСЯ;
• RPRM_ResultType_Visual_OCR_Extended – структуры TDocVisualExtendedInfo;
• RPRM_ResultType_BarCodes_TextData – структуры TDocVisualExtendedInfo;
• RPRM_ResultType_BarCodes_ImageData – структуры TDocGraphicsInfo;
• RPRM_ResultType_Authenticity – структуры TAuthenticityCheckList;
• RPRM_ResultType_ExpertAnalyze – НЕ ИСПОЛЬЗУЕТСЯ;
• RPRM_ResultType_OCRLexicalAnalyzeEx – НЕ ИСПОЛЬЗУЕТСЯ;
• RPRM_ResultType_EOSImage – структуры TRawImageContainer;
• RPRM_ResultType_Bayer – структуры TRawImageContainer;
• RPRM_ResultType_MagneticStripe – двоичного массива длиной buf_length,
в котором содержится массив прочитанных из магнитной полосы данных;

91Программные средства SDK
– структуры
• RPRM_ResultType_MagneticStripe_TextData
TDocVisualExtendedInfo;
• RPRM_ResultType_FieldFileImage – двоичного массива длиной buf_length,
в котором содержится образ графического файла изображения графического
поля;
• RPRM_ResultType_DatabaseCheck – структуры TDatabaseCheck;
• RPRM_ResultType_FingerprintTemplateISO - двоичного массива длиной
buf_length, в котором содержится шаблон отпечатка пальца в формате ISO;
• RPRM_ResultType_DeviceInfo – структуры TRegulaDeviceProperties,
содержащей описание лицензии подключенного считывателя;
• RPRM_ResultType_LivePortrait
–
структуры
TDocGraphicsInfo,
содержащей изображение портрета владельца документа с внешней камеры;
• RPRM_ResultType_Status - структуры TStatus;
• RPRM_ResultType_Portrait_Comparison
–
структуры
TAuthenticityCheckList, содержащей результаты сравнения портрета из
пришедших извне изображений и портрета на документе. Результаты сравнения
с RPRM_ResultType_ExtPortrait
и RPRM_ResultType_LivePortrait
попадают в контейнер с этим типом;
• RPRM_ResultType_ExtPortrait
–
структуры
TDocGraphicsInfo,
содержащей изображение портрета владельца документа из внешнего
источника;
• RPRM_ResultType_Text – структуры TTextResult;
• RPRM_ResultType_Images – структуры TImagesResult;
• RPRM_ResultType_FingerPrints
структуры TDocGraphicsInfo;
• RPRM_ResultType_FingerPrint_Comparison
TAuthenticityCheckList;
структуры
• RPRM_ResultType_BarcodePosition
–
результат
штрихкода документа в виде структуры TBoundsResult;
поиска
границ
• RPRM_ResultType_DocumentPosition – результат поиска границ документа в
виде структуры TBoundsResult;
• RPRM_ResultType_InputImageQuality
– результат проверки
входного изображения в виде структуры TImageQualityCheckList;
качества
• RPRM_ResultType_BSI_XML – Result in XML format according to BSI TR-03135 v1;
92
Программные средства SDK
• RPRM_ResultType_BSI_XML_v2 – Result in XML format according to BSI TR-03135
v2;
• RPRM_ResultType_Custom – НЕ ИСПОЛЬЗУЕТСЯ.
5.4.2. eRPRM_DeviceAdditionalFeatures
Перечисление eRPRM_DeviceAdditionalFeatures содержит набор
которые определяют дополнительные свойства считывателя документов.
констант,
enum eRPRM_DeviceAdditionalFeatures
{
RPRM_DeviceAdditionalFeature _None
= 0x00000000,
RPRM_DeviceAdditionalFeature _Accumulator
= 0x00000001,
RPRM_DeviceAdditionalFeature_Indicators_Triple = 0x00000002,
RPRM_DeviceAdditionalFeature _VideoDetection
= 0x00000004,
RPRM_DeviceAdditionalFeature _IRFilter
= 0x00000008,
RPRM_DeviceAdditionalFeature _Indicators_Single = 0x00000010,
RPRM_DeviceAdditionalFeature _Indicators_Double = 0x00000020,
RPRM_DeviceAdditionalFeature _Indicators_Button = 0x00000040,
RPRM_DeviceAdditionalFeature _Indicators_Four
= 0x00000080,
RPRM_DeviceAdditionalFeature _2SidedWhite
= 0x00000100,
RPRM_DeviceAdditionalFeature _2SidedIR
= 0x00000200,
RPRM_DeviceAdditionalFeature _2SidedUV
= 0x00000400,
RPRM_DeviceAdditionalFeature _MagneticStripe
= 0x00001000,
RPRM_DeviceAdditionalFeature _JPEGCompression
= 0x00002000,
RPRM_DeviceAdditionalFeature _IntegratedDisplay = 0x00004000,
RPRM_DeviceAdditionalFeature _KeyboardLight
= 0x00008000,
RPRM_DeviceAdditionalFeature _ExternalLight
= 0x00010000,
RPRM_DeviceAdditionalFeature _RESERVED
= 0x00020000,
RPRM_DeviceAdditionalFeature _DocumentSensor
= 0x00040000,
RPRM_DeviceAdditionalFeature_DocSizeMode
= 0x00080000,
RPRM_DeviceAdditionalFeature_LiveView
= 0x00100000,
RPRM_DeviceAdditionalFeature_ExternalPower
= 0x00200000,
};
Значение констант:
• RPRM_DeviceAdditionalFeature _Accumulator
оборудован аккумулятором;
Cчитыватель
• RPRM_DeviceAdditionalFeature_Indicators_Triple
документов имеет три диода индикации;
документов
Cчитыватель
• RPRM_DeviceAdditionalFeature _VideoDetection
Cчитыватель
документов может работать в режиме полностраничной видеодетекции;

93Программные средства SDK
• RPRM_DeviceAdditionalFeature _IRFilter
имеет ИК-фильтр;
Cчитыватель
документов
• RPRM_DeviceAdditionalFeature _Indicators_Single Cчитыватель
документов имеет один диод индикации;
• RPRM_DeviceAdditionalFeature _Indicators_Double Cчитыватель
документов имеет два диода индикации;
• RPRM_DeviceAdditionalFeature _Indicators_Button Cчитыватель
документов имеет интегрированный в кнопку диод индикации;
• RPRM_DeviceAdditionalFeature _Indicators_Four
документов имеет четыре диода индикации;
Cчитыватель
• RPRM_DeviceAdditionalFeature _Indicators_2SidedWhite Cчитыватель
документов способен снимать два белых изображения обеих сторон документа
одновременно;
• RPRM_DeviceAdditionalFeature _Indicators_2SidedIR
Cчитыватель
документов способен снимать два ИК-изображения обеих сторон документа
одновременно;
• RPRM_DeviceAdditionalFeature _Indicators_2SidedUV
Cчитыватель
документов способен снимать два УФ-изображения обеих сторон документа
одновременно;
• RPRM_DeviceAdditionalFeature _MagneticStripe
документов способен считывать магнитную полосу;
Cчитыватель
• RPRM_DeviceAdditionalFeature _JPEGCompression
Cчитыватель
документов способен получать изображения в JPEG вместо RAW;
• RPRM_DeviceAdditionalFeature _IntegratedDisplay Cчитыватель
документов имеет встроенный экран;
• RPRM_DeviceAdditionalFeature _KeyboardLight
документов имеет встроенную подсветку клавиатуры;Cчитыватель
• RPRM_DeviceAdditionalFeature _ExternalLight
документов имеет внешний источник света;Cчитыватель
• RPRM_DeviceAdditionalFeature _RESERVED
внутреннего использования;Зарезервировано для
94
Программные средства SDK
• RPRM_DeviceAdditionalFeature _DocumentSensor
Cчитыватель
документов имеет датчик документа (для считывателей, обычно работающих в режиме
видеодетекции);
• RPRM_DeviceAdditionalFeature_DocSizeMode
использования.
Для
внутреннего
• RPRM_DeviceAdditionalFeature_LiveView
Cчитыватель
документов имеет доступность функции «Live View».
• RPRM_DeviceAdditionalFeature_ExternalPower
Считыватель
документов работает от внешнего источника. В данный момент константа добавлена,
но не используется.
5.4.3. eRPRM_DeviceControlTypes
Перечисление eRPRM_DeviceControlTypes содержит набор констант, которые
определяют тип управления считывателем документов.
enum eRPRM_DeviceControlTypes
{
RPRM_DeviceControlType_DirectShow = 1,
RPRM_DeviceControlType_DirectIO
= 2,
RPRM_DeviceControlType_Virtual
= 3
};
Значение констант:
• RPRM_DeviceControlType_DirectShow
управляется cредствами DirectShow
Cчитыватель
документов
• RPRM_DeviceControlType_DirectIO
Cчитыватель документов обладает прямым управлением
• RPRM_DeviceControlType_Virtual Виртуальный считыватель документов
5.4.4. eRPRM_DeviceTypes
Перечисление eRPRM_DeviceTypes содержит набор уникальных идентификаторов,
определяющих тип модели считывателя документов.
enum eRPRM_DeviceTypes
{
RPRM_DeviceType_Unknown
RPRM_DeviceType_Virtual
// 83x3
RPRM_DeviceType_FX_8313_115
RPRM_DeviceType_FX_8333_115
RPRM_DeviceType_FX_8353_115
RPRM_DeviceType_FX_8383_115
RPRM_DeviceType_FX_8883_115
RPRM_DeviceType_FX_8853_115
= 0x00000000, // Unknown device
= 0xFFFFFFFF, // Virtual Device
// (Security Key)
=
=
=
=
=
=
0x08313115, // OV 1.3
0x08333115, // OV 3.0
0x08353115, // OV 5.1
0x08383115, // Micron 3.1
0x08883115, // Micron 9.0
0x08853115, // Micron 5.0
// 83x3M

95Программные средства SDK
RPRM_DeviceType_FX_8303_115 = 0x08323115, // Micron 3.1
// 83x4 (83x3 + Bottom light table)
RPRM_DeviceType_FX_8314_115 = 0x08314115, // OV 1.3
RPRM_DeviceType_FX_8334_115 = 0x08334115, // OV 3.0
RPRM_DeviceType_FX_8354_115 = 0x08354115, // OV 3.0
RPRM_DeviceType_FX_8384_115 = 0x08384115, // Micron 3.1
RPRM_DeviceType_FX_8884_115 = 0x08884115, // Micron 9.0
RPRM_DeviceType_FX_8854_115 = 0x08854115, // Micron 5.0
// 7007
RPRM_DeviceType_FX_7107_115
RPRM_DeviceType_FX_7117_115
RPRM_DeviceType_FX_7307_115
RPRM_DeviceType_FX_7317_115
RPRM_DeviceType_FX_7507_115
RPRM_DeviceType_FX_7517_115
RPRM_DeviceType_FX_7387_115
RPRM_DeviceType_FX_7397_115
RPRM_DeviceType_FX_7887_115
RPRM_DeviceType_FX_7857_115
// 8307
RPRM_DeviceType_FX_8307
// 7024
RPRM_DeviceType_FX_7104_115
RPRM_DeviceType_FX_7304_115
RPRM_DeviceType_FX_7504_115
RPRM_DeviceType_FX_7384_115
RPRM_DeviceType_FX_7884_115
RPRM_DeviceType_FX_7854_115
RPRM_DeviceType_FX_78A4_115
RPRM_DeviceType_FX_78E4_115
= 0x07107115, // OV 1.3
= 0x07117115, // OV 1.3
// Modification 2
= 0x07307115, // OV 3.0
= 0x07317115, // OV 3.1
// Modification 2
= 0x07507115, // OV 5.1
= 0x07517115, // OV 5.1
// Modification 2
= 0x07387115, // Micron 3.1
= 0x07397115, // Micron 3.1
// Modification 2
= 0x07887115, // Micron 9.0
= 0x07857115, // Micron 5.0
= 0x08307000, // Micron 3.1 Mp
// (MRZ-only reader)
=
=
=
=
=
=
=
=0x07104115, // OV 1.3
0x07304115, // OV 3.0
0x07504115, // OV 5.0
0x07384115, // Micron 3.1
0x07884115, // Micron 9.0
0x07854115, // Micron 5.0
0x078A4115, // Micron 10.0
0x078E4115, // Micron 14.0
// 7024 Lite functionality
RPRM_DeviceType_FX_7104_Lite =
RPRM_DeviceType_FX_7304_Lite =
RPRM_DeviceType_FX_7504_Lite =
RPRM_DeviceType_FX_7384_Lite =
RPRM_DeviceType_FX_7884_Lite =
RPRM_DeviceType_FX_7854_Lite =
RPRM_DeviceType_FX_78A4_Lite =
RPRM_DeviceType_FX_78E4_Lite =0x07104333, // OV 1.3
0x07304333, // OV 3.0
0x07504333, // OV 5.1
0x07384333, // Micron 3.1
0x07884333, // Micron 9.0
0x07854333, // Micron 5.0
0x078A4333, // Micron 10.0
0x078E4333, // Micron 14.0
// 70x3
RPRM_DeviceType_FX_7103_115
RPRM_DeviceType_FX_7303_115
RPRM_DeviceType_FX_7503_115
RPRM_DeviceType_FX_7383_115
RPRM_DeviceType_FX_7883_115
RPRM_DeviceType_FX_7853_115=
=
=
=
=
=0x07103115, // OV 1.3
0x07303115, // OV 3.0
0x07503115, // OV 5.1
0x07383115, // Micron 3.1
0x07883115, // Micron 9.0
0x07853115, // Micron 5.0
// 4820
RPRM_DeviceType_FX_4821
RPRM_DeviceType_FX_4823
RPRM_DeviceType_FX_4825
RPRM_DeviceType_FX_4822
RPRM_DeviceType_FX_4828
RPRM_DeviceType_FX_4858=
=
=
=
=
=0x04821115, // OV 1.3
0x04823115, // OV 3.0
0x04825115, // OV 5.1
0x04822115, // Micron 3.1
0x04828115, // Micron 9.0
0x04858115, // Micron 5.0
// 7008
RPRM_DeviceType_FX_7038
= 0x07038115, //Micron 3.1
RPRM_DeviceType_FX_7038_VB = 0x17038115, //Micron 3.1
RPRM_DeviceType_FX_7058
= 0x07058115, //Micron 5.0
// 70x8M
RPRM_DeviceType_FX_7058M
96
= 0x07058110, //OV 5 Mp
Программные средства SDK
RPRM_DeviceType_FX_7058M_VB = 0x17058110, //OV 5 Mp
// 70x4M small reader
RPRM_DeviceType_FX_73x4M
RPRM_DeviceType_FX_75x4M
RPRM_DeviceType_FX_71x4M
RPRM_DeviceType_FX_76x4M
RPRM_DeviceType_FX_78x4M=
=
=
=
=
// 7308
RPRM_DeviceType_FX_7338= 0x07338115, //Micron 3.1
0x07364115, //Micron 3.1
0x07564115, //Micron 5.0
0x07A64115, //Micron 10.0
0x07664115, //OV 5Mp
0x07864115, //Micron 18Mp
// 72x3 ID1 reader with 2 cameras
RPRM_DeviceType_FX_7253
= 0x07253115, //OV 5.0 Mp
// with 2 cameras
RPRM_DeviceType_FX_7517
RPRM_DeviceType_FX_7017
RPRM_DeviceType_FX_7027
RPRM_DeviceType_FX_7017D_M
RPRM_DeviceType_FX_7017D_S
=
=
=
=
=
0x07517000, //Micron 5Mp
0x07017000, //OV 5Mp
0x07027000, //OV 5Mp
0x07017100, //OV 5Mp
0x07017200, //OV 5Mp
// 7074
RPRM_DeviceType_EOS_7074_550 = 0x07074550, // Cannon EOS 550D
// 7084
RPRM_DeviceType_EOS_7084_7 = 0x07084007, // Cannon EOS 7D
// 8803 - Banknote Reader
RPRM_DeviceType_EOS_8803_100 = 0x08803100, // Cannon EOS 100D
// 8850 - Passport Reader 1/2 pages
RPRM_DeviceType_EOS_8850_5 = 0x08850005, // Cannon EOS 5DS (5DSR)
// 8824 - Banknote Reader
RPRM_DeviceType_EOS_8824_80 = 0x08824080, // Cannon EOS 80D
// 8850M - Passport Reader 1/2 pages
RPRM_DeviceType_EOS_8850M_9 = 0x08880009, // Panasonic G9
// 8850F - Passport Reader 2 pages
RPRM_DeviceType_EOS_8850F_9 = 0x0888000A, // Panasonic G9
// 8880 - Passport Reader 1/2 pages
RPRM_DeviceType_EOS_8880_1 = 0x08850001, // Panasonic S1R
// 8880F - Passport Reader 2 pages
RPRM_DeviceType_EOS_8880F_1 = 0x08850002, // Panasonic S1R
// 88100 - Passport Reader 2 pages
RPRM_DeviceType_EOS_88100 = 0x08850003, // Fujifilm GFX100S
// 88100F - Passport Reader 2 pages
RPRM_DeviceType_EOS_88100F = 0x08850004, // Fujifilm GFX100S
// Camera Canon EOS
RPRM_DeviceType_CanonEOS
= 0x20000001, // Canon EOS series
// Camera Panasonic
RPRM_DeviceType_Panasonic = 0x30000009, // Panasonic series
// 4107
RPRM_DeviceType_FX_4137
RPRM_DeviceType_FX_4157
= 0x04137115, //Micron 3.1
= 0x04157115, //Micron 5.0
// 7310
RPRM_DeviceType_Mobile_7310 = 0x07310000, // 1110 Torch + Mobile
device = mobile complex 7310
// ARH
RPRM_DeviceType_ARH= 0x10000001,
// 3M
RPRM_DeviceType_3M= 0x10000002,

97Программные средства SDK
// Access-IS
RPRM_DeviceType_AccessIs= 0x10000003,
// TWAIN
RPRM_DeviceType_TWAIN= 0x10000004,
// Bisys Korea
RPRM_DeviceType_BK= 0x10000005,
// Bisys Korea New - 7303
RPRM_DeviceType_73xx
= 0x10000006,
// e-seek M500
RPRM_DeviceType_M500= 0x10000007,
RPRM_DeviceType_Desko= 0x10000008,
// DESKO Icon
RPRM_DeviceType_DeskoIcon = 0x1000000A,
// Xperix RealPass
RPRM_DeviceType_XperixRealPass = 0x1000000B,
// Wise Cube wsdef API
RPRM_DeviceType_WiseCube_wsdef = 0x1000000C,
};
98
//unused ------------------------------------------------------
RPRM_DeviceType_USB20_1
= 0x00200001, // RdrPassport
// with USB2.0 camera
RPRM_DeviceType_7004s
= 0x00200002, // PR7004S (W+, IR+)
RPRM_DeviceType_7003_01
= 0x00200003, // PR7003_01
// (Wt, Ws, W+, IR+)
RPRM_DeviceType_7003_110
= 0x07003110, // PR7003_111
// (Wt, Ws, W+, IRt,
// IRs, IR+, UV365)
RPRM_DeviceType_7003_111
= 0x07003111, // PR7003_111 (Wt, Ws,
// W+, IRt, IRs, IR+,
// UV365, 3MW1, 3MW2,
// 3MW+)
RPRM_DeviceType_7004_100
= 0x07004100, // PR7004_100 /
// PR7005_100 (W+, IR+)
RPRM_DeviceType_7004_110
= 0x07004110, // PR7004_110 /
// PR7005_110 (W+, IR+,
// UV)
RPRM_DeviceType_70x4_111
= 0x07004111, // PR70x4_111 /
// PR70x5_111 (W+, IR+,
// UV, 3MW+)
RPRM_DeviceType_70x4_114
= 0x07004114, // PR70x4_114 /
// PR70x5_114 (Wt, Ws,
// W+, IRt, IRs, IR+,
// UV365, 3MW1, 3MW2,
// 3MW+, 3MIR1, 3MIR2,
// 3MIR+)
RPRM_DeviceType_70x4_115
= 0x07004115, // PR70x4_115 /
// PR70x5_115 (W(m),
// IR(m), UV365, 3MW1,
// 3MW2, 3MW+)
RPRM_DeviceType_8303_100
= 0x08303100, // PR8303_100 (W+, IR+)
RPRM_DeviceType_8303_110
= 0x08303110, // PR8303_110 (W+, IR+,
// UV)
RPRM_DeviceType_8303_111
= 0x08303111, // PR8303_111 (W+, IR+,
// UV, 3M1, 3M2)
RPRM_DeviceType_8303_114
= 0x08303114, // PR8303_114 (W_down,
// W_up, W+, IR_down,
// IR_up, IR+, UV365,
// 3MW1, 3MW2, 3MW+)
RPRM_DeviceType_8303_115
= 0x08303115,
RPRM_DeviceType_8305
= 0x08305000, // Mobile complex 8305
// (Logitech QuickCam
// Pro web-camera)
//unused -------------------------------------------------------
Программные средства SDK
Ниже перечислены значения констант, использующиеся в настоящее время:
• RPRM_DeviceType_UnknownНеизвестный тип считывателя документов;
• RPRM_DeviceType_VirtualВиртуальный ридер, позволяет обрабатывать
файлы изображений;
• RPRM_DeviceType_FX_8313_115 Считыватель документов 83x3 с камерой OV
1,3 Мп;
• RPRM_DeviceType_FX_8383_115 Считыватель
Micron 3,1 Мп;
документов 83x3 с камерой
• RPRM_DeviceType_FX_8314_115 Считыватель документов 83x3 с камерой OV
1,3 Мп;
• RPRM_DeviceType_FX_8334_115 Считыватель документов 83х4 с камерой OV
1,3 Мп;
• RPRM_DeviceType_FX_8384_115 Считыватель
Micron 3,1 Мп;
документов 83х4 с камерой
• RPRM_DeviceType_FX_7107_115 Считыватель документов 7007 с камерой OV
1,3 Мп;
• RPRM_DeviceType_FX_7117_115 Считыватель
модифицированный с камерой OV 1,3 Мп;
• RPRM_DeviceType_FX_8307
Micron 3,1 Мп;
документов
7007,
Считыватель документов 8307 с камерой
• RPRM_DeviceType_FX_7104_115 Считыватель документов 70x4 с камерой OV
1,3 Мп;
• RPRM_DeviceType_FX_7304_115 Считыватель документов 70x4 с камерой OV
3,0 Мп;
• RPRM_DeviceType_FX_7384_115 Считывательдокументов 70x4 с камерой
• RPRM_DeviceType_FX_7854_115 Считывательдокументов 70x4 с камерой
Micron 3,1 Мп;
Micron 5,0 Мп;
• RPRM_DeviceType_FX_7103_115 Считыватель документов 70x3 с камерой OV
1,3 Мп;

99Программные средства SDK
• RPRM_DeviceType_FX_7383_115 Считыватель
Micron 3,1 Мп;
документов 70x3 с камерой
• RPRM_DeviceType_FX_4821Считыватель документов 4820 с камерой OV
• RPRM_DeviceType_FX_4822Считыватель документов 4820 с камерой
• RPRM_DeviceType_FX_73x4MСчитыватель документов 70x4M с камерой
• RPRM_DeviceType_FX_75x4MСчитыватель документов 70x4M с камерой
• RPRM_DeviceType_FX_76x4MСчитыватель документов 70x4M с камерой OV
• RPRM_DeviceType_FX_7253Считыватель
• RPRM_DeviceType_FX_7017Считыватель документов 7017 с камерой OV
• RPRM_DeviceType_FX_7027Считыватель документов 7027 с камерой OV
1,3 Мп;
Micron 3,1 Мп;
3 Мп;
5 Мп;
5 Мп;
камерами OV 5 Мп;
5 Мп;
5 Мп;
документов
72x3
с
двумя
• RPRM_DeviceType_FX_7017D_M Считыватель документов 7017D (ведущий) с
камерой OV 5 Мп;
• RPRM_DeviceType_FX_7017D_SСчитыватель документов 7017D (ведомый) с
• RPRM_DeviceType_FX_7058MСчитыватель документов 70x8M с камерой OV
камерой OV 5 Мп;
5 Мп для встраивания;
• RPRM_DeviceType_EOS_7074_550 Считыватель
18 Мп;
документов 7074 с камерой
• RPRM_DeviceType_FX_78x4M Считыватель документов 78х4М с камерой 18 Мп;
• RPRM_DeviceType_Mobile_7310
Мобильный комплекс 7310;
• RPRM_DeviceType_Desko Стороннее устройство DESKO scanner.
100
Программные средства SDK
5.4.5. eRPRM_Lights
Перечисление eRPRM_Lights содержит набор идентификаторов схем освещения,
которые используются для идентификации возможностей считывателя документов,
указания схем освещения для сканирования и т. п.
enum eRPRM_Lights
{
RPRM_Light_OFF
RPRM_Light_OVI
RPRM_Light_White_Top
RPRM_Light_White_Side
RPRM_Light_White_Front
RPRM_Light_IR_Top
RPRM_Light_IR_Side
RPRM_Light_IR_Front
RPRM_Light_ White_Gray
RPRM_Light_OVD
RPRM_Light_Videodetection
RPRM_Light_IR_870_Obl
RPRM_Light_UV
RPRM_Light_IR_Luminescence
RPRM_Light_AXIAL_White_Left
RPRM_Light_AXIAL_White_Right
RPRM_Light_AXIAL_White_Front
RPRM_Light_IR_720
RPRM_Light_IR_940
RPRM_Light_White_Full=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
RPRM_Light_IR_Full
RPRM_Light_AXIAL_White_Full=
=
};
0x00000000,
0x00000001,
0x00000002,
0x00000004,
0x00800000,
0x00000008,
0x00000010,
0x01000000,
0x02000000,
0x04000000,
0x08000000,
0x10000000,
0x00000080,
0x000000100,
0x00000400,
0x00000800,
0x00000200,
0x00001000,
0x00002000,
RPRM_Light_White_Top|
RPRM_Light_White_Side,
RPRM_Light_IR_Top|RPRM_Light_IR_Side,
RPRM_Light_AXIAL_White_Left|
RPRM_Light_AXIAL_White_Right,
0x80000000,
0x90000000,
0xA0000000,
0xB0000000,
0xC0000000,
0x00000020,
0x00000040,
0x00010000,
RPRM_Light_RAW_Data
=
RPRM_Light_RAW_Data_GRBG
=
RPRM_Light_RAW_Data_GBGR
=
RPRM_Light_RAW_Data_RGGB
=
RPRM_Light_RAW_Data_BGGR
=
RPRM_Light_Transmitted
=
RPRM_Light_Transmitted_IR =
RPRM_Light_AntiStokes
=
RPRM_Light_Transmitted_IR940
= 0x00004000,
RPRM_Light_OVD_Right
= 0x00040000,
RPRM_Light_OVD_Left
= 0x00020000,
RPRM_Light_IR_700
= 0x00008000,
RPRM_Light_IR_870
= RPRM_Light_IR_Front, // Light IR 870
(mod. 8803),
RPRM_Light_Holo
= RPRM_Light_OVD,
//
Light
OVD
(hologram visualization) - 8850,
RPRM_Light_IR_Bottom
= RPRM_Light_Transmitted_IR, // Light
IR Bottom (mod. 8304),
RPRM_Light_White_Bottom
= RPRM_Light_Transmitted,
//
Light
White Bottom (mod. 8304)
RPRM_Light_UVC
= 0x00080000, // Light UVС 254 (88X0
devices)
RPRM_Light_UVB
= 0x00100000, // Light UVB 313 (88X0
devices
RPRM_Light_White_Obl
= 0x00200000, // Light oblique white
RPRM_Light_White_Special
= 0x00400000, // Light White (special
light source)
Значение констант:
• RPRM_Light_OFF

Отсутствие включенной схемы освещения;
101Программные средства SDK
• RPRM_Light_OVIСхема OVI;
• RPRM_Light_White_TopВерхний/нижний осветители схемы белого света;
• RPRM_Light_White_SideБоковые осветители схемы белого света;
• RPRM_Light_White_Front
Схема общего белого света, без возможности
раздельного управления боковыми и верхним/нижним осветителями;
• RPRM_Light_IR_TopВерхний/нижний осветители схемы ИК-света;
• RPRM_Light_IR_SideБоковые осветители схемы ИК-света;
Схема общего ИК-света без
раздельного управления боковыми и верхним/нижним осветителями;
• RPRM_Light_IR_Front
возможности
• RPRM_Light_White_GrayСхема общего белого света, переведенного в градации
серого;
• RPRM_Light_OVDСхема OVD для визуализации голограмм;
Схема видеодетекции, только для служебного
• RPRM_Light_Videodetection
использования;
• RPRM_Light_UVСхема общего УФ-света;
• RPRM_Light_IR_LuminescenceИК-люминесценция;
• RPRM_Light_AXIAL_White_LeftЛевый осветитель схемы белого коаксиального
света;
• RPRM_Light_AXIAL_White_Right
Правый осветитель схемы белого коаксиального
света;
Схема общего белого коаксиального света
без возможности раздельного управления левым и правым осветителями;
• RPRM_Light_AXIAL_White_Front
• RPRM_Light_IR_720ИК720;
• RPRM_Light_IR_940ИК940;
• RPRM_Light_White_FullВерхний/нижний и боковые осветители схемы
белого света;
102
Программные средства SDK
• RPRM_Light_IR_Full
Верхний/нижний и боковые осветители схемы ИК
света;
• RPRM_Light_AXIAL_White_Full Левый и правый осветители схемы белого
коаксиального света;
• RPRM_Light_IR_Bottom
Зарезервированодлявнутреннего
Зарезервированодлявнутреннего
использования;
• RPRM_Light_White_Bottom
использования;
• RPRM_Light_RAW_Data_xxx
Зарезервировано
для
внутреннего
использования;
• RPRM_Light_TransmittedПросветный;
• RPRM_Light_Transmitted_IRПросветный ИК;
• RPRM_Light_AntiStokesПросветный Антистокс;
• RPRM_Light_Transmitted_IR940 Просветный ИК940;
• RPRM_Light_OVD_RightOVD правый;
• RPRM_Light_OVD_LeftOVD левый;
• RPRM_Light_IR_700ИК700;
• RPRM_Light_IR_870Фронтальный ИК870 для модели 8803;
• RPRM_Light_White_OblБелый косопадающий;
• RPRM_Light_HoloOVD
свет
(визуализация
голограмм)
для
модели 8850;
• RPRM_Light_IR_870_OblКосопадающий ИК870;
• RPRM_Light_UVCУФС 254 для модели 88X0;
• RPRM_Light_UVBУФB 313 для модели 88X0;

103Программные средства SDK
• RPRM_Light_White_Special
Для внутреннего использования.
Если считыватель оборудуется схемами освещения белого и ИК-света с матричным
управлением, последующие константы определяют расположение активизируемых
источников освещения. Для указания схемы освещения (белого или ИК), к которой они будут
применены, их необходимо использовать в комбинации с одним из вышеописанных
значений.
5.4.6. eRPRM_VideoModes
Перечисление eRPRM_VideoModes содержит набор идентификаторов, определяющих
поддерживаемые видеокамерой устройства размеры получаемых изображений.
enum eRPRM_VideoModes
{
RPRM_VM_UNDEFINED = 0,
RPRM_VM_1MP
= 0x00000001,
RPRM_VM_3MP
= 0x00000002,
RPRM_VM_5MP
= 0x00000004,
RPRM_VM_3MP_MRZ
= 0x00000010,
RPRM_VM_9MP_2
= 0x00000020,
RPRM_VM_9MP
= 0x00000040,
RPRM_VM_5MP_1_3
= 0x00000080,
RPRM_VM_50MP
= 0x01000000,
RPRM_VM_50MP_3
= 0x02000000,
RPRM_VM_24MP
= 0x04000000,
RPRM_VM_24MP_1_5 = 0x08000000,
RPRM_VM_20MP
= 0x00100000,
RPRM_VM_80MP
= 0x00200000,
RPRM_VM_ID1xx_600 = 0x10000000,
RPRM_VM_300DPI
= 0x20000000,
RPRM_VM_5MP_EOS
= 0x40000000,
RPRM_VM_14MP
= 0x00000100,
RPRM_VM_FULL_HD
= 0x00000200,
RPRM_VM_10MP
= 0x00000400,
RPRM_VM_10MP_2_5 = 0x00000800,
RPRM_VM_18MP
= 0x00001000,
RPRM_VM_18MP_SB
= 0x00002000,
RPRM_VM_18MP_4X
= 0x00004000,
RPRM_VM_13MP
= 0x00008000,
RPRM_VM_13MP_Q
= 0x00010000,
RPRM_VM_13MP_H
= 0x00020000,
RPRM_VM_MAX
= RPRM_VM_14MP,
};
Значение констант:
• RPRM_VM_UNDEFINED – режим не определен;
• RPRM_VM_1MP
– поддерживается получение кадров размером 1280×1024 или
1024×768;
• RPRM_VM_3MP
– поддерживается получение кадров размером 2048×1536;
• RPRM_VM_5MP
– поддерживается получение кадров размером 2592x1944;
• RPRM_VM_3MP_MRZ – режим работы прибора типа RPRM_DeviceType_FX_8307
(1536×500);
104
Программные средства SDK
– поддерживается получение кадров размером 1744x1308;
• RPRM_VM_9MP
– поддерживается получение кадров размером 3488x2616;
• RPRM_VM_5MP_1_3
– поддерживается получение кадров размером 1296x972
(1296x968 для 7017 и 72x3 в режиме JPEG);
• RPRM_VM_50MP
– поддерживается получение кадров в разрешении 50 МП;
• RPRM_VM_50MP_3 – поддерживается получение кадров, уменьшенных до 3 МП;
• RPRM_VM_24MP
– поддерживается получение кадров в разрешении 24 МП;
• RPRM_VM_24MP_1_5 – поддерживается получение кадров, уменьшенных до 1,5
МП;
• RPRM_VM_20MP
– поддерживается получение кадров в разрешении 20 МП;
• RPRM_VM_80MP
– поддерживается получение кадров в разрешении 80 МП;
• RPRM_VM_ID1xx_600 – поддерживается получение кадров размером 600 DPI со
сканеров ID1;
• RPRM_VM_300DPI
– поддерживается получение кадров размером 300 DPI со
сканеров ID1;
• RPRM_VM_5MP_EOS – поддерживается получение кадров размером 2592x1728;
• RPRM_VM_14MP
– поддерживается получение кадров размером 4384x3288;
• RPRM_VM_FULL_HD
– поддерживается получение кадров размером 1920x1080;
• RPRM_VM_10MP
– поддерживается получение кадров размером 3664x2744;
• RPRM_VM_10MP_2_5 – поддерживается получение кадров размером 1832x1372;
• RPRM_VM_18MP
– поддерживается получение кадров размером 4896x3680;
• RPRM_VM_18MP_SB – поддерживается получение кадров размером 2448x1840;
• RPRM_VM_18MP_4X – поддерживается получение кадров размером 1224x920;
• RPRM_VM_13MP
– поддерживается получение кадров размером 4200 x 3120;
• RPRM_VM_13MP_Q
– поддерживается получение кадров размером 2100 x 1560;
• RPRM_VM_13MP_H
– поддерживается получение кадров размером 3360 x 2496;
• RPRM_VM_MAX
- для внутреннего использования.
• RPRM_VM_9MP_2
Остальные значения зарезервированы для внутреннего использования.
5.4.7. CDocFormat
Перечисление CDocFormat содержит набор идентификаторов, определяющих
геометрический формат документов в соответствии с ISO/IEC 7810.
enum CDocFormat
{
dfID1
=
dfID2
=
dfID3
=
dfNON
=
dfA4
=
dfID3_x2
=
dfID2_Turkey=
dfID1_90
=
dfID1_180
=
dfID1_270
=
dfID2_180
=
dfID3_180
=
dfCustom
=
dfPhoto
=
0,
1,
2,
3,
4,
5,
6,
10,
11,
12,
13,
14,
1000,
1001,

105Программные средства SDK
};
dfFlexible = 1002
dfUnknown = -1
Значение констант:
• dfID1
– документ формата ID1;
• dfID2
– документ формата ID2;
• dfID3
– документ формата ID3;
• dfNON
– формат документа не определен;
• dfA4
– документ формата A4;
• dfID3_x2 – двойной документ формата ID3;
• dfID2_Turkey– турецкая карта формата ID2;
• dfID1_90 – документ формата ID1, повернут на 90°;
• dfID1_180 – документ формата ID1, повернут на 180°;
• dfID1_270 – документ формата ID1, повернут на 270°;
• dfID2_90 – документ формата ID2, повернут на 90°;
• dfID3_180 – документ формата ID3, повернут на 180°;
• dfCustom – документ
неопределенного
формата,
для
внутреннего
использования;
• dfPhoto – фотография;
• dfFlexible
– неформатный документ, для внутреннего использования;
• dfUnknown
– неизвестный формат документа.
5.4.8. eRPRM_Capabilities
Перечисление eRPRM_Capabilities содержит идентификаторы, определяющие
комбинацию возможностей главной управляющей библиотеки SDK по получению
и обработке данных.
enum eRPRM_Capabilities
{
RPRM_Capabilities_Empty
RPRM_Capabilities_Scan
RPRM_Capabilities_SaveFiles
RPRM_Capabilities_LocateDocument
RPRM_Capabilities_MRZ_OCR
RPRM_Capabilities_Visual_OCR
RPRM_Capabilities_BarCodes
RPRM_Capabilities_MRZ_TestQuality
RPRM_Capabilities_FDS
RPRM_Capabilities_ImageDistortionCompensation
RPRM_Capabilities_OCR_Analyze
RPRM_Capabilities_Authenticity
RPRM_Capabilities_RAW_ImageData
RPRM_Capabilities_RAW_CustomDemosaic
RPRM_Capabilities_DocumentType
RPRM_Capabilities_Visual_Graphics
RPRM_Capabilities_Expert_Analyze
RPRM_Capabilities_ColorCompensation
RPRM_Capabilities_BarcodesExtended
RPRM_Capabilities_GlareCompensation
RPRM_Capabilities_RFID
RPRM_Capabilities_BankCard
RPRM_Capabilities_LiveFaceComparison
RPRM_Capabilities_ProcessImages
RPRM_Capabilities_Custom2
RPRM_Capabilities_Custom3
106
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
0x00000000,
0x00000001,
0x00000002,
0x00000004,
0x00000008,
0x00000010,
0x00000020,
0x00000040,
0x00000080,
0x00000100,
0x00000200,
0x00000400,
0x00000800,
0x00001000,
0x00002000,
0x00004000,
0x00008000,
0x00010000,
0x00020000,
0x00040000,
0x00080000,
0x00100000,
0x00200000,
0x10000000,
0x20000000,
0x40000000,
Программные средства SDK
};
RPRM_Capabilities_Custom4
RPRM_Capabilities_Max
RPRM_Capabilities_ServerSideRFID
= 0x80000000,
= 0xFFFFFFFF,
= 0x02000000
Значение констант:
• RPRM_Capabilities_Empty
пуст;Набор функциональных возможностей
• RPRM_Capabilities_ScanДоступно сканирование изображений;
Доступно
графических файлов для получаемых изображений;
• RPRM_Capabilities_SaveFiles
формирование
образов
• RPRM_Capabilities_LocateDocument Доступна
процедура
нахождения
документа на отсканированных изображениях и формирования результирующих
изображений документа, вырезанных по найденным границам, с проведенной
компенсацией неравномерности освещения и коррекцией цветового баланса;
• RPRM_Capabilities_MRZ_OCR
ДоступнапроцедурачтенияМСЗ
Доступнапроцедурачтениязон
документа;
• RPRM_Capabilities_Visual_OCR
заполнения документа;
• RPRM_Capabilities_BarCodes
Доступна процедура поиска и чтения
штрихкодов;
• RPRM_Capabilities_MRZ_TestQuality Доступна процедура оценки качества
заполнения МСЗ;
• RPRM_Capabilities_FDS
Доступна совместная работа с ИСС;
• RPRM_Capabilities_ImageDistortionCompensation
Доступна
процедура
коррекции геометрических искажений изображений;
Доступна процедура лексического
анализа результатов чтения текстовых данных МСЗ, зоны заполнения документа,
штрихкодов, данных из памяти RFID-микросхемы;
• RPRM_Capabilities_OCR_Analyze
Доступна
подлинности документа по получаемым изображениям;
• RPRM_Capabilities_Authenticity

процедура
оценки
107Программные средства SDK
• RPRM_Capabilities_RAW_ImageData
Есть
возможность
получать
необработанные данные с видеочипа;
Доступна библиотека для
проведения внешнего демозаика необработанных картинок с видеочипа;
• RPRM_Capabilities_RAW_CustomDemosaic
• RPRM_Capabilities_DocumentType
Доступна процедура определения типа
документа;
• RPRM_Capabilities_Visual_Graphics Доступна
процедура
вырезания
графических полей из визуальной зоны документа;
• RPRM_Capabilities_Expert_AnalyzeНе используется;
• RPRM_Capabilities_ColorCompensationНе используется;
• RPRM_Capabilities_BarcodesExtendedНе используется;
• RPRM_Capabilities_GlaresCompensation Не используется;
• RPRM_Capabilities_RFIDНе используется;
• RPRM_Capabilities_BankCardНе используется;
Сравнение фото с камеры и
или из внешнего источника с фото на документе. Необходим отдельный сервис;
• RPRM_Capabilities_LiveFaceComparison
• RPRM_Capabilities_ProcessImages
Обработка внешних изображений (см.
RPRM_Command_ProcessImagesList);
• RPRM_Capabilities_Max
Все значения.
Повторная обработка RFID
(аутентификация чипа и активная аутентификация).
• RPRM_Capabilities_ServerSideRFID
чипа
5.4.9. eRPRM_GetImage_Modes
Перечисление eRPRM_GetImage_Modes содержит идентификаторы, определяющие
комбинацию функций получения и обработки изображений, которую необходимо
выполнить в ходе цикла сканирования и обработки, и набор данных, которые
необходимо получить в качестве результата.
108
Программные средства SDK
enum eRPRM_GetImage_Modes
{
RPRM_GetImage_Modes_Empty
= 0x00000000,
RPRM_GetImage_Modes_GetUncroppedImages = 0x00000001,
RPRM_GetImage_Modes_ReceiveAllScannedImages = 0x00000002,
RPRM_GetImage_Modes_OCR_Visual_Graphics = 0x00000004,
RPRM_GetImage_Modes_GetImages
= 0x00000008,
RPRM_GetImage_Modes_LocateDocument
= 0x00000010,
RPRM_GetImage_Modes_DocumentType
= 0x00000020,
RPRM_GetImage_Modes_OCR_MRZ
= 0x00000040,
RPRM_GetImage_Modes_OCR_Visual_Text
= 0x00000080,
RPRM_GetImage_Modes_OCR_Visual
=
RPRM_GetImage_Modes_OCR_Visual_Graphics|
RPRM_GetImage_Modes_OCR_Visual_Text,
RPRM_GetImage_Modes_OCR_BarCodes
= 0x00000100,
RPRM_GetImage_Modes_Authenticity
= 0x00000200,
RPRM_GetImage_Modes_OCR_TestMRZQuality
= 0x00000400,
RPRM_GetImage_Modes_RAW_Data
= 0x00000800,
RPRM_GetImage_Modes_RAW_Data_Only
= 0x00001000,
RPRM_GetImage_Modes_NoColorCompensation = 0x00002000,
RPRM_GetImage_Modes_NoDistortionCompensation
= 0x00004000,
RPRM_GetImage_Modes_DetectDocument
= 0x00008000,
RPRM_GetImage_Modes_ImageQA
= 0x00010000,
RPRM_GetImage_Modes_Holo
= 0x00020000,
RPRM_GetImage_Modes_FaceDetect
= 0x00040000,
RPRM_GetImage_Modes_Reserved11
= 0x00080000,
RPRM_GetImage_Modes_Reserved12
= 0x00100000,
RPRM_GetImage_Modes_Reserved13
= 0x00200000,
RPRM_GetImage_Modes_Reserved14
= 0x00400000,
RPRM_GetImage_Modes_Reserved15
= 0x00800000,
RPRM_GetImage_Modes_Reserved16
= 0x01000000,
RPRM_GetImage_Modes_Reserved17
= 0x02000000,
RPRM_GetImage_Modes_Reserved18
= 0x04000000,
RPRM_GetImage_Modes_Reserved19
= 0x08000000,
RPRM_GetImage_Modes_Custom1
= 0x10000000,
RPRM_GetImage_Modes_Custom2
= 0x20000000,
RPRM_GetImage_Modes_Custom3
= 0x40000000,
RPRM_GetImage_Modes_Custom4
= 0x80000000
};
Значение констант:
• RPRM_GetImage_Modes_Empty
без получения каких-либо результатов;
«Холостой» цикл сканирования
НЕ
Необходимо получить необработанные изображения документа;
• RPRM_GetImage_Modes_GetUncroppedImages
ИСПОЛЬЗУЕТСЯ.
Необходимо
документа с учетом процесса
• RPRM_GetImage_Modes_ReceiveAllScannedImages
получить все отсканированные
дополнительного сканирования;
изображения
• RPRM_GetImage_Modes_OCR_Visual_Graphics
Необходимо
получить
графические поля с визуальной страницы;

109Программные средства SDK
Необходимо
получить
изображения документа, принятые для схем освещения, входящих в текущий список
схем освещения для сканирования;
• RPRM_GetImage_Modes_GetImages
Необходимо
провести
процедуру нахождения документа на отсканированных изображениях, формирования
результирующих изображений документа, вырезанных по найденным границам,
с проведенной компенсацией неравномерности освещения и коррекцией цветового
баланса.
• RPRM_GetImage_Modes_LocateDocument
• RPRM_GetImage_Modes_DocumentType
Необходимопровести
Необходимопровести
процедуру определения типа документа;
• RPRM_GetImage_Modes_OCR_MRZ
процедуру чтения МСЗ документа;
Необходимо
процедуру чтения информации из текстовых полей заполнения документа;
• RPRM_GetImage_Modes_OCR_Visual_Text
провести
Необходимо
провести
процедуру чтения информации из текстовых и графических полей заполнения
документа;
• RPRM_GetImage_Modes_OCR_Visual
• RPRM_GetImage_Modes_OCR_BarCodes
Необходимо
провести
процедуру поиска и чтения штрихкодов;
Необходимо
провести
процедуру контроля подлинности документа по получаемым изображениям;
• RPRM_GetImage_Modes_Authenticity
Необходимо
процедуру контроля качества заполнения МСЗ документа;
• RPRM_GetImage_Modes_OCR_TestMRZQuality
• RPRM_GetImage_Modes_RAW_Data
провести
НЕИСПОЛЬЗУЕТСЯ.
НЕИСПОЛЬЗУЕТСЯ.
Необходимо получить RAW-данные;
• RPRM_GetImage_Modes_RAW_Data_Only
Необходимо получить только RAW-данные;
• RPRM_GetImage_Modes_NoColorCompensation Необходимо
компенсацию яркости;
110
отключить
Программные средства SDK
• RPRM_GetImage_Modes_NoDistortionCompensation
отключить компенсацию дисторсии;
Необходимо
Необходимо получить границы
• RPRM_GetImage_Modes_DetectDocument
документа;
• RPRM_GetImage_Modes_ImageQA
Необходимо
провести
проверку качества входного изображения (только при обработке ранее полученных
изображений);
Зарезервировано.
• RPRM_GetImage_Modes_Holo
• RPRM_GetImage_Modes_FaceDetect
(Переименован
из
RPRM_GetImage_Modes_Reserved10). Необходимо провести поиск лиц. Не используется
в PasspR40.dll.
•
5.4.10. eRPRM_FieldVerificationResult
Перечисление eRPRM_FieldVerificationResult содержит идентификаторы,
определяющие статус проверки и сравнения текстовых полей.
enum eRPRM_FieldVerificationResult
{
RCF_Disabled
= 0,
RCF_Verified
= 1,
RCF_Not_Verified
= 2,
RCF_Compare_True
= 3,
RCF_Compare_False
= 4
};
Значения имеют следующий смысл:
• RCF_Disabled – проверка не проводилась, результат не определен;
• RCF_Verified – проверка прошла успешно;
• RCF_Not_Verified – проверка не прошла;
• RCF_Compare_True – положительный результат сравнения;
• RCF_Compare_False – отрицательный результат сравнения.
5.4.11. eVisualFieldType
Перечисление eVisualFieldType содержит идентификаторы, определяющие
логический тип текстовых данных, полученных при распознавании МСЗ или
штрихкодов, чтении полей заполнения документа.
enum eVisualFieldType
{
ft_Document_Class_Code
ft_Issuing_State_Code
ft_Document_Number
ft_Date_of_Expiry
ft_Date_of_Issue
ft_Date_of_Birth

=
=
=
=
=
=
0,
1,
2,
3,
4,
5,
111Программные средства SDK
ft_Place_of_Birth
ft_Personal_Number
ft_Surname
ft_Given_Names
ft_Mothers_Name
ft_Nationality
ft_Sex
ft_Height
ft_Weight
ft_Eyes_Color
ft_Hair_Color
ft_Address
ft_Donor
ft_Social_Security_Number
ft_DL_Class
ft_DL_Endorsed
ft_DL_Restriction_Code
ft_DL_Under_21_Date
ft_Authority
ft_Surname_And_Given_Names
ft_Nationality_Code
ft_Passport_Number
ft_Invitation_Number
ft_Visa_ID
ft_Visa_Class
ft_Visa_SubClass
ft_MRZ_String1
ft_MRZ_String2
ft_MRZ_String3
ft_MRZ_Type
ft_Optional_Data
ft_Document_Class_Name
ft_Issuing_State_Name
ft_Place_of_Issue
ft_Document_Number_Checksum
ft_Date_of_Birth_Checksum
ft_Date_of_Expiry_Checksum
ft_Personal_Number_Checksum
ft_FinalChecksum
ft_Passport_Number_Checksum
ft_Invitation_Number_Checksum
ft_Visa_ID_Checksum
ft_Surname_And_Given_Names_Checksum
ft_Visa_Valid_Until_Checksum
ft_Other
ft_MRZ_Strings
ft_Name_Suffix
ft_Name_Prefix
ft_Date_of_Issue_Checksum
ft_Date_of_Issue_CheckDigit
ft_Document_Series
ft_RegCert_RegNumber
ft_RegCert_CarModel
ft_RegCert_CarColor
ft_RegCert_BodyNumber
ft_RegCert_CarType
ft_RegCert_MaxWeight
ft_Reg_Cert_Weight
ft_Address_Area
ft_Address_State
ft_Address_Building
ft_Address_House
ft_Address_Flat
ft_Place_of_Registration
ft_Date_of_Registration
ft_Resident_From
ft_Resident_Until
ft_Authority_Code
ft_Place_of_Birth_Area
ft_Place_of_Birth_StateCode
ft_Address_Street
ft_Address_City
ft_Address_Jurisdiction_Code
ft_Address_Postal_Code
ft_Document_Number_CheckDigit
ft_Date_of_Birth_CheckDigit
ft_Date_of_Expiry_CheckDigit
ft_Personal_Number_CheckDigit
ft_FinalCheckDigit
ft_Passport_Number_CheckDigit
ft_Invitation_Number_CheckDigit
ft_Visa_ID_CheckDigit
ft_Surname_And_Given_Names_CheckDigit
ft_Visa_Valid_Until_CheckDigit
112
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
23,
24,
25,
26,
27,
28,
29,
30,
31,
32,
33,
34,
35,
36,
37,
38,
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
51,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
63,
64,
65,
66,
67,
68,
69,
70,
71,
72,
73,
74,
75,
76,
77,
78,
79,
80,
81,
82,
83,
84,
85,
86,
87,
88,
89,
Программные средства SDK
ft_Permit_DL_Class
ft_Permit_Date_of_Expiry
ft_Permit_Identifier
ft_Permit_Date_of_Issue
ft_Permit_Restriction_Code
ft_Permit_Endorsed
ft_Issue_Timestamp
ft_Number_of_Duplicates
ft_Medical_Indicator_Codes
ft_Non_Resident_Indicator
ft_Visa_Type
ft_Visa_Valid_From
ft_Visa_Valid_Until
ft_Duration_of_Stay
ft_Number_of_Entries
ft_Day
ft_Month
ft_Year
ft_Unique_Customer_Identifier
ft_Commercial_Vehicle_Codes
ft_AKA_Date_of_Birth
ft_AKA_Social_Security_Number
ft_AKA_Surname
ft_AKA_Given_Names
ft_AKA_Name_Suffix
ft_AKA_Name_Prefix
ft_Mailing_Address_Street
ft_Mailing_Address_City
ft_Mailing_Address_Jurisdiction_Code
ft_Mailing_Address_Postal_Code
ft_Audit_Information
ft_Inventory_Number
ft_Race_Ethnicity
ft_Jurisdiction_Vehicle_Class
ft_Jurisdiction_Endorsement_Code
ft_Jurisdiction_Restriction_Code
ft_Family_Name
ft_Given_Names_RUS
ft_Visa_ID_RUS
ft_Fathers_Name
ft_Fathers_Name_RUS
ft_Surname_And_Given_Names_RUS
ft_Place_Of_Birth_RUS
ft_Authority_RUS
ft_Issuing_State_Code_Numeric
ft_Nationality_Code_Numeric
ft_Engine_Power
ft_Engine_Volume
ft_Chassis_Number
ft_Engine_Number
ft_Engine_Model
ft_Vehicle_Category
ft_Identity_Card_Number
ft_Control_No
ft_Parrent_s_Given_Names
ft_Second_Surname
ft_Middle_Name
ft_RegCert_VIN
ft_RegCert_VIN_CheckDigit
ft_RegCert_VIN_Checksum
ft_Line1_CheckDigit
ft_Line2_CheckDigit
ft_Line3_CheckDigit
ft_Line1_Checksum
ft_Line2_Checksum
ft_Line3_Checksum
ft_RegCert_RegNumber_CheckDigit
ft_RegCert_RegNumber_Checksum
ft_RegCert_Vehicle_ITS_Code
ft_Card_Access_Number
ft_Marital_Status
ft_Company_Name
ft_Special_Notes
ft_Surname_of_Spose
ft_Tracking_Number
ft_Booklet_Number
ft_Children
ft_Copy
ft_Serial_Number
ft_Dossier_Number
ft_AKA_Surname_And_Given_Names
ft_Territorial_Validity
ft_MRZ_Strings_With_Correct_CheckSums
ft_DL_CDL_Restriction_Code

= 90,
= 91,
= 92,
= 93,
= 94,
= 95,
= 96,
= 97,
= 98,
= 99,
= 100,
= 101,
= 102,
= 103,
= 104,
= 105,
= 106,
= 107,
= 108,
= 109,
= 110,
= 111,
= 112,
= 113,
= 114,
= 115,
= 116,
= 117,
= 118,
= 119,
= 120,
= 121,
= 122,
= 123,
= 124,
= 125,
= 126,
= 127,
= 128,
= 129,
= 130,
= 131,
= 132,
= 133,
= 134,
= 135,
= 136,
= 137,
= 138,
= 139,
= 140,
= 141,
= 142,
= 143,
= 144,
= 145,
= 146,
= 147,
= 148,
= 149,
= 150,
= 151,
= 152,
= 153,
= 154,
= 155,
= 156,
= 157,
= 158,
= 159,
= 160,
= 161,
= 162,
= 163,
= 164,
= 165,
= 166,
= 167,
= 168,
= 169,
= 170,
= 171,
= 172,
= 173,
113Программные средства SDK
ft_DL_Under_18_Date
ft_DL_Record_Created
ft_DL_Duplicate_Date
ft_DL_Iss_Type
ft_Military_Book_Number
ft_Destination
ft_Blood_Group
ft_Sequence_Number
ft_RegCert_BodyType
ft_RegCert_CarMark
ft_Transaction_Number
ft_Age
ft_Folio_Number
ft_Voter_Key
ft_Address_Municipality
ft_Address_Location
ft_Section
ft_OCR_Number
ft_Federal_Elections
ft_Reference_Number
ft_Optional_Data_Checksum
ft_Optional_Data_CheckDigit
ft_Visa_Number
ft_Visa_Number_Checksum
ft_Visa_Number_CheckDigit
ft_Voter
ft_Previous_Type
ft_FieldFromMRZ
ft_CurrentDate
ft_Status_Date_of_Expiry
ft_Bancnote_Number
ft_CSC_Code
ft_Artistic_Name
ft_Academic_Title
ft_Address_Country
ft_Address_Zipcode
ft_eID_Residence_Permit1
ft_eID_Residence_Permit2
ft_eID_PlaceOfBirth_Street
ft_eID_PlaceOfBirth_City
ft_eID_PlaceOfBirth_State
ft_eID_PlaceOfBirth_Country
ft_eID_PlaceOfBirth_Zipcode
ft_CDL_Class
ft_DL_Under_19_Date
ft_Weight_pounds
ft_Limited_Duration_Document_Indicator
ft_Endorsement_Expiration_Date
ft_Revision_Date
ft_Compliance_Type
ft_Family_name_truncation
ft_First_name_truncation
ft_Middle_name_truncation
ft_Exam_Date
ft_Organization
ft_Department
ft_Pay_Grade
ft_Rank
ft_Benefits_Number
ft_Sponsor_Service
ft_Sponsor_Status
ft_Sponsor
ft_Relationship
ft_USCIS
ft_Category
ft_Conditions
ft_Identifier
ft_Configuration
ft_Discretionary_data
ft_Line1_Optional_Data
ft_Line2_Optional_Data
ft_Line3_Optional_Data
ft_EQV_Code
ft_ALT_Code
ft_Binary_Code
ft_Pseudo_Code
ft_Fee
ft_Stamp_Number
ft_SBH_SecurityOptions
ft_SBH_IntegrityOptions
ft_Date_of_Creation
ft_Validity_Period
ft_Patron_Header_Version
ft_BDB_Type
114
= 174,
= 175,
= 176,
= 177,
= 178,
= 179,
= 180,
= 181,
= 182,
= 183,
= 184,
= 185,
= 186,
= 187,
= 188,
= 189,
= 190,
= 191,
= 192,
= 193,
= 194,
= 195,
= 196,
= 197,
= 198,
= 199,
= 200,
= 220,
= 221,
= 251,
= 252,
= 253,
= 254,
= 255,
= 256,
= 257,
= 258,
= 259,
= 260,
= 261,
= 262,
= 263,
= 264,
= 265,
= 266,
= 267,
= 268,
= 269,
= 270,
= 271,
= 272,
= 273,
= 274,
= 275,
= 276,
= 277,
= 278,
= 279,
= 280,
= 281,
= 282,
= 283,
= 284,
= 285,
= 286,
= 287,
= 288,
= 289,
= 290,
= 291,
= 292,
= 293,
= 294,
= 295,
= 296,
= 297,
= 298,
= 299,
= 300,
= 301,
= 302,
= 303,
= 304,
= 305,
Программные средства SDK
ft_Biometric_Type
= 306,
ft_Biometric_Subtype
= 307,
ft_Biometric_ProductID
= 308,
ft_Biometric_Format_Owner
= 309,
ft_Biometric_Format_Type
= 310,
ft_Phone
= 311,
ft_Profession
= 312,
ft_Title
= 313,
ft_Personal_Summary
= 314,
ft_Other_Valid_ID
= 315,
ft_Custody_Info
= 316,
ftOther_Name
= 317,
ft_Observations
= 318,
ft_Tax
= 319,
ft_Date_of_Personalization
= 320,
ft_Personalization_SN
= 321,
ft_OtherPerson_Name
= 322,
ft_PersonToNotify_Date_of_Record
= 323,
ft_PersonToNotify_Name
= 324,
ft_PersonToNotify_Phone
= 325,
ft_PersonToNotify_Address
= 326,
ft_DS_Certificate_Issuer
= 327,
ft_DS_Certificate_Subject
= 328,
ft_DS_Certificate_ValidFrom
= 329,
ft_DS_Certificate_ValidTo
= 330,
ft_VRC_DataObject_Entry
= 331,
ft_TypeApprovalNumber
= 332,
ft_AdministrativeNumber
= 333,
ft_DocumentDiscriminator
= 334,
ft_DataDiscriminator
= 335,
ft_ISO_Issuer_ID_Number
= 336,
ft_DTC_Version
= 337,
ft_DTC_ID
= 338,
ft_DTC_ DateOfExpiry
= 339,
ft_GNIB_Number
= 340,
ft_Dept_Number
= 341,
ft_Telex_Code
= 342,
ft_Allergies
= 343,
ft_Sp_Code
= 344,
ft_Court_Code
= 345,
ft_Cty
= 346,
ft_Sponsor_SSN
= 347,
ft_DoD_Number
= 348,
ft_MC_Novice_Date
= 349,
ft_DUF_Number
= 350,
ft_AGY
= 351,
ft_PNR_Code
= 352,
ft_From_Airport_Code
= 353,
ft_To_Airport_Code
= 354,
ft_Flight_Number
= 355,
ft_Date_of_Flight
= 356,
ft_Seat_Number
= 357,
ft_Date_of_Issue_Boarding_Pass
= 358,
ft_CCW_Until
= 359,
ft_Reference_Number_Checksum
= 360,
ft_Reference_Number_CheckDigit
= 361,
ft_Room_Number
= 362,
ft_Religion
= 363,
ft_RemainderTerm
= 364,
ft_Electronic_Ticket_Indicator
= 365,
ft_Compartment_Code
= 366,
ft_CheckIn_Sequence_Number
= 367,
ft_Airline_Designator_of_boarding_pass_issuer = 368,
ft_Airline_Numeric_Code
= 369,
ft_Ticket_Number
= 370,
ft_Frequent_Flyer_Airline_Designator = 371,
ft_Frequent_Flyer_Number
= 372,
ft_Free_Baggage_Allowance
= 373,
ft_PDF417Codec
= 374,
ft_Identity_Card_Number_Checksum
= 375,
ft_Identity_Card_Number_CheckDigit
= 376,
ft_Veteran
= 377,
ft_DLClassCode_A1_From
= 378,
ft_DLClassCode_A1_To
= 379,
ft_DLClassCode_A1_Notes
= 380,
ft_DLClassCode_A_From
= 381,
ft_DLClassCode_A_To
= 382,
ft_DLClassCode_A_Notes
= 383,
ft_DLClassCode_B_From
= 384,
ft_DLClassCode_B_To
= 385,
ft_DLClassCode_B_Notes
= 386,
ft_DLClassCode_C1_From
= 387,
ft_DLClassCode_C1_To
= 388,
ft_DLClassCode_C1_Notes
= 389,

115Программные средства SDK
ft_DLClassCode_C_From
= 390,
ft_DLClassCode_C_To
= 391,
ft_DLClassCode_C_Notes
= 392,
ft_DLClassCode_D1_From
= 393,
ft_DLClassCode_D1_To
= 394,
ft_DLClassCode_D1_Notes
= 395,
ft_DLClassCode_D_From
= 396,
ft_DLClassCode_D_To
= 397,
ft_DLClassCode_D_Notes
= 398,
ft_DLClassCode_BE_From
= 399,
ft_DLClassCode_BE_To
= 400,
ft_DLClassCode_BE_Notes
= 401,
ft_DLClassCode_C1E_From
= 402,
ft_DLClassCode_C1E_To
= 403,
ft_DLClassCode_C1E_Notes
= 404,
ft_DLClassCode_CE_From
= 405,
ft_DLClassCode_CE_To
= 406,
ft_DLClassCode_CE_Notes
= 407,
ft_DLClassCode_D1E_From
= 408,
ft_DLClassCode_D1E_To
= 409,
ft_DLClassCode_D1E_Notes
= 410,
ft_DLClassCode_DE_From
= 411,
ft_DLClassCode_DE_To
= 412,
ft_DLClassCode_DE_Notes
= 413,
ft_DLClassCode_M_From
= 414,
ft_DLClassCode_M_To
= 415,
ft_DLClassCode_M_Notes
= 416,
ft_DLClassCode_L_From
= 417,
ft_DLClassCode_L_To
= 418,
ft_DLClassCode_L_Notes
= 419,
ft_DLClassCode_T_From
= 420,
ft_DLClassCode_T_To
= 421,
ft_DLClassCode_T_Notes
= 422,
ft_DLClassCode_AM_From
= 423,
ft_DLClassCode_AM_To
= 424,
ft_DLClassCode_AM_Notes
= 425,
ft_DLClassCode_A2_From
= 426,
ft_DLClassCode_A2_To
= 427,
ft_DLClassCode_A2_Notes
= 428,
ft_DLClassCode_B1_From
= 429,
ft_DLClassCode_B1_To
= 430,
ft_DLClassCode_B1_Notes
= 431,
ft_Surname_at_Birth
= 432,
ft_Civil_Status
= 433,
ft_Number_of_Seats
= 434,
ft_Number_of_Standing_Places
= 435,
ft_Max_Speed
= 436,
ft_Fuel_Type
= 437,
ft_EC_Environmental_Type
= 438,
ft_Power_Weight_Ratio
= 439,
ft_Max_Mass_of_Trailer_Braked
= 440,
ft_Max_Mass_of_Trailer_Unbraked
= 441,
ft_Transmission_Type
= 442,
ft_Trailer_Hitch
= 443,
ft_Accompanied_by
= 444,
ft_Police_District
= 445,
ft_First_Issue_Date
= 446,
ft_Payload_Capacity
= 447,
ft_Number_of_Axels
= 448,
ft_Permissible_Axle_Load
= 449,
ft_Precinct
= 450,
ft_Invited_by
= 451,
ft_Purpose_of_Entry
= 452,
ft_Skin_Color
= 453,
ft_Complexion
= 454,
ft_Airport_From
= 455,
ft_Airport_To
= 456,
ft_Airline_Name
= 457,
ft_Airline_Name_Frequent_Flyer
= 458,
ft_License_Number
= 459,
ft_In_Tanks
= 460,
ft_Exept_In_Tanks
= 461,
ft_Fast_Track
= 462,
ft_Owner
= 463,
ft_MRZ_Strings_ICAO_RFID
= 464,
ft_Number_of_Card_Issuance
= 465,
ft_Number_of_Card_Issuance_Checksum
= 466,
ft_Number_of_Card_Issuance_CheckDigit = 467,
ft_Century_Date_of_Birth
= 468,
ft_DLClassCode_A3_From
= 469,
ft_DLClassCode_A3_To
= 470,
ft_DLClassCode_A3_Notes
= 471,
ft_DLClassCode_C2_From
= 472,
ft_DLClassCode_C2_To
= 473,
116
Программные средства SDK
ft_DLClassCode_C2_Notes
ft_DLClassCode_B2_From
ft_DLClassCode_B2_To
ft_DLClassCode_B2_Notes
ft_DLClassCode_D2_From
ft_DLClassCode_D2_To
ft_DLClassCode_D2_Notes
ft_DLClassCode_B2E_From
ft_DLClassCode_B2E_To
ft_DLClassCode_B2E_Notes
ft_DLClassCode_G_From
ft_DLClassCode_G_To
ft_DLClassCode_G_Notes
ft_DLClassCode_J_From
ft_DLClassCode_J_To
ft_DLClassCode_J_Notes
ft_DLClassCode_LC_From
ft_DLClassCode_LC_To
ft_DLClassCode_LC_Notes
ft_BankCardNumber
ft_BankCardValidThru
ft_TaxNumber
ft_HealthNumber
ft_GrandfatherName
ft_Selectee_Indicator
ft_Mother_Surname
ft_Mother_GivenName
ft_Father_Surname
ft_Father_GivenName
ft_Mother_DateOfBirth
ft_Father_DateOfBirth
ft_Mother_PersonalNumber
ft_Father_PersonalNumber
ft_Mother_PlaceOfBirth
ft_Father_PlaceOfBirth
ft_Mother_CountryOfBirth
ft_Father_CountryOfBirth
ft_Date_First_Renewal
ft_Date_Second_Renewal
ft_PlaceOfExamination
ft_ApplicationNumber
ft_VoucherNumber
ft_AuthorizationNumber
ft_Faculty
ft_FormOfEducation
ft_DNINumber
ft_RetirementNumber
ft_ProfessionalIdNumber
ft_Age_at_Issue
ft_Years_Since_Issue
ft_DLClassCode_BTP_From
ft_DLClassCode_BTP_Notes
ft_DLClassCode_BTP_To
ft_DLClassCode_C3_From
ft_DLClassCode_C3_Notes
ft_DLClassCode_C3_To
ft_DLClassCode_E_From
ft_DLClassCode_E_Notes
ft_DLClassCode_E_To
ft_DLClassCode_F_From
ft_DLClassCode_F_Notes
ft_DLClassCode_F_To
ft_DLClassCode_FA_From
ft_DLClassCode_FA_Notes
ft_DLClassCode_FA_To
ft_DLClassCode_FA1_From
ft_DLClassCode_FA1_Notes
ft_DLClassCode_FA1_To
ft_DLClassCode_FB_From
ft_DLClassCode_FB_Notes
ft_DLClassCode_FB_To
ft_DLClassCode_G1_From
ft_DLClassCode_G1_Notes
ft_DLClassCode_G1_To
ft_DLClassCode_H_From
ft_DLClassCode_H_Notes
ft_DLClassCode_H_To
ft_DLClassCode_I_From
ft_DLClassCode_I_Notes
ft_DLClassCode_I_To
ft_DLClassCode_K_From
ft_DLClassCode_K_Notes
ft_DLClassCode_K_To
ft_DLClassCode_LK_From

= 474,
= 475,
= 476,
= 477,
= 478,
= 479,
= 480,
= 481,
= 482,
= 483,
= 484,
= 485,
= 486,
= 487,
= 488,
= 489,
= 490,
= 491,
= 492,
= 493,
= 494,
= 495,
= 496,
= 497,
= 498,
= 499,
= 500,
= 501,
= 502,
= 503,
= 504,
= 505,
= 506,
= 507,
= 508,
= 509,
= 510,
= 511,
= 512,
= 513,
= 514,
= 515,
= 516,
= 517,
= 518,
= 519,
= 520,
= 521,
= 522,
= 523,
= 524,
= 525,
= 526,
= 527,
= 528,
= 529,
= 530,
= 531,
= 532,
= 533,
= 534,
= 535,
= 536,
= 537,
= 538,
= 539,
= 540,
= 541,
= 542,
= 543,
= 544,
= 545,
= 546,
= 547,
= 548,
= 549,
= 550,
= 551,
= 552,
= 553,
= 554,
= 555,
= 556,
= 557,
117Программные средства SDK
ft_DLClassCode_LK_Notes
= 558,
ft_DLClassCode_LK_To
= 559,
ft_DLClassCode_N_From
= 560,
ft_DLClassCode_N_Notes
= 561,
ft_DLClassCode_N_To
= 562,
ft_DLClassCode_S_From
= 563,
ft_DLClassCode_S_Notes
= 564,
ft_DLClassCode_S_To
= 565,
ft_DLClassCode_TB_From
= 566,
ft_DLClassCode_TB_Notes
= 567,
ft_DLClassCode_TB_To
= 568,
ft_DLClassCode_TM_From
= 569,
ft_DLClassCode_TM_Notes
= 570,
ft_DLClassCode_TM_To
= 571,
ft_DLClassCode_TR_From
= 572,
ft_DLClassCode_TR_Notes
= 573,
ft_DLClassCode_TR_To
= 574,
ft_DLClassCode_TV_From
= 575,
ft_DLClassCode_TV_Notes
= 576,
ft_DLClassCode_TV_To
= 577,
ft_DLClassCode_V_From
= 578,
ft_DLClassCode_V_Notes
= 579,
ft_DLClassCode_V_To
= 580,
ft_DLClassCode_W_From
= 581,
ft_DLClassCode_W_Notes
= 582,
ft_DLClassCode_W_To
= 583,
ft_URL
= 584,
ft_Caliber
= 585,
ft_Model
= 586,
ft_Make
= 587,
ft_NumberOfCylinders
= 588,
ft_SurnameOfHusbandAfterRegistration = 589,
ft_SurnameOfWifeAfterRegistration
= 590,
ft_DateOfBirthOfWife
= 591,
ft_DateOfBirthOfHusband
= 592,
ft_CitizenshipOfFirstPerson
= 593,
ft_CitizenshipOfSecondPerson
= 594,
ft_CVV
= 595,
ft_Date_of_Insurance_Expiry
= 596,
ft_Mortgage_by
= 597,
ft_Old_Document_Number
= 598,
ft_Old_Date_of_Issue
= 599,
ft_Old_Place_of_Issue
= 600,
ft_DLClassCode_LR_From
= 601,
ft_DLClassCode_LR_To
= 602,
ft_DLClassCode_LR_Notes
= 603,
ft_DLClassCode_MR_From
= 604,
ft_DLClassCode_MR_To
= 605,
ft_DLClassCode_MR_Notes
= 606,
ft_DLClassCode_HR_From
= 607,
ft_DLClassCode_HR_To
= 608,
ft_DLClassCode_HR_Notes
= 609,
ft_DLClassCode_HC_From
= 610,
ft_DLClassCode_HC_To
= 611,
ft_DLClassCode_HC_Notes
= 612,
ft_DLClassCode_MC_From
= 613,
ft_DLClassCode_MC_To
= 614,
ft_DLClassCode_MC_Notes
= 615,
ft_DLClassCode_RE_From
= 616,
ft_DLClassCode_RE_To
= 617,
ft_DLClassCode_RE_Notes
= 618,
ft_DLClassCode_R_From
= 619,
ft_DLClassCode_R_To
= 620,
ft_DLClassCode_R_Notes
= 621,
ft_DLClassCode_CA_From
= 622,
ft_DLClassCode_CA_To
= 623,
ft_DLClassCode_CA_Notes
= 624,
ft_Citizenship_Status
= 625,
ft_Military_Service_From
= 626,
ft_Military_Service_To
= 627,
ft_DLClassCode_NT_From
= 628,
ft_DLClassCode_NT_To
= 629,
ft_DLClassCode_NT_Notes
= 630,
ft_DLClassCode_TN_From
= 631,
ft_DLClassCode_TN_To
= 632,
ft_DLClassCode_TN_Notes
= 633,
ft_DLClassCode_D3_From
= 634,
ft_DLClassCode_D3_To
= 635,
ft_DLClassCode_D3_Notes
= 636,
ft_Alt_Date_Of_Expiry
= 637,
ft_DLClassCode_CD_From
= 638,
ft_DLClassCode_CD_To
= 639,
ft_DLClassCode_CD_Notes
= 640,
ft_Issuer_Identification_Number
= 641,
118
Программные средства SDK
ft_Payment_Period_From
= 642,
ft_Payment_Period_To
= 643,
ft_VaccinationCertificateIdentifier = 644,
ft_First_Name
= 645,
ft_Date_of_Arrival
= 646,
ft_Second_Name
= 647,
ft_Third_Name
= 648,
ft_Fourth_Name
= 649,
ft_Last_Name
= 650
ft_DLClassCode_RM_From
= 651,
ft_DLClassCode_RM_Notes
= 652,
ft_DLClassCode_RM_To
= 653,
ft_DLClassCode_PW_From
= 654,
ft_DLClassCode_PW_Notes
= 655,
ft_DLClassCode_PW_To
= 656,
ft_DLClassCode_EB_From
= 657,
ft_DLClassCode_EB_Notes
= 658,
ft_DLClassCode_EB_To
= 659,
ft_DLClassCode_EC_From
= 660,
ft_DLClassCode_EC_Notes
= 661,
ft_DLClassCode_EC_To
= 662,
ft_DLClassCode_EC1_From
= 663,
ft_DLClassCode_EC1_Notes
= 664,
ft_DLClassCode_EC1_To
= 665,
ft_Place_of_Birth_City
= 666,
ft_Year_of_Birth
= 667,
ft_Year_of_Expiry
= 668,
ft_First_Surname
= 670,
ft_Month_of_Birth
= 671,
ft_Address_Floor_Number
= 672,
ft_Address_Entrance
= 673,
ft_Address_Block_Number
= 674,
ft_Address_Street_Number
= 675,
ft_Address_Street_Type
= 676,
ft_Address_City_Sector
= 677,
ft_Address_County_Type
= 678,
ft_Address_City_Type
= 679,
ft_Address_Building_Type
= 680,
ft_Date_of_Retirement
= 681,
ft_Document_Status
= 682,
ft_Signature
= 683,
ft_UniqueCertificateIdentifier
= 684,
ft_Email
= 685,
ft_Date_of_SpecimenCollection
= 686,
ft_TypeOfTesting
= 687,
ft_ResultOfTesting
= 688,
ft_MethodOfTesting
= 689,
ft_Digital_Travel_Authorization_Number = 690,
ft_Date_of_First_Positive_Test_Result = 691,
ft_EF_CardAccess
= 692
};
Логические типы полей, определяемые константами этого перечисления:
ft_Document_Class_Code
– код типа документа;
ft_Issuing_State_Code
– буквенный код государства выдачи
документа в соответствии со стандартом
ISO 3166-1 (ICAO doc 9303);
ft_Document_Number
– номер документа;
ft_Date_of_Expiry
– дата окончания срока действия
документа;
ft_Date_of_Issue
– дата выдачи документа;
ft_Date_of_Birth
– дата рождения;
ft_Place_of_Birth
– место рождения;
ft_Personal_Number
– персональный номер;
ft_Surname
– фамилия;
ft_Given_Names
– имя (имена);
ft_Mothers_Name
– имя матери;
ft_Nationality
– национальность;

119Программные средства SDK
ft_Sex
ft_Height
ft_Weight
ft_Eyes_Color
ft_Hair_Color
ft_Address
ft_Donor
ft_Social_Security_Number
ft_DL_Class
ft_DL_Endorsed
ft_DL_Restriction_Code
ft_DL_Under_21_Date
ft_Authority
ft_Surname_And_Given_Names
ft_Nationality_Code
ft_Passport_Number
ft_Invitation_Number
ft_Visa_ID
ft_Visa_Class
ft_Visa_SubClass
ft_MRZ_String1
ft_MRZ_String2
ft_MRZ_String3
ft_MRZ_Type
ft_Optional_Data
ft_Document_Class_Name
ft_Issuing_State_Name
ft_Place_of_Issue
ft_Document_Number_Checksum
ft_Date_of_Birth_Checksum
ft_Date_of_Expiry_Checksum
ft_Personal_Number_Checksum
ft_FinalChecksum
ft_Passport_Number_Checksum
120
– пол;
– рост;
– вес;
– цвет глаз;
– цвет волос
– адрес;
– отметка о донорстве;
– номер социального страхования;
– класс водительского удостоверения (ВУ);
– код разрешения для ВУ;
– код ограничения для ВУ;
– дата, когда владельцу документа
исполняется 21 год;
– орган выдачи документа;
– Ф.И.О;
– буквенный код национальности в
соответствии со стандартом
ISO 3166-1 (ICAO doc 9303);
– номер паспорта (используется в визах);
– номер приглашения (используется в
визах);
– идентификационный номер визы;
– класс визы;
– подкласс визы;
– не используется;
– не используется;
– не используется;
– тип МСЗ (машиносчитываемой зоны)
документа;
- опциональные данные;
– полное название класса документа;
– полное название государства выдачи
документа;
– место выдачи документа;
– контрольная сумма для номера
документа (рассчитывается приложением);
– контрольная сумма для даты рождения;
– контрольная сумма для даты окончания
срока действия документа;
– контрольная сумма для персонального
номера;
– общая контрольная сумма;
– контрольная сумма для номера
паспорта (используется в визах);
Программные средства SDK
ft_Invitation_Number_Checksum
ft_Visa_ID_Checksum
ft_Surname_And_Given_Names_Checksum
ft_Visa_Valid_Until_Checksum
ft_Other
ft_MRZ_Strings
ft_Name_Suffix
ft_Name_Prefix
ft_Date_of_Issue_Checksum
ft_Date_of_Issue_CheckDigit
ft_Document_Series
ft_RegCert_RegNumber
ft_RegCert_CarModel
ft_RegCert_CarColor
ft_RegCert_BodyNumber
ft_RegCert_CarType
ft_RegCert_MaxWeight
ft_Reg_Cert_Weight
ft_Address_Area
ft_Address_State
ft_Address_Building
ft_Address_House
ft_Address_Flat
ft_Place_of_Registration
ft_Date_of_Registration
ft_Resident_From
ft_Resident_Until
ft_Authority_Code
ft_Place_of_Birth_Area
ft_Place_of_Birth_StateCode
ft_Address_Street
ft_Address_City
ft_Address_Jurisdiction_Code
ft_Address_Postal_Code

– контрольная сумма для номера
приглашения (используется в визах);
– контрольная сумма для
идентификационного номера визы;
– контрольная сумма для Ф.И.О.;
– контрольная сумма для даты окончания
действия визы;
– иная информация;
– строки из МСЗ;
– суффикс имени;
– префикс имени;
– контрольная сумма для даты выдачи
документа;
– контрольная цифра для даты выдачи
документа (берется из МСЗ документа);
– cерия документа;
– регистрационный номер документа;
– модель ТС;
– цвет ТС;
– номер кузова ТС;
– тип ТС;
– разрешенная максимальная масса;
– масса ТС без нагрузки;
– адрес: область;
– адрес: район;
– адрес: номер дома;
– адрес: номер корпуса;
– адрес: номер квартиры;
– место прописки;
– дата прописки;
– дата начала проживания;
– дата окончания проживания;
– код органа выдачи (введен для 2–й
страницы паспорта Российской
Федерации);
– адрес места рождения:
область/провинция;
– адрес места рождения: код
государства;
– адрес: улица;
– адрес: город;
– адрес: код места налогообложения;
– адрес: почтовый индекс;
121Программные средства SDK
– контрольная цифра для номера
документа;
ft_Date_of_Birth_CheckDigit
– контрольная цифра для даты рождения;
ft_Date_of_Expiry_CheckDigit
– контрольная цифра для даты окончания
срока действия документа;
ft_Personal_Number_CheckDigit
– контрольная цифра для персонального
номера;
ft_FinalCheckDigit
– общая контрольная цифра (для всей
МСЗ);
ft_Passport_Number_CheckDigit
– контрольная
цифра
для
номера
паспорта (используется в визах);
ft_Invitation_Number_CheckDigit
– контрольная цифра для номера
приглашения (используется в визах);
ft_Visa_ID_CheckDigit
– контрольная цифра для
идентификационного номера визы;
ft_Surname_And_Given_Names_CheckDigit – контрольная цифра для Ф.И.О.;
ft_Visa_Valid_Until_CheckDigit
– контрольная цифра для даты окончания
действия визы;
ft_Permit_DL_Class
– тип разрешения;
ft_Permit_Date_of_Expiry
– дата окончания действия разрешения;
ft_Permit_Identifier
– идентификатор разрешения;
ft_Permit_Date_of_Issue
– дата выдачи разрешения;
ft_Permit_Restriction_Code
– код ограничения для разрешения на
вождение;
ft_Permit_Endorsed
– код разрешения для разрешения на
вождение;
ft_Issue_Timestamp
– строка, которая используется для
проверки документа в соответствии с
базой данных;
ft_Number_of_Duplicates
– количество дубликатов документа;
ft_Medical_Indicator_Codes
– медицинские отметки;
ft_Non_Resident_Indicator
– отметка об отсутствии гражданства;
ft_Visa_Type
– тип визы;
ft_Visa_Valid_From
– дата начала действия визы;
ft_Visa_Valid_Until
– дата окончания действия визы;
ft_Duration_of_Stay
– продолжительность пребывания по
визе;
ft_Number_of_Entries
– количество въездов по визе;
ft_Day
– дата: день;
ft_Month
– дата: месяц;
ft_Year
– дата: год;
ft_Unique_Customer_Identifier
– идентификационный номер;
ft_Commercial_Vehicle_Codes
– коммерческий код ТС;
ft_AKA_Date_of_Birth
– также известен как: дата рождения;
ft_Document_Number_CheckDigit
122
Программные средства SDK
ft_AKA_Social_Security_Number
ft_AKA_Surname
ft_AKA_Given_Names
ft_AKA_Name_Suffix
ft_AKA_Name_Prefix
ft_Mailing_Address_Street
ft_Mailing_Address_City
ft_Mailing_Address_Jurisdiction_Code
ft_Mailing_Address_Postal_Code
ft_Audit_Information
ft_Inventory_Number
ft_Race_Ethnicity
ft_Jurisdiction_Vehicle_Class
ft_Jurisdiction_Endorsement_Code
ft_Jurisdiction_Restriction_Code
ft_Family_Name
ft_Given_Names_RUS
ft_Visa_ID_RUS
ft_Fathers_Name
ft_Fathers_Name_RUS
ft_Surname_And_Given_Names_RUS
ft_Place_Of_Birth_RUS
ft_Authority_RUS
ft_Issuing_State_Code_Numeric
ft_Nationality_Code_Numeric
ft_Engine_Power
ft_Engine_Volume
ft_Chassis_Number
ft_Engine_Number
ft_Engine_Model
ft_Vehicle_Category
ft_Identity_Card_Number

– также известен как: номер социального
страхования;
– также известен как: фамилия;
– также известен как: имя;
– также известен как: суффикс имени;
– также известен как: префикс имени;
– почтовый адрес: улица;
– почтовый адрес: город;
– почтовый адрес: код места
налогообложения;
– почтовый адрес: почтовый индекс;
– номер для проверки валидности
водительского удостоверения;
– инвентарный номер;
– расовая/этническая принадлежность;
– юридический класс транспортного
средства;
– юридический код разрешения;
– юридический код ограничения;
– фамилия и (или) имя при рождении;
– имя (русская транскрипция);
– идентификационный номер визы
(русская транскрипция);
– отчество/имя отца;
– отчество/имя отца (русская
транскрипция);
– Ф.И.О. (русская транскрипция);
– место рождения (русская
транскрипция);
– орган выдачи документа (русская
транскрипция);
– цифровой код государства выдачи
документа в соответствии со стандартом
ISO 3166–1 (ICAO doc 9303);
– цифровой код национальности в
соответствии со стандартом ISO 3166–1
(ICAO doc 9303);
– мощность двигателя ТС;
– объем двигателя ТС;
– номер шасси ТС;
– номер двигателя ТС;
– модель двигателя ТС;
– категория ТС;
– номер идентификационной карточки;
123Программные средства SDK
ft_Control_No
ft_Parrent_s_Given_Names
ft_Second_Surname
ft_Middle_Name
ft_CurrentDate
ft_FieldFromMRZ
ft_RegCert_VIN
ft_RegCert_VIN_CheckDigit
ft_RegCert_VIN_Checksum
ft_Line1_CheckDigit
ft_Line2_CheckDigit
ft_Line3_CheckDigit
ft_Line1_Checksum
ft_Line2_Checksum
ft_Line3_Checksum
ft_RegCert_RegNumber_CheckDigit
ft_RegCert_RegNumber_Checksum
ft_RegCert_Vehicle_ITS_Code
ft_Card_Access_Number
ft_Marital_Status
ft_Company_Name
ft_Special_Notes
ft_Surname_of_Spose
ft_Tracking_Number
ft_Booklet_Number
ft_Children
ft_Copy
ft_Serial_Number
ft_Dossier_Number
ft_AKA_Surname_And_Given_Names
ft_Territorial_Validity
124
– контрольный номер;
– имена родителей;
– вторая фамилия;
– второе имя;
– зарезервировано для внутреннего
использования;
– зарезервировано для внутреннего
использования;
– идентификационный номер кузова
автомобиля;
– контрольная цифра для
идентификационного номера кузова
автомобиля;
– контрольная сумма для
идентификационного номера кузова
автомобиля;
– контрольная цифра первой строки МСЗ;
– контрольная цифра второй строки МСЗ;
– контрольная цифра третьей строки МСЗ;
– контрольная сумма первой строки МСЗ;
– контрольная сумма второй строки МСЗ;
– контрольная сумма третьей строки МСЗ;
– контрольная цифра для
регистрационного номера документа;
– контрольная сумма для
регистрационного номера документа;
– код ТС в соответствии с ИТС
(Интеллектуальная транспортная
система);
– номер карты для доступа к RFID–чипу;
– семейное положение;
– название компании;
– особые примечания;
– фамилия супруга;
– номер для отслеживания статуса
документа;
– номер буклета;
– информация о детях;
– номер копии;
– серийный номер;
– номер досье;
– также известен как: Ф.И.О.;
– территориальное действие;
Программные средства SDK
ft_MRZ_Strings_With_Correct_CheckSums – МСЗ с правильными контрольными
суммами;
ft_DL_CDL_Restriction_Code
– код ограничения для коммерческого ВУ;
ft_DL_Under_18_Date
– дата, когда владельцу документа
исполняется 18 лет;
ft_DL_Record_Created
– дата создания записи;
ft_DL_Duplicate_Date
– дата создания дубликата;
ft_DL_Iss_Type
– тип выданного ВУ;
ft_Military_Book_Number
– номер военного билета;
ft_Destination
– пункт назначения;
ft_Blood_Group
– группа крови;
ft_Sequence_Number
– порядковый номер;
ft_RegCert_BodyType
– тип кузова;
ft_RegCert_CarMark
– марка автомобиля;
ft_Transaction_Number
– номер транзакции;
ft_Age
– возраст;
ft_Folio_Number
– регистрационный номер (документа по
книге учёта);
ft_Voter_Key
– личный номер избирателя;
ft_Address_Municipality
– адрес: муниципалитет;
ft_Address_Location
– адрес: населенный пункт;
ft_Section
– сфера/сектор;
ft_OCR_Number
– номер OCR;
ft_Federal_Elections
– федеральные выборы;
ft_Reference_Number
– уникальный номер;
ft_Visa_Number
– номер визы;
ft_Voter
– избиратель;
ft_Previous_Type
– тип/номер предыдущего документа;
ft_Status_Date_of_Expiry
– дата окончания действия статуса;
ft_Bancnote_Number
– номер банкноты;
ft_CSC_Code
– код отдела по обслуживанию клиентов
(Сustomer Service Center);
ft_Artistic_Name
– псевдоним;
ft_Academic_Title
– научное звание;
ft_Address_Country
– адрес: страна;
ft_Address_Zipcode
– адрес: почтовый индекс;
ft_eID_Residence_Permit1
– сведения о постоянном виде на
жительство 1 (поле для eID);
ft_eID_Residence_Permit2
– сведения о постоянном виде на
жительство 2 (поле для eID);
ft_eID_PlaceOfBirth_Street
– адрес места рождения: улица (поле для eID);
ft_eID_PlaceOfBirth_City
– адрес места рождения: город (поле для eID);
ft_eID_PlaceOfBirth_State
– адрес места рождения: штат (поле для eID);
ft_eID_PlaceOfBirth_Country
– адрес места рождения: страна (поле для eID);

125Программные средства SDK
– адрес места рождения: почтовый индекс
(поле для eID);
ft_CDL_Class
– класс коммерческого ВУ;
ft_DL_Under_19_Date
– дата, когда владельцу документа
исполняется 19 лет;
ft_Weight_pounds
– вес (фунты);
ft_Limited_Duration_Document_Indicator – индикатор ограничения срока действия
документа;
ft_Endorsement_Expiration_Date
– дата окончания срока разрешения для ВУ;
ft_Revision_Date
– дата редакции;
ft_Compliance_Type
– тип соответствия;
ft_Family_name_truncation
– сокращенная фамилия;
ft_First_name_truncation
– сокращенное имя;
ft_Middle_name_truncation
– сокращенное второе имя;
ft_Exam_Date
– дата экзамена;
ft_Organization
– организация;
ft_Department
– департамент/отдел;
ft_Pay_Grade
– уровень заработной платы;
ft_Rank
– ранг/статус/титул;
ft_Benefits_Number
– номер, подтверждающий право на
получение льгот;
ft_Sponsor_Service
– вид вооруженных сил, в которых служит
спонсор;
ft_Sponsor_Status
– статус спонсора;
ft_Sponsor
– спонсор;
ft_Relationship
– степень родства;
ft_USCIS
– регистрационный номер иностранца в
Службе гражданства и иммиграции США
(US Citizenship and Immigration Services);
ft_Category
– категория;
ft_Conditions
– условия;
ft_Identifier
– идентификатор;
ft_Configuration
– конфигурация;
ft_Discretionary_data
– опциональные данные;
ft_Line1_Optional_Data
– дополнительные данные из строки 1 в МСЗ;
ft_Line2_Optional_Data
– дополнительные данные из строки 2 в МСЗ;
ft_Line3_Optional_Data
– дополнительные данные из строки 3 в МСЗ;
ft_EQV_Code
– EQV–код (защитный код);
ft_ALT_Code
– ALT–код;
ft_Binary_Code
– бинарный код;
ft_Pseudo_Code
– псевдокод;
ft_Fee
– плата;
ft_Stamp_Number
– номер печати;
ft_eID_PlaceOfBirth_Zipcode
126
Программные средства SDK
ft_SBH_SecurityOptions
ft_SBH_IntegrityOptions
ft_Date_of_Creation
ft_Validity_Period
ft_Patron_Header_Version
ft_BDB_Type
ft_Biometric_Type
ft_Biometric_Subtype
ft_Biometric_ProductID
ft_Biometric_Format_Owner
ft_Biometric_Format_Type
ft_Phone
ft_Profession
ft_Title
ft_Personal_Summary
ft_Other_Valid_ID
ft_Custody_Info
ft_Other_Name
ft_Observations
ft_Tax
ft_Date_of_Personalization
ft_Personalization_SN
ft_OtherPerson_Name
ft_PersonToNotify_Date_of_Record
ft_PersonToNotify_Name
ft_PersonToNotify_Phone
ft_PersonToNotify_Address
ft_DS_Certificate_Issuer
ft_DS_Certificate_Subject

– параметры
защиты
биометрических
данных;
– параметры целостности биометрических
данных;
– дата создания записи биометрических
данных;
– срок действия записи с биометрическими
данными;
– версия заголовка владельца формата
биометрических данных;
– тип записи биометрических данных;
– тип биометрических данных;
– подтип биометрических данных;
– идентификатор биометрических данных;
– идентификатор владельца формата
биометрических данных;
– формат биометрических данных;
– номер телефона;
– профессия владельца документа;
– должность владельца документа;
– общие персональные данные владельца
документа;
– другой действительный идентификатор;
– данные об опеке;
– другое имя;
– дополнительные данные;
– данные о налогах;
– дата персонализации документа;
– серийный номер персонализации;
– имя другого человека;
– дата создания записи о лицах для
извещения в случае непредвиденных
ситуаций;
– имя лица для извещения в случае
непредвиденных ситуаций;
– номер телефона лица для извещения в
случае непредвиденных ситуаций;
– адрес лица для извещения в случае
непредвиденных ситуаций;
– текстовые сведения об организации,
выпустившей DS-сертификат;
– текстовые сведения об организации,
выпустившей документ;
127Программные средства SDK
ft_DS_Certificate_ValidFrom
ft_DS_Certificate_ValidTo
ft_VRC_DataObject_Entry
ft_TypeApprovalNumber
ft_AdministrativeNumber
ft_DocumentDiscriminator
ft_DataDiscriminator
ft_ISO_Issuer_ID_Number
ft_DTC_Version
ft_DTC_ID
ft_DateOfExpiry
ft_GNIB_Number
ft_Dept_Number
ft_Telex_Code
ft_Allergies
ft_Sp_Code
ft_Court_Code
ft_Cty
ft_Sponsor_SSN
ft_DoD_Number
ft_MC_Novice_Date
ft_DUF_Number
ft_AGY
ft_PNR_Code
ft_From_Airport_Code
ft_To_Airport_Code
ft_Flight_Number
ft_Date_of_Flight
ft_Seat_Number
ft_Date_of_Issue_Boarding_Pass
ft_CCW_Until
128
– дата начала действия DS-сертификата;
– дата окончания действия DS-сертификата;
– категория
транспортного
средства/ограничение/условия из группы
данных DG1 приложения eDL;
– номер подтверждения типа;
– административный номер;
– различитель документа;
– различитель данных;
– идентификатор ISO эмитента;
– версия цифрового проездного документа
(DTC);
– уникальный идентификатор цифрового
проездного документа (DTC);
– дата истечения срока действия цифрового
проездного документа (DTC);
– регистрационный номер Национального
бюро по вопросам иммиграции
Комиссариата полиции (Garda National);
– номер отдела;
– телеграфный код;
– аллергия;
– Sp–код;
– код ограничения, установленного судом;
– код округа;
– номер социального страхования
спонсора;
– индивидуальный идентификационный
номер военнослужащего;
– начинающий водитель до... (дата);
– номер DUF (регистрационный номер
Директората по иммиграции Норвегии);
– код подразделения дорожной полиции
Филиппин;
– PNR–код (номер бронирования);
– код аэропорта отправления;
– код аэропорта прибытия;
– номер рейса;
– дата вылета;
– номер места;
– дата выдачи посадочного талона;
– дата окончания действия лицензии на
скрытое ношение оружия;
Программные средства SDK
– контрольная сумма для уникального
номера;
ft_Reference_Number_CheckDigit
– контрольная цифра для уникального
номера;
ft_Room_Number
– номер комнаты;
ft_Religion
– религия;
ft_RemainderTerm
– количество месяцев до срока
окончания действия документа;
ft_Electronic_Ticket_Indicator
– индикатор электронных билетов;
ft_Free_Baggage_Allowance
– норма бесплатного провоза багажа;
ft_Frequent_Flyer_Number
– номер постоянного пассажира
авиакомпании;
ft_Frequent_Flyer_Airline_Designator – индикатор постоянного пассажира
авиакомпании;
ft_Ticket_Number
– номер билета;
ft_Airline_Numeric_Code
– цифровой код авиакомпании;
ft_Airline_Designator_of_boarding_pass_issuer – код авиакомпании, выпустившей
посадочный талон;
ft CheckIn Sequence Number
– порядковый номер при регистрации
пассажира на рейс;
ft_Compartment Code
– код отсека;
ft_PDF417Codec
– кодек для PDF417;
ft_Identity_Card_Number_Checksum
– контрольная сумма для номера
идентификационной карты;
ft_Identity_Card_Number_CheckDigit
– контрольная цифра для номера
идентификационной карты;
ft_Veteran
– ветеран;
ft_DLClassCode_A1_From
– дата начала действия ВУ категории А1;
ft_DLClassCode_A1_To
– дата окончания действия ВУ категории А1;
ft_DLClassCode_A1_Notes
– ограничения для категории А1 ВУ;
ft_DLClassCode_A_From
– дата начала действия ВУ категории А;
ft_DLClassCode_A_To
– дата окончания действия ВУ категории А;
ft_DLClassCode_A_Notes
– ограничения для категории А ВУ;
ft_DLClassCode_B_From
– дата начала действия ВУ категории B;
ft_DLClassCode_B_To
– дата окончания действия ВУ категории B;
ft_DLClassCode_B_Notes
– ограничения для категории B ВУ;
ft_DLClassCode_C1_From
– дата начала действия ВУ категории С1;
ft_DLClassCode_C1_To
– дата окончания действия ВУ категории С1;
ft_DLClassCode_C1_Notes
– ограничения для категории C1 ВУ;
ft_DLClassCode_C_From
– дата начала действия ВУ категории С;
ft_DLClassCode_C_To
– дата окончания действия ВУ категории С;
ft_DLClassCode_C_Notes
– ограничения для категории C ВУ;
ft_DLClassCode_D1_From
– дата начала действия ВУ категории D1;
ft_DLClassCode_D1_To
– дата окончания действия ВУ категории D1;
ft_Reference_Number_Checksum

129Программные средства SDK
ft_DLClassCode_D1_Notes
ft_DLClassCode_D_From
ft_DLClassCode_D_To
ft_DLClassCode_D_Notes
ft_DLClassCode_BE_From
ft_DLClassCode_BE_To
ft_DLClassCode_BE_Notes
ft_DLClassCode_C1E_From
ft_DLClassCode_C1E_To
ft_DLClassCode_C1E_Notes
ft_DLClassCode_CE_From
ft_DLClassCode_CE_To
ft_DLClassCode_CE_Notes
ft_DLClassCode_D1E_From
ft_DLClassCode_D1E_To
ft_DLClassCode_D1E_Notes
ft_DLClassCode_DE_From
ft_DLClassCode_DE_To
ft_DLClassCode_DE_Notes
ft_DLClassCode_M_From
ft_DLClassCode_M_To
ft_DLClassCode_M_Notes
ft_DLClassCode_L_From
ft_DLClassCode_L_To
ft_DLClassCode_L_Notes
ft_DLClassCode_T_From
ft_DLClassCode_T_To
ft_DLClassCode_T_Notes
ft_DLClassCode_AM_From
ft_DLClassCode_AM_To
ft_DLClassCode_AM_Notes
ft_DLClassCode_A2_From
ft_DLClassCode_A2_To
ft_DLClassCode_A2_Notes
ft_DLClassCode_B1_From
ft_DLClassCode_B1_To
ft_DLClassCode_B1_Notes
ft_Surname_at_Birth
ft_Civil_Status
ft_Number_of_Seats
ft_Number_of_Standing_Places
ft_Max_Speed
ft_Fuel_Type
ft_EC_Environmental_Type
130
– ограничения для категории D1 ВУ;
– дата начала действия ВУ категории D;
– дата окончания действия ВУ категории D;
– ограничения для категории D ВУ;
– дата начала действия ВУ категории ВЕ;
– дата окончания действия ВУ категории ВЕ;
– ограничения для категории BE ВУ;
– дата начала действия ВУ категории С1Е;
– дата окончания действия ВУ категории С1Е;
– ограничения для категории C1E ВУ;
– дата начала действия ВУ категории СЕ;
– дата окончания действия ВУ категории СЕ;
– ограничения для категории CE ВУ;
– дата начала действия ВУ категории D1E;
– дата окончания действия ВУ категории D1E;
– ограничения для категории D1E ВУ;
– дата начала действия ВУ категории DE;
– дата окончания действия ВУ категории DE;
– ограничения для категории DE ВУ;
– дата начала действия ВУ категории М;
– дата окончания действия ВУ категории М;
– ограничения для категории M ВУ;
– дата начала действия ВУ категории L;
– дата окончания действия ВУ категории L;
– ограничения для категории L ВУ;
– дата начала действия ВУ категории T;
– дата окончания действия ВУ категории T;
– ограничения для категории T ВУ;
– дата начала действия ВУ категории AM;
– дата окончания действия ВУ категории AM;
– ограничения для категории АМ ВУ;
– дата начала действия ВУ категории А2;
– дата окончания действия ВУ категории А2;
– ограничения для категории А2 ВУ;
– дата начала действия ВУ категории B1;
– дата окончания действия ВУ категории B1;
– ограничения для категории В1 ВУ;
– фамилия при рождении;
– гражданский статус;
– количество сидячих мест;
– количество стоячих мест;
– максимальная скорость;
– тип топлива;
– экологический класс автомобиля ;
Программные средства SDK
– удельная мощность двигателя (на
единицу веса);
ft_Max_Mass_of_Trailer_Braked
– максимальная масса прицепа,
оборудованного тормозами;
ft_Max_Mass_of_Trailer_Unbraked
– максимальная масса прицепа,
не оборудованного тормозами;
ft_Transmission_Type
– тип трансмиссии;
ft_Trailer_Hitch
– прицепное оборудование;
ft_Accompanied_by
– сопровождающее лицо;
ft_Police_District
– полицейский округ;
ft_First_Issue_Date
– дата первой выдачи документа;
ft_Payload_Capacity
– максимальная полезная нагрузка;
ft_Number_of_Axels
– количество осей;
ft_Permissible_Axle_Load
– допустимая нагрузка на ось;
ft_Precinct
– избирательный участок;
ft_Invited_by
– приглашающее лицо;
ft_Purpose_of_Entry
– цель приезда;
ft_Skin_Color
– цвет кожи;
ft_Complexion
– цвет лица;
ft_Airport_From
– аэропорт отправления;
ft_Airport_To
– аэропорт прибытия;
ft_Airline_Name
– название авиакомпании;
ft_Airline_Name_Frequent_Flyer
– бонусная программа авиакомпании для
постоянных пассажиров;
ft_License_Number
– номер лицензии;
ft_In_Tanks
– в цистернах;
ft_Exept_In_Tanks
– за исключением цистерн;
ft_Fast_Track
– пассажир с приоритетом fast track
(экспресс–прохождение официальных
процедур в аэропорту);
ft_Owner
– владелец;
ft_MRZ_Strings_ICAO_RFID
- строки МСЗ из ICAO RFID;
ft_Number_of_Card_Issuance
- количество выпусков карты с данным
номером;
ft_Number_of_Card_Issuance_Checksum
- контрольная сумма количества
выпусков карты;
ft_Number_of_Card_Issuance_CheckDigit - контрольная цифра количеств выпусков
карты;
ft_Century_Date_of_Birth
- век рождения;
ft_DLClassCode_A3_From
- дата начала действия ВУ категории A3;
ft_DLClassCode_A3_To
- дата окончания действия ВУ категории A3;
ft_DLClassCode_A3_Notes
- ограничения для категории A3 ВУ;
ft_DLClassCode_C2_From
- дата начала действия ВУ категории C2;
ft_DLClassCode_C2_To
- дата окончания действия ВУ категории C2;
ft_Power_Weight_Ratio

131Программные средства SDK
ft_DLClassCode_C2_Notes
ft_DLClassCode_B2_From
ft_DLClassCode_B2_To
ft_DLClassCode_B2_Notes
ft_DLClassCode_D2_From
ft_DLClassCode_D2_To
ft_DLClassCode_D2_Notes
ft_DLClassCode_B2E_From
ft_DLClassCode_B2E_To
ft_DLClassCode_B2E_Notes
ft_DLClassCode_G_From
ft_DLClassCode_G_To
ft_DLClassCode_G_Notes
ft_DLClassCode_J_From
ft_DLClassCode_J_To
ft_DLClassCode_J_Notes
ft_DLClassCode_LC_From
ft_DLClassCode_LC_To
ft_DLClassCode_LC_Notes
ft_BankCardNumber
ft_BankCardValidThru
ft_TaxNumber
ft_HealthNumber
ft_GrandfatherName
ft_Selectee_Indicator
ft_Mother_Surname
ft_Mother_GivenName
ft_Father_Surname
ft_Father_GivenName
ft_Mother_DateOfBirth
ft_Father_DateOfBirth
ft_Mother_PersonalNumber
ft_Father_PersonalNumber
ft_Mother_PlaceOfBirth
ft_Father_PlaceOfBirth
ft_Mother_CountryOfBirth
ft_Father_CountryOfBirth
ft_Date_First_Renewal
ft_Date_Second_Renewal
ft_PlaceOfExamination
ft_ApplicationNumber
ft_VoucherNumber
132
- ограничения для категории C2 ВУ;
- дата начала действия ВУ категории B2;
- дата окончания действия ВУ категории B2;
- ограничения для категории B2 ВУ;
- дата начала действия ВУ категории D2;
- дата окончания действия ВУ категории
D2;
- ограничения для категории D2 ВУ;
- дата начала действия ВУ категории B2E;
- дата окончания действия ВУ категории
B2E;
- ограничения для категории B2E ВУ;
- дата начала действия ВУ категории G;
- дата окончания действия ВУ категории G;
- ограничения для категории G ВУ;
- дата начала действия ВУ категории J;
- дата окончания действия ВУ категории J;
- ограничения для категории J ВУ;
- дата начала действия ВУ категории LC;
- дата окончания действия ВУ категории LC;
- ограничения для категории LC ВУ;
- номер банковской карты;
- срок действия банковской карты;
- номер налогоплательщика;
- номер страхования здоровья;
- имя дедушки;
- индикатор призывника;
- фамилия матери;
- имя матери;
- фамилия отца;
- имя отца;
- дата рождения матери;
- дата рождения отца;
- личный номер матери;
- личный номер отца;
- место рождения матери;
- место рождения отца;
- страна рождения матери;
- страна рождения отца;
- дата первого продления;
- дата второго продления;
- место исследования;
- номер заявки;
- номер ваучера;
Программные средства SDK
ft_AuthorizationNumber
ft_Faculty
ft_FormOfEducation
ft_DNINumber
ft_RetirementNumber
ft_ProfessionalIdNumber
ft_Age_at_Issue
ft_Years_Since_Issue
ft_DLClassCode_BTP_From
ft_DLClassCode_BTP_Notes
ft_DLClassCode_BTP_To
ft_DLClassCode_C3_From
ft_DLClassCode_C3_Notes
ft_DLClassCode_C3_To
ft_DLClassCode_E_From
ft_DLClassCode_E_Notes
ft_DLClassCode_E_To
ft_DLClassCode_F_From
ft_DLClassCode_F_Notes
ft_DLClassCode_F_To
ft_DLClassCode_FA_From
ft_DLClassCode_FA_Notes
ft_DLClassCode_FA_To
ft_DLClassCode_FA1_From
ft_DLClassCode_FA1_Notes
ft_DLClassCode_FA1_To
ft_DLClassCode_FB_From
ft_DLClassCode_FB_Notes
ft_DLClassCode_FB_To
ft_DLClassCode_G1_From
ft_DLClassCode_G1_Notes
ft_DLClassCode_G1_To
ft_DLClassCode_H_From
ft_DLClassCode_H_Notes
ft_DLClassCode_H_To
ft_DLClassCode_I_From
ft_DLClassCode_I_Notes
ft_DLClassCode_I_To
ft_DLClassCode_K_From
ft_DLClassCode_K_Notes

- номер авторизации;
- факультет;
- форма обучения;
- номер DNI—Documento Nacional de
Identidad
(введён
для
испанских
документов);
- пенсионный номер;
- профессиональный идентификационный
номер;
- возраст при выдаче;
- лет с момента выдачи;
- дата начала действия ВУ категории BTP;
- ограничения для ВУ категории BTP;
- дата окончания действия ВУ категории
BTP;
- дата начала действия ВУ категории C3;
- ограничения для ВУ категории C3;
- дата окончания действия ВУ категории С3;
- дата начала действия ВУ категории Е;
- ограничения для ВУ категории Е;
- дата окончания действия ВУ категории Е;
- дата начала действия ВУ категории F;
- ограничения для ВУ категории F;
- дата окончания действия ВУ категории F;
- дата начала действия ВУ категории FA;
- ограничения для ВУ категории FA;
- дата окончания действия ВУ категории FA;
- дата начала действия ВУ категории FA1;
- ограничения для ВУ категории FA1;
- дата окончания действия ВУ категории FA1;
- дата начала действия ВУ категории FB;
- ограничения для ВУ категории FB;
- дата окончания действия ВУ категории FB;
- дата начала действия ВУ категории G1;
- ограничения для ВУ категории G1;
- дата окончания действия ВУ категории G1;
- дата начала действия ВУ категории H;
- ограничения для ВУ категории H;
- дата окончания действия ВУ категории H;
- дата начала действия ВУ категории I;
- ограничения для ВУ категории I;
- дата окончания действия ВУ категории I;
- дата начала действия ВУ категории K;
- ограничения для ВУ категории K;
133Программные средства SDK
ft_DLClassCode_K_To
ft_DLClassCode_LK_From
ft_DLClassCode_LK_Notes
ft_DLClassCode_LK_To
ft_DLClassCode_N_From
ft_DLClassCode_N_Notes
ft_DLClassCode_N_To
ft_DLClassCode_S_From
ft_DLClassCode_S_Notes
ft_DLClassCode_S_To
ft_DLClassCode_TB_From
ft_DLClassCode_TB_Notes
ft_DLClassCode_TB_To
ft_DLClassCode_TM_From
ft_DLClassCode_TM_Notes
ft_DLClassCode_TM_To
ft_DLClassCode_TR_From
ft_DLClassCode_TR_Notes
ft_DLClassCode_TR_To
ft_DLClassCode_TV_From
ft_DLClassCode_TV_Notes
ft_DLClassCode_TV_To
ft_DLClassCode_V_From
ft_DLClassCode_V_Notes
ft_DLClassCode_V_To
ft_DLClassCode_W_From
ft_DLClassCode_W_Notes
ft_DLClassCode_W_To
ft_URL
ft_Caliber
ft_Model
ft_Make
ft_NumberOfCylinders
ft_SurnameOfHusbandAfterRegistration
ft_SurnameOfWifeAfterRegistration
ft_DateOfBirthOfWife
ft_DateOfBirthOfHusband
ft_CitizenshipOfFirstPerson
ft_CitizenshipOfSecondPerson
134
- дата окончания действия ВУ категории K;
- дата начала действия ВУ категории LK;
- ограничения для ВУ категории LK;
- дата окончания действия ВУ категории LK;
- дата начала действия ВУ категории N;
- ограничения для ВУ категории N;
- дата окончания действия ВУ категории N;
- дата начала действия ВУ категории S;
- ограничения для ВУ категории S;
- дата окончания действия ВУ категории S;
- дата начала действия ВУ категории TB;
- ограничения для ВУ категории TB;
- дата окончания действия ВУ категории
TB;
- дата начала действия ВУ категории TM;
- ограничения для ВУ категории TM;
- дата окончания действия ВУ категории
TM;
- дата начала действия ВУ категории TR;
- ограничения для ВУ категории TR;
- дата окончания действия ВУ категории
TR;
- дата начала действия ВУ категории TV;
- ограничения для ВУ категории TV;
- дата окончания действия ВУ категории
TV;
- дата начала действия ВУ категории V;
- ограничения для ВУ категории V;
- дата окончания действия ВУ категории V;
- дата начала действия ВУ категории W;
- ограничения для ВУ категории W;
- дата окончания действия ВУ категории W;
- URL;
- калибр;
- модель;
- производитель;
- количество цилиндров;
- фамилия мужа после регистрации;
- фамилия жены после регистрации;
- дата рождения жены;
- дата рождения мужа;
- гражданство первой личности;
- гражданство второй личности;
Программные средства SDK
ft_CVV
ft_Date_of_Insurance_Expiry
ft_Mortgage_by
ft_Old_Document_Number
ft_Old_Date_of_Issue
ft_Old_Place_of_Issue
ft_DLClassCode_LR_From
ft_DLClassCode_LR_To
ft_DLClassCode_LR_Notes
ft_DLClassCode_MR_From
ft_DLClassCode_MR_To
ft_DLClassCode_MR_Notes
ft_DLClassCode_HR_From
ft_DLClassCode_HR_To
ft_DLClassCode_HR_Notes
ft_DLClassCode_HC_From
ft_DLClassCode_HC_To
ft_DLClassCode_HC_Notes
ft_DLClassCode_MC_From
ft_DLClassCode_MC_To
ft_DLClassCode_MC_Notes
ft_DLClassCode_RE_From
ft_DLClassCode_RE_To
ft_DLClassCode_RE_Notes
ft_DLClassCode_R_From
ft_DLClassCode_R_To
ft_DLClassCode_R_Notes
ft_DLClassCode_CA_From
ft_DLClassCode_CA_To
ft_DLClassCode_CA_Notes
ft_Citizenship_Status
ft_Military_Service_From
ft_Military_Service_To
ft_DLClassCode_NT_From
ft_DLClassCode_NT_To

- СVV код верификации карты, число из
трёх цифр, используемое на банковских
картах;
- дата окончания действия страховки;
- срок ипотеки;
- старый номер документа;
- старая дата выдачи;
- старое место выдачи;
- дата начала действия ВУ категории LR;
- дата окончания действия ВУ категории LR;
- ограничения для ВУ категории LR;
- дата начала действия ВУ категории MR;
- дата окончания действия ВУ категории
MR;
- ограничения для ВУ категории MR;
- дата начала действия ВУ категории HR;
- дата окончания действия ВУ категории
HR;
- ограничения для ВУ категории HR;
- дата начала действия ВУ категории HC;
- дата окончания действия ВУ категории
HC;
- ограничения для ВУ категории HC;
- дата начала действия ВУ категории MC;
- дата окончания действия ВУ категории
MC;
- ограничения для ВУ категории MC;
- дата начала действия ВУ категории RE;
- дата окончания действия ВУ категории
RE;
- ограничения для ВУ категории RE;
- дата начала действия ВУ категории R;
- дата окончания действия ВУ категории R;
- ограничения для ВУ категории R;
- дата начала действия ВУ категории CA;
- дата окончания действия ВУ категории
CA;
- ограничения для ВУ категории CA;
- гражданство;
- дата начала воинской службы;
- дата окончания воинской службы;
- дата начала действия ВУ категории NT;
- дата окончания действия ВУ категории
NT;
135Программные средства SDK
- ограничения для ВУ категории NT;
- дата начала действия ВУ категории TN;
- дата окончания действия ВУ категории
TN;
ft_DLClassCode_TN_Notes
- ограничения для ВУ категории TN;
ft_DLClassCode_D3_From
- дата начала действия ВУ категории D3;
ft_DLClassCode_D3_To
- дата окончания действия ВУ категории
D3;
ft_DLClassCode_D3_Notes
- ограничения для ВУ категории D3;
ft_Alt_Date_Of_Expiry
- альтернативная дата окончания действия;
ft_DLClassCode_CD_From
- ограничения для ВУ категории CD - дата
начала;
ft_DLClassCode_CD_To
- ограничения для ВУ категории CD - дата
окончания;
ft_DLClassCode_CD_Notes
- ограничения для ВУ категории CD;
ft_Issuer_Identification_Number
- идентификационный номер эмитента
(IIN);
ft_Payment_Period_From
- дата начала срока оплаты;
ft_Payment_Period_To
- дата окончания срока оплаты;
ft_VaccinationCertificateIdentifier
-
идентификатор
сертификата
о
вакцинации;
ft_First_Name
- имя;
ft_Date_of_Arrival
- дата въезда;
ft_Second_Name
- второе имя;
ft_Third_Name
- третье имя;
ft_Fourth_Name
- четвёртое имя;
ft_Last_Name
- фамилия;
ft_DLClassCode_RM_From
- дата начала действия ВУ категории RM;
ft_DLClassCode_RM_Notes
- ограничения для ВУ категории RM;
ft_DLClassCode_RM_To
-дата окончания действия ВУ категории RM;
ft_DLClassCode_PW_From
- дата начала действия ВУ категории PW;
ft_DLClassCode_PW_Notes
- ограничения для ВУ категории PW;
ft_DLClassCode_PW_To
- дата окончания действия ВУ категории PW;
ft_DLClassCode_EB_From
- дата начала действия ВУ категории EB;
ft_DLClassCode_EB_Notes
- ограничения для ВУ категории
EB;
ft_DLClassCode_EB_To
- дата окончания действия ВУ категории EB;
ft_DLClassCode_EC_From
- дата начала действия ВУ категории EC;
ft_DLClassCode_EC_Notes
- ограничения для ВУ категории EC;
ft_DLClassCode_EC_To
- дата окончания действия ВУ категории EC;
ft_DLClassCode_EC1_From
- дата начала действия ВУ категории EC1;
ft_DLClassCode_EC1_Notes
- ограничения для ВУ категории EC1;
ft_DLClassCode_EC1_To
- дата окончания действия ВУ категории EC1;
ft_Place_of_Birth_City
- город рождения;
ft_Year_of_Birth
- год рождения;
ft_DLClassCode_NT_Notes
ft_DLClassCode_TN_From
ft_DLClassCode_TN_To
136
Программные средства SDK
- год окончания срока действия,
- первая фамилия;
- месяц рождения;
- номер этажа;
- номер подъезда;
- номер квартала;
- номер улицы;
- тип улицы;
- сектор города;
- тип округа;
- тип города;
- тип здания;
- дата выхода на пенсию;
- статус документа;
- подпись владельца;
- уникальный идентификатор тестового
сертификата для штрихкода согласно
структуре данных ICAO;
ft_Email
- электронный адрес;
ft_Date_of_SpecimenCollection
- дата и время сбора образцов для
штрихкода согласно структуре данных
ICAO;
ft_TypeOfTesting
- тип проведённого теста для штрихкода
согласно структуре данных ICAO;
ft_ResultOfTesting
- результат теста для штрихкода согласно
структуре данных ICAO;
ft_MethodOfTesting
- метод выбора образцов тестирования для
штрихкода согласно структуре данных
ICAO;
ft_Digital_Travel_Authorization_Number - номер цифрового туристического
разрешения;
ft_Date_of_First_Positive_Test_Result - дата получения первого положительного
результата теста NAAT для штрихкода
согласно структуре данных ICAO;
ft_EF_CardAccess
- данные EF.CardAccess в формате Base64,
извлечённые из штрихкода согласно
структуре данных ICAO.
ft_Year_of_Expiry
ft_First_Surname
ft_Month_of_Birth
ft_Address_Floor_Number
ft_Address_Entrance
ft_Address_Block_Number
ft_Address_Street_Number
ft_Address_Street_Type
ft_Address_City_Sector
ft_Address_County_Type
ft_Address_City_Type
ft_Address_Building_Type
ft_Date_of_Retirement
ft_Document_Status
ft_Signature
ft_UniqueCertificateIdentifier
5.4.12. eGraphicFieldType
Перечисление eGraphicFieldType содержит идентификаторы, определяющие
логический тип графических данных, полученных при чтении полей заполнения
документа или распознавании штрихкодов.
enum eGraphicFieldType

137Программные средства SDK
{
};
gf_Portrait
gf_Fingerprint
gf_Eye
gf_Signature
gf_BarCode
gf_Proof_Of_Citizenship
gf_Document_Front
gf_Document_Rear
gf_ColorDynamic
gf_GhostPortrait
gf_Stamp
gf_Portrait_Of_Child
gf_ContactChip
gf_Other
gf_Finger_LeftThumb
gf_Finger_LeftIndex
gf_Finger_LeftMiddle
gf_Finger_LeftRing
gf_Finger_LeftLittle
gf_Finger_RightThumb
gf_Finger_RightIndex
gf_Finger_RightMiddle
gf_Finger_RightRing
gf_Finger_RightLittle
= 201,
= 202,
= 203,
= 204,
= 205,
= 206,
= 207,
= 208,
= 209,
= 210,
= 211,
= 212,
= 213,
= 250,
= 300,
= 301,
= 302,
= 303,
= 304,
= 305,
= 306,
= 307,
= 308,
= 309
Логические типы полей, определяемые константами этого перечисления:
• gf_Portrait
– фотография владельца документа;
• gf_Fingerprint
– отпечаток пальца владельца документа;
• gf_Eye
– изображение
радужной
оболочки
глаза
владельца документа;
• gf_Signature
– подпись владельца документа;
• gf_BarCode
– изображение штрихкода;
• gf_Proof_Of_Citizenship – изображение
документа,
подтверждающего
гражданство владельца;
• gf_Document_Front
– изображение лицевой стороны документа;
• gf_Document_Rear
– изображение оборотной стороны документа;
• gf_ColorDynamic
– область с динамическим изменением цвета;
• gf_GhostPortrait
– дополнительный портрет;
• gf_Stamp
– штамп;
• gf_Portrait_Of_Child
– фотография ребенка;
• gf_ContactChip
– контактный чип;
• gf_Other
– неопределенный тип изображения;
• gf_Finger_LeftThumb
– отпечаток пальца (большой, левая рука);
• gf_Finger_LeftIndex
– отпечаток пальца (указательный, левая рука);
• gf_Finger_LeftMiddle
– отпечаток пальца (средний, левая рука);
• gf_Finger_LeftRing
– отпечаток пальца (безымянный, левая рука);
• gf_Finger_LeftLittle
– отпечаток пальца (мизинец, левая рука);
• gf_Finger_RightThumb
– отпечаток пальца (большой, правая рука);
• gf_Finger_RightIndex
– отпечаток пальца (указательный, правая рука);
• gf_Finger_RightMiddle
– отпечаток пальца (средний, правая рука);
• gf_Finger_RightRing
– отпечаток пальца (безымянный, правая рука);
• gf_Finger_RightLittle
– отпечаток пальца (мизинец, правая рука).
138
Программные средства SDK
5.4.13. eBarCodeType
Перечисление eBarCodeType содержит идентификаторы, определяющие тип штрихкода.
enum eBarCodeType
{
bct_Unknown
= 0,
bct_Code128
= 1,
bct_Code39
= 2,
bct_EAN8
= 3,
bct_ITF
= 4,
bct_PDF417
= 5,
bct_STF
= 6,
bct_MTF
= 7,
bct_IATA
= 8,
bct_CODABAR
= 9,
bct_UPCA
= 10,
bct_CODE93
= 11,
bct_UPCE
= 12,
bct_EAN13
= 13,
bct_QRCODE
= 14,
bct_AZTEC
= 15,
bct_DATAMATRIX = 16,
bct_ALL_1D
= 17,
bct_CODE11
= 18,
bct_JABCODE
= 19,
eBarCodeType_END
};
Типы штрихкодов, определяемые константами:
• bct_Unknown – неизвестный тип;
• bct_Code128 – одномерный штрихкод, ISO 15417 (ANSI/AIMBC4-1999 Code 128);
• bct_Code39 – одномерный штрихкод, ISO 16388 (ANSI/AIM BC1-1995 Code 39);
• bct_EAN8
– одномерный штрихкод EAN8, ISO 15418;
• bct_ITF
– одномерный штрихкод «Interleaved 2 of 5», ISO 16390 (ANSI/
AIM BC2-1995 Interleaved 2 of 5);
• bct_PDF417 – двумерный штрихкод, ISO 15438 (AIM USS PDF417);
• bct_STF
– одномерный штрихкод «Standard 2 of 5» (Industrial);
• bct_MTF
– одномерный штрихкод «Matrix 2 of 5»;
• bct_IATA
– одномерный штрихкод «IATA 2 of 5» (Airline);
• bct_CODABAR – одномерный штрихкод (ANSI/AIM BC3-1995, USS – Codabar);
• bct_UPCA
– одномерный штрихкод UPC-A;
• bct_CODE93 – одномерный штрихкод (ANSI/AIM BC5-1995, USS – Code 93);
• bct_UPCE
– одномерный штрихкод UPC-E;
• bct_EAN13 – одномерный штрихкод EAN13, ISO 15418;
• bct_QRCODE – двумерный штрихкод QRCODE;
• bct_AZTEC – двумерный штрихкод AZTEC;
• bct_DATAMATRIX – двумерный штрихкод DATAMATRIX;
• bct_ALL_1D – тип для внутреннего использования;
• bct_CODE11 -
одномерный штрихкод CODE11;
• bct_JABCODE - JAB code;
• eBarCodeType_END - для внутреннего использования.

139Программные средства SDK
5.4.14. eBarCodeResultCodes
Перечисление eBarCodeResultCodes содержит идентификаторы, определяющие
результат чтения данных штрихкода.
enum eBarCodeResultCodes
{
bcrc_NoErr
=
bcrc_NullPtrErr
=
bcrc_BadArgErr
=
bcrc_SizeErr
=
bcrc_RangeErr
=
bcrc_InternalErr
=
bcrc_TryExceptErr
=
bcrc_BarCodeNotFound
=
bcrc_BarCodeDecodeErr
=
bcrc_NoUserDLLFound
=
bcrc_NoIPPDLLFound
=
bcrc_IppExecErr
=
bcrc_IppTryExceptErr
=
bcrc_BARCODE_ERROR_Inputparam
=
bcrc_BARCODE_ERROR_FInit
=
bcrc_BARCODE_ERROR_NotLoadIpDecodedll =
bcrc_BARCODE_ERROR_InnerProblem
=
bcrc_BARCODE_ERROR_Decode_1D_BadDecode =
bcrc_BARCODE_ERROR_FindRowOrColumn
=
bcrc_BARCODE_ERROR_Find3X8_2D_X
=
bcrc_BARCODE_ERROR_Find3X8_2D_Y
=
bcrc_BARCODE_ERROR_2D_UgolMax
=
bcrc_BARCODE_ERROR_INDEFINITELY_DECODED =
bcrc_BARCODE_ERROR_Dllnotinit
=
bcrc_BARCODE_ERROR_IPDECODE_DLL_Try_Except =
bcrc_IPDECODE_ERROR_LARGEERRORS
=
bcrc_IPDECODE_ERROR_FAULTCOLUMNS
=
bcrc_IPDECODE_ERROR_FAULTROWS
=
bcrc_IPDECODE_ERROR_INCORRECT_ERROR_LEVEL =
bcrc_IPDECODE_ERROR_LOADING_DEV_TABLE
=
};
0,
–6001,
–6002,
–6003,
–6004,
–6005,
–6006,
–6008,
–6010,
–6019,
–6020,
–6024,
–6025,
–11001,
–11006,
–11012,
–11100,
–11200,
–11201,
–11202,
–11203,
–11204,
–11210,
–11300,
–11400,
–4503,
–4504,
–4505,
–4511,
–4512
Значение констант:
• bcrc_NoErrНет ошибок
ошибки RegCodes.dll:
• bcrc_NullPtrErrНулевые параметры вызова функции
• bcrc_BadArgErrОшибочные параметры вызова функции
Ошибочная длина данных
• bcrc_SizeErr
• bcrc_RangeErr
Ошибочный диапазон параметров
• bcrc_InternalErr
Внутренняя ошибка
• bcrc_TryExceptErr Срабатывание блока try-except
• bcrc_BarCodeNotFound
Ошибка нахождения штрихкода
140
Программные средства SDK
• bcrc_BarCodeDecodeErr
Ошибка раскодирования штрихкода
• bcrc_NoUserDLLFoundОшибка подключения ImageProcess.dll
• bcrc_NoIPPDLLFoundОшибка подключения IPP Dll
• bcrc_IppExecErr
Ошибка выполнения функции IPP
• bcrc_IppTryExceptErr Срабатывание блока try-except в функции IPP
ошибки ImagProcess.dll:
• bcrc_BARCODE_ERROR_Inputparam Ошибка входных данных
• bcrc_BARCODE_ERROR_FInit
Ошибка инициализации
• bcrc_BARCODE_ERROR_NotLoadIpDecodedll Ошибка
IpDecode.dll
подключения
• bcrc_BARCODE_ERROR_InnerProblem Внутренняя ошибка программы
• bcrc_BARCODE_ERROR_Decode_1D_BadDecode
Ошибка раскодирования одномерного штрихкода
• bcrc_BARCODE_ERROR_FindRowOrColumn
строк или столбцов (PDF417)
Ошибка
вычисления
количества
• bcrc_BARCODE_ERROR_Find3X8_2D_XОшибка вычисления MinX (PDF417)
• bcrc_BARCODE_ERROR_Find3X8_2D_YОшибка вычисления MinY (PDF417)
• bcrc_BARCODE_ERROR_2D_UgolMax Некорректный угол перекоса штрихкода (> 3
градусов)
• bcrc_BARCODE_ERROR_INDEFINITELY_DECODED
ошибки раскодирования
• bcrc_BARCODE_ERROR_Dllnotinit
Ошибка инициализации Dll
• bcrc_BARCODE_ERROR_IPDECODE_DLL_Try_Except
except в функции IPDECODE
ошибки IPDecode.dll:
• bcrc_IPDECODE_ERROR_LARGEERRORS
кодовых слов
Результат может содержать
Сработка
блока
try-
Слишком много ошибочных
• bcrc_IPDECODE_ERROR_FAULTCOLUMNS Определено неверное число столбцов
• bcrc_IPDECODE_ERROR_FAULTROWS Определено неверное число строк

141Программные средства SDK
Ошибочный
• bcrc_IPDECODE_ERROR_INCORRECT_ERROR_LEVEL
коррекции ошибок
уровень
• bcrc_IPDECODE_ERROR_LOADING_DEV_TABLE Ошибка загрузки DevTable.bin
5.4.15. eBarCodeModuleType
Перечисление eBarCodeModuleType содержит идентификаторы, определяющие тип
модуля штрихкода.
enum eBarCodeModuleType
{
MODULETYPE_TEXT = 0,
MODULETYPE_BYTE = 1,
MODULETYPE_NUM
= 2,
MODULETYPE_SHIFT = 3,
MODULETYPE_ALL
= 4
};
Значения констант:
• MODULETYPE_TEXT – модуль содержит текстовые данные;
• MODULETYPE_BYTE – модуль содержит байтовые данные;
• MODULETYPE_NUM – модуль содержит числовые данные;
• MODULETYPE_SHIFT – буфер расположения позиций «Shift in byte compaction
mode» в коде PDF417;
• MODULETYPE_ALL – модуль содержит любые данные.
5.4.16. eTestTextField
Перечисление eTestTextField содержит идентификаторы, определяющие результат
проверки правильности заполнения текстового поля МСЗ документа.
enum eTestTextField
{
tr_OK
tr_Process_Error
tr_Invalid_Checksum
tr_Syntax_Error
tr_Logic_Error
tr_SourcesComparison_Error
tr_FieldsComparison_LogicError
tr_UnknownStatus
tr_GlaresOnField
};
Значение констант:
• tr_OK
• tr_Process_Error
• tr_Invalid_Checksum
142
= 0x00000000,
= 0x00000001,
= 0x00000002,
= 0x00000004,
= 0x00000008,
= 0x00000010,
= 0x00000020,
= 0x00000040,
= 0x00000080
– нет ошибок заполнения;
– ошибка выполнения проверки;
– неверная контрольная сумма. Используется
только для полей «контрольная цифра»
(например,
ft_Document_Number_CheckDigit). Поле,
для
которого
рассчитывается
контрольная
сумма,
определяется
Программные средства SDK
соответствующим
типом,
т. е.
для
ft_Document_Number_CheckDigit
это
будет поле типа ft_Document_ Number;
• tr_Syntax_Error
– синтаксическая
ошибка
(например,
использование недопустимого символа);
• tr_Logic_Error
– логическая ошибка (неправильный формат
заполнения поля, срок действия документа
закончился и т. п.);
• tr_SourcesComparison_Error
– зарезервировано
для
внутреннего
использования;
• tr_FieldsComparison_LogicError – зарезервировано
для
внутреннего
использования;
• tr_UnknownStatus
– зарезервировано
для
внутреннего
использования;
• tr_GlaresOnField
– блики на поле.
5.4.17. eMRZClassQuality
Перечисление eMRZClassQuality содержит идентификаторы,
параметры проверки качества печати МСЗ документа.
определяющие
enum eMRZClassQuality
{
mrz_CLASS_QUALITY_X
= 21,
mrz_CLASS_QUALITY_Y
= 22,
mrz_CLASS_QUALITY_Z
= 23,
mrz_CLASS_QUALITY_CUSTOM
= 24
};
Установка параметров проверок осуществляется для различных классов качества
печати в соответствии со стандартом ISO 1831:1980 «Характеристики печатного
изображения для оптического распознавания символов»:
• mrz_CLASS_QUALITY_X
– параметры проверок для класса качества печати X;
• mrz_CLASS_QUALITY_Y
– параметры проверок для класса качества печати Y;
• mrz_CLASS_QUALITY_Z
– параметры проверок для класса качества печати Z;
• mrz_CLASS_QUALITY_CUSTOM – параметры проверок по умолчанию.
5.4.18. eCheckResult
Перечисление eCheckResult содержит идентификаторы, определяющие результат той
или иной проверки документа.
enum eMRZCheckResult
{
ch_Check_Error
= 0,
ch_Check_OK
= 1,
ch_Check_WasNotDone = 2
};
Значение констант:

143Программные средства SDK
– проверка не прошла, контролируемый параметр не
в допуске;
• ch_Check_OK
– проверка прошла, контролируемый параметр в допуске;
• ch_Check_WasNotDone – проверка не выполнялась.
• ch_Check_Error
5.4.19. eCheckDiagnose
Перечисление eCheckDiagnose содержит идентификаторы, определяющие результат
проверок, осуществляемых для различных полей и источников данных при
разнообразных внешних условиях.
enum eCheckDiagnose
{
chd_Unknown
= 0,
chd_Pass
= 1,
chd_InvalidInputData
= 2,
chd_InternalError
= 3,
chd_ExceptionInModule
= 4,
chd_UncertainVerification
= 5,
chd_NecessaryImageNotFound
= 7,
chd_PhotoSidesNotFound
= 8,
chd_InvalidChecksum
= 10,
chd_SyntaxError
= 11,
chd_LogicError
= 12,
chd_SourcesComparisonError
= 13,
chd_FieldsComparisonLogicError
= 14,
chd_InvalidFieldFormat
= 15,
chd_TrueLuminiscenceError
= 20,
chd_FalseLuminiscenceError
= 21,
chd_FixedPatternError
= 22,
chd_LowContrastInIRLight
= 23,
chd_IncorrectBackgroundLight
= 24,
chd_BackgroundComparisonError
= 25,
chd_IncorrectTextColor
= 26,
chd_PhotoFalseLuminiscence
= 27,
chd_TooMuchShift
= 28,
chd_ContactChipTypeMismatch
= 29,
chd_FibersNotFound
= 30,
chd_TooManyObjects
= 31,
chd_SpecksInUV
= 33,
chd_TooLowResolution
= 34,
chd_InvisibleElementPresent
= 40,
chd_VisibleElementAbsent
= 41,
chd_ElementShouldBeColored
= 42,
chd_ElementShouldBeGrayscale
= 43,
chd_PhotoWhiteIRDontMatch
= 44,
chd_UVDullPaper_MRZ
= 50,
chd_FalseLuminiscenceInMRZ
= 51,
chd_UVDullPaper_Photo
= 52,
chd_UVDullPaper_Blank
= 53,
chd_UVDullPaperError
= 54,
chd_FalseLuminiscenceInBlank
= 55,
chd_BadAreaInAxial
= 60,
chd_FalseIPIParameters
= 65,
chd_EncryptedIPI_NotFound
= 66,
chd_EncryptedIPI_DataDontMatch
= 67,
chd_FieldPosCorrector_Highlight_IR
= 80,
chd_FieldPosCorrector_GlaresInPhotoArea = 81,
chd_FieldPosCorrector_PhotoReplaced
= 82;
chd_FieldPosCorrector_LandmarksCheckError = 83,
chd_FieldPosCorrector_FacePresenceCheckError = 84,
chd_FieldPosCorrector_FaceAbsenceCheckError = 85,
chd_FieldPosCorrector_IncorrectHeadPosition
= 86,
chd_OVI_IR_Invisible
= 90,
chd_OVI_InsufficientArea
= 91,
chd_OVI_ColorInvariable
= 92,
chd_OVI_BadColor_Front
= 93,
chd_OVI_BadColor_Side
= 94,
chd_OVI_Wide_Color_Spread
= 95,
chd_OVI_BadColor_Percent
= 96,
chd_HologramElementAbsent
= 100,
144
Программные средства SDK
chd_Hologram_Side_Top_Images_Absent
= 101,
chd_HologramElementPresent
= 102,
chd_Hologram_Frames_IsAbsent
= 103,
chd_Hologram_HoloField_IsAbsent
= 104,
chd_PhotoPattern_Interrupted
= 110,
chd_PhotoPattern_Shifted
= 111,
chd_PhotoPattern_DifferentColors
= 112,
chd_PhotoPattern_IR_Visible
= 113,
chd_PhotoPattern_Not_Intersect
= 114,
chd_PhotoSize_Is_Wrong
= 115,
chd_PhotoPattern_InvalidColor
= 116,
chd_PhotoPattern_Shifted_Vert
= 117,
chd_PhotoPattern_PatternNotFound
= 118,
chd_PhotoPattern_DifferentLinesThickness = 119,
chd_Photo_IsNot_Rectangle
= 120,
chd_Photo_Corners_Is_Wrong
= 121,
chd_DocumentIsCancelling
= 122,
chd_TextColorShouldBeBlue
= 130,
chd_TextColorShouldBeGreen
= 131,
chd_TextColorShouldBeRed
= 132,
chd_TextShouldBeBlack
= 133,
chd_BarcodeWasReadWithErrors
= 140,
chd_BarcodeDataFormatError
= 141,
chd_BarcodeSizeParamsError
= 142,
chd_NotAllBarcodesRead
= 143,
chd_GlaresInBarcodeArea
= 144,
chd_NoCertificateForDigitalSignatureCheck = 145,
chd_PortraitComparison_PortraitsDiffer
= 150,
chd_PortraitComparison_NoServiceReply
= 151,
chd_PortraitComparison_ServiceError
= 152,
chd_PortraitComparison_NotEnoughImages
= 153,
chd_PortraitComparison_NoLivePhoto
= 154,
chd_PortraitComparison_NoServiceLicense = 155,
chd_PortraitComparison_NoPortraitDetected= 156,
chd_MobileImages_UnsuitableLightConditions = 160,
chd_MobileImages_WhiteUVNoDifference
= 161,
chd_FingerprintsComparison_Mismatch
= 170,
chd_HoloPhoto_FaceNotDetected
= 180,
chd_HoloPhoto_FaceComparisonFailed
= 181,
chd_HoloPhoto_GlareInCenterAbsent
= 182,
chd_HoloPhoto_HoloElementShapeError
= 183,
chd_HoloPhoto_AlgorithmStepsError
= 184,
chd_HoloPhoto_HoloAreasNotLoaded
= 185,
chd_HoloPhoto_FinishedByTimeout
= 186,
chd_HoloPhoto_DocumentOutsideFrame
= 187,
chd_Liveness_DepthCheckFailed
= 190,
chd_Liveness_ScreenCaptureDetected
= 191,
chd_Liveness_ElectronicDeviceDetected
= 192,
chd_MrzQuality_WrongSymbolPosition
= 200,
chd_MrzQuality_WrongBackground
= 201,
chd_MrzQuality_WrongMrzWidth
= 202,
chd_MrzQuality_WrongMrzHeight
= 203,
chd_MrzQuality_WrongLinePosition
= 204,
chd_MrzQuality_WrongFontType
= 205,
chd_OCRQuality_TextPosition
= 220,
chd_OCRQuality_InvalidFont
= 221,
chd_OCRQuality_InvalidBackground
= 222,
chd_LasInk_InvalidLinesFrequency
= 230,
chd_DocLiveness_BlackAndWhiteCopyDetected = 239,
chd_DocLiveness_ElectronicDeviceDetected= 240,
chd_DocLiveness_InvalidBarcodeBackground= 241,
chd_DocLiveness_VirtualCameraDetected
= 242,
chd_ICAO_IDB_Base32Error
= 243,
chd_ICAO_IDB_ZippedError
= 244,
chd_ICAO_IDB_MessageZoneEmpty
= 245,
chd_ICAO_IDB_SignatureMustBePresent
= 246,
chd_ICAO_IDB_SignatureMustNotBePresent = 247,
chd_ICAO_IDB_CertificateMustNotBePresent= 248,
chd_IncorrectObjectColor
= 250
};
Значение констант:
• chd_Unknown
• chd_Pass
• chd_InvalidInputData
• chd_InternalError

– проверка не проводилась;
– проверка прошла успешно;
– некорректные входные данные;
– внутренняя ошибка модуля;
145Программные средства SDK
– поймано исключение;
– невозможно
принять
достоверное
решение;
• chd_NecessaryImageNotFound
– не найдено изображение в нужном свете;
• chd_PhotoSidesNotFound
– не найдена нужная сторона фотографии;
• chd_InvalidChecksum
– неверная контрольная сумма;
• chd_SyntaxError
– синтаксическая ошибка;
• chd_LogicError
– логическая ошибка (например, дата выдачи
документа больше, чем текущая дата);
• chd_SourcesComparisonError
– несовпадение данных из различных
источников;
• chd_FieldsComparisonLogicError – логическая ошибка проверки данных;
• chd_InvalidFieldFormat
– неверный формат поля;
• chd_TrueLuminiscenceError
– элемент люминесценции в УФ не
соответствует эталону;
• chd_FalseLuminiscenceError
– наличие лишней люминесценции в УФ;
• chd_FixedPatternError
– шаблон не соответствует эталону;
• chd_LowContrastInIRLight
– низкий контраст объекта в проходящем
ИК;
• chd_IncorrectBackgroundLight – фон страницы слишком яркий или другого
цвета;
• chd_BackgroundComparisonError – яркость фона двух страниц различается;
• chd_IncorrectTextColor
– неверный цвет люминесценции текста в
УФ;
• chd_PhotoFalseLuminiscence
– некорректная
люминесценция
фотографии;
• chd_TooMuchShift
– объект
существенно
смещен
относительно стандартных координат;
• chd_ContactChipTypeMismatch – тип контактного чипа не соответствует
ожидаемому;
• chd_FibersNotFound
– не найдены защитные волокна в УФ;
• chd_TooManyObjects
– ошибка нахождения волокон;
• chd_SpecksInUV
– блики или засветка в УФ;
• chd_TooLowResolution
– слишком низкое разрешение для поиска
волокон;
• chd_InvisibleElementPresent – ошибочная видимость элемента в ИК;
• chd_VisibleElementAbsent
– элемент отсутствует в ИК;
• chd_ElementShouldBeColored
– элемент должен быть цветным;
• chd_ElementShouldBeGrayscale – элемент должен быть в градациях серого;
• chd_PhotoWhiteIRDontMatch
– фото в ИК не совпадает с фото в белом
свете;
• chd_UVDullPaper_MRZ
– свечение бумаги в МСЗ;
• chd_FalseLuminiscenceInMRZ
– люминесценция символов в МСЗ;
• chd_UVDullPaper_Photo
– свечение бумаги в области фото;
• chd_ExceptionInModule
• chd_UncertainVerification
146
Программные средства SDK
• chd_UVDullPaper_Blank
– свечение бумаги бланка;
• chd_UVDullPaperError
– свечение документа в УФ;
• chd_FalseLuminiscenceInBlank – элемент бланка люминесцирует;
• chd_BadAreaInAxial
– нарушение ретрорефлективной защиты;
• chd_FalseIPIParameters
– некорректные параметры для проверки
IPI;
• chd_EncryptedIPI_NotFound – не удалось декодировать информацию;
• chd_EncryptedIPI_DataDontMatch – декодированная информация не
соответствует другим истоникам данных;
• chd_FieldPosCorrector_Highlight_IR – слишком яркое изображение в ИК;
• chd_FieldPosCorrector_GlaresInPhotoArea - блики в зоне фото;
• chd_FieldPosCorrector_PhotoReplaced - портрет был заменён;
• chd_FieldPosCorrector_LandmarksCheckError – ошибка определения контрольных
точек лица (глаза);
• chd_FieldPosCorrector_FacePresenceCheckError – изображение лица не обнаружено;
• chd_FieldPosCorrector_FaceAbsenceCheckError – обнаружено изображение лица;
• chd_FieldPosCorrector_IncorrectHeadPosition – некорректное положение головы
на портрете;
• chd_OVI_IR_Invisible
– объект OVI не виден в ИК;
• chd_OVI_InsufficientArea
– недостаточная площадь объекта OVI;
• chd_OVI_ColorInvariable
– цвет объекта OVI не меняется;
• chd_OVI_BadColor_Front
– невозможно
определить
цвет
на
коаксиальном изображении;
• chd_OVI_BadColor_Side
– невозможно определить цвет на белом
изображении;
• chd_OVI_Wide_Color_Spread
– большая разбежка по цвету;
• chd_OVI_BadColor_Percent
– недостаточно информации о цвете;
• chd_HologramElementAbsent
– отсутствует голограмма;
• chd_Hologram_Side_Top_Images_Absent
– нет бокового и верхнего изображений.
Проверка отменена;
• chd_HologramElementPresent
– обнаружена голограмма;
• chd_Hologram_Frames_IsAbsent - рамки голограммы не найдены;
• chd_Hologram_HoloField_IsAbsent - поле голограммы не найдено;
• chd_PhotoPattern_Interrupted – паттерн прерывается;
• chd_PhotoPattern_Shifted
– некоторые
паттерны
смещены
относительно друг друга;
• chd_PhotoPattern_DifferentColors
– некоторые части паттерна имеют другой
цвет;
• chd_PhotoPattern_IR_Visible
– паттерн виден в ИК;
• chd_PhotoPattern_Not_Intersect – край фотографии не пересекается с
паттерном. Проверка отменена;
• chd_PhotoSize_Is_Wrong
– размер фотографии не соответствует
требованиям;

147Программные средства SDK
• chd_ PhotoPattern _ InvalidColor
– некоторые части паттерна не того цвета;
• chd_PhotoSize_Shifted_Vert
– некоторые
паттерны
смещены
относительно друг друга;
• chd_PhotoPattern_PatternNotFound
– паттерн не найден. Проверка отменена;
• chd_PhotoPattern_DifferentLinesThickness
– различная толщина линий;
• chd_Photo_IsNot_Rectangle – фотография не прямоугольной формы;
• chd_Photo_Corners_Is_Wrong – углы
фотографии
не
соответствуют
требованиям;
• chd_DocumentIsCancelling
– для внутреннего использования;
• chd_TextColorShouldBeBlue
– текст должен быть синим;
• chd_TextColorShouldBeGreen
– текст должен быть зеленым;
• chd_TextColorShouldBeRed
– текст должен быть красным;
• chd_TextShouldBeBlack
– текст должен быть черным;
• chd_BarcodeWasReadWithErrors – штрихкод прочитан с ошибками;
• chd_BarcodeDataFormatError
– ошибка в формате данных штрихкода;
• chd_BarcodeSizeParamsError
– ошибка в формате размера штрихкода;
• chd_NotAllBarcodesRead
– не все штрихкоды прочитаны;
• chd_GlaresInBarcodeArea
- блики в области штрихкода;
• chd_ NoCertificateForDigitalSignatureCheck - не найден сертификат для проверки
цифровой подписи);
• chd_PortraitComparison_PortraitsDiffer
–
портреты различаются;
• chd_PortraitComparison_NoServiceReply
–
нет ответа от сервиса сравнения лиц;
• chd_PortraitComparison_ServiceError
–
ошибка сервиса сравнения лиц;
• chd_PortraitComparison_NotEnoughImages
–
недостаточно изображений;
• chd_PortraitComparison_NoLivePhoto
–
нет изображения с камеры;
• chd_PortraitComparison_NoServiceLicense
–
отсутствует лицензия на сервисе;
• chd_PortraitComparison_NoPortraitDetected
–
портреты не найдены;
• chd_MobileImages_UnsuitableLightConditions – неподходящие условия
освещения;
• chd_MobileImages_WhiteUVNoDifference – нет различий между видимым и
УФ изображением. Возможная неисправность УФ фонаря;
• chd_FingerprintsComparison_Mismatch – отпечатки пальцев не совпадают;
• chd_HoloPhoto_FaceNotDetected – лицо не найдено;
• chd_HoloPhoto_FaceComparisonFailed – сравнение лиц не выдержано;
148
Программные средства SDK
• chd_HoloPhoto_GlareInCenterAbsent - отсутствует блик посередине;
• chd_HoloPhoto_HoloElementShapeError
- ошибка формы элемента
голограммы;
• chd_HoloPhoto_AlgorithmStepsError - ошибка шагов алгоритма;
• chd_HoloPhoto_HoloAreasNotLoaded - не загружены области голограммы;
• chd_HoloPhoto_FinishedByTimeout - анализ голограммы на фотографии
завершен по таймауту;
• chd_HoloPhoto_DocumentOutsideFrame – документ не попадает в кадр;
• chd_Liveness_DepthCheckFailed
- проверка Liveness не выдержана;
• chd_Liveness_ScreenCaptureDetected – обнаружена съёмка документа с экрана;
• chd_Liveness_ElectronicDeviceDetected – обнаружена съёмка документа с экрана
другого устройства;
• chd_MrzQuality_WrongSymbolPosition – некорректные размеры области
MRZ;
• chd_MrzQuality_WrongBackground - обнаружены признаки редактирования
области MRZ;
• chd_MrzQuality_WrongMrzWidth – некорректная ширина области MRZ;
• chd_MrzQuality_WrongMrzHeight – некорректная высота области MRZ;
• chd_MrzQuality_WrongLinePosition – некорректное расстояние между
линиями области MRZ;
• chd_MrzQuality_WrongFontType – недопустимый тип шрифта;
• chd_OCRQuality_TextPosition – недопустимое положение текстовых данных;
• chd_OCRQuality_InvalidFont – недопустимый шрифт текстовых данных;
• chd_OCRQuality_InvalidBackground
–
обнаружены
признаки
редактирования области текстовых данных;
• chd_LasInk_InvalidLinesFrequency – недопустимая частота линий LASINK
(узнать больше о LASINK);
• chd_DocLiveness_BlackAndWhiteCopyDetected
–
обнаружено
чёрно-белое
изображение;
• chd_DocLiveness_ElectronicDeviceDetected – на изображении обнаружены следы
электронного устройста;
• chd_DocLiveness_InvalidBarcodeBackground
– недопустимый фон
штрихкода;
• chd_DocLiveness_VirtualCameraDetected
– обнаружена виртуальная
камера;
• chd_ICAO_IDB_Base32Error – ошибка лексического анализа полезной нагрузки
штрихкода в кодировке Base32;
• chd_ICAO_IDB_ZippedError – ошибка распаковки данных;
• chd_ICAO_IDB_MessageZoneEmpty – зона сообщения пуста или само сообщение
некорректно;
• chd_ICAO_IDB_SignatureMustBePresent – требуется наличие цифровой подписи (в
соответствии со значением флага штрихкода);
• chd_ICAO_IDB_SignatureMustNotBePresent – цифровая подпись должна отсутствовать
(в соответствии со значением флага штрихкода);

149Программные средства SDK
– ссылка на сертификат должна
отсутствовать (в соответствии со значением флага штрихкода);
• chd_IncorrectObjectColor – обнаружен неверный цвет в паттерне объекта.
• chd_ICAO_IDB_CertificateMustNotBePresent
5.4.20. eRPRM_PostCalbackAction
Перечисление eRPRM_PostCalbackAction содержит идентификаторы, определяющие
варианты продолжения процедуры чтения полей заполнения документа после возврата
из callback-функции, в которой пользовательскому приложению были переданы
кандидаты распознавания типа сканируемого документа.
enum eRPRM_PostCalbackAction
{
RPRM_PostCalbackAction_Continue
RPRM_PostCalbackAction_Cancel
RPRM_PostCalbackAction_ProcessCandidate
};
= 0,
= 1,
= 2
Значение констант:
• RPRM_PostCalbackAction_Continue
– продолжать чтение данных для
документа,
который
определяется первым элементом
из списка;
• RPRM_PostCalbackAction_Cancel
– прервать дальнейшие операции,
требующие определения типа
документа;
• RPRM_PostCalbackAction_ProcessCandidate – продолжать чтение данных для
документа, который определяется
элементом из списка кандидатов
с индексом, содержащимся в
параметре
PostActionParameter callback-
функции
ResultReceivingFunc.
5.4.21. eRPRM_RCTP_Result_RecType
Перечисление
eRPRM_RCTP_Result_RecType
содержит
определяющие результат определения типа документа.
enum eRPRM_RCTP_Result_RecType
{
RPRM_RCTP_Result_Ok
=
RPRM_RCTP_Result_RecognClassConflict =
RPRM_RCTP_Result_RecognClassUnknown =
RPRM_RCTP_Result_Need_Other_Image
=
150
идентификаторы,
0,
14,
15
29
Программные средства SDK
};
Значение констант:
• RPRM_RCTP_Result_Ok
– тип документа определен, и первый
элемент
списка
кандидатов
распознавания типа документа
содержит результат;
• RPRM_RCTP_Result_RecognClassConflict – тип
документа не определен,
и пользовательское
приложение
должно произвести выбор одного
из кандидатов;
• RPRM_RCTP_Result_RecognClassUnknown – тип документа не определен, и
дальнейшая операция чтения данных
невозможна;
• RPRM_RCTP_Result_Need_Other_Image –
нужны
дополнительные
изображения для определения
типа документа.
5.4.22. eRFID_Presence
Перечисление eRFID_Presence содержит идентификаторы, определяющие наличие
и расположение RFID-микросхемы в документе определенного типа.
enum eRFID_Presence
{
rfpNone
= 0,
rfpMainPage = 1,
rfpBackPage = 2
};
Значение констант:
• rfpNone
– в документе нет RFID-микросхемы;
• rfpMainPage – RFID-микросхема расположена в странице данных документа;
• rfpBackPage – RFID-микросхема расположена в заднем форзаце документа.
5.4.23. eRPRM_Authenticity
Перечисление eRPRM_Authenticity содержит идентификаторы, определяющие
возможность проведения той или иной процедуры контроля подлинности документа
по изображениям для определенных схем освещения.
enum eRPRM_Authenticity
{
RPRM_Authenticity_None
RPRM_Authenticity_UV_Luminescence
RPRM_Authenticity_IR_B900
RPRM_Authenticity_Image_Pattern

=
=
=
=
0x00000000,
0x00000001,
0x00000002,
0x00000004,
151Программные средства SDK
RPRM_Authenticity_Axial_Protection
= 0x00000008,
RPRM_Authenticity_UV_Fibers
= 0x00000010,
RPRM_Authenticity_IR_Visibility
= 0x00000020,
RPRM_Authenticity_OCRSecurityText
= 0x00000040,
RPRM_Authenticity_IPI
= 0x00000080,
RPRM_Authenticity_IR_Photo
= 0x00000100,
RPRM_Authenticity_Photo_Embed_Type
= 0x00000200,
RPRM_Authenticity_OVI
= 0x00000400,
RPRM_Authenticity_IR_Luminescence
= 0x00000800,
RPRM_Authenticity_Holograms
= 0x00001000,
RPRM_Authenticity_Photo_Area
= 0x00002000,
RPRM_Authenticity_UV_Background
= 0x00004000,
RPRM_Authenticity_Portrait_Comparison
= 0x00008000,
RPRM_Authenticity_BarcodeFormatCheck
= 0x000010000,
RPRM_Authenticity_Kinegram
= 0x00020000,
RPRM_Authenticity_Letter_Screen
= 0x00040000,
RPRM_Authenticity_Holograms_Detection
= 0x00080000,
RPRM_Authenticity_Fingerprint_Comparison = 0x00100000,
RPRM_Authenticity_Liveness
= 0x0020000,
RPRM_Authenticity_Ocr
= 0x00400000,
RPRM_Authenticity_Mrz
= 0x00800000,
RPRM_Authenticity_EncryptedIPI
= 0x01000000,
RPRM_Authenticity_StatusOnly
= 0x80000000
RPRM_Authenticity_UV
= RPRM_Authenticity_UV_
Luminescence | RPRM_Authenticity_Image_Pattern | RPRM_Authenticity
_UV_Fibers,
};
Значение констант:
• RPRM_Authenticity_None
– проведение процедуры контроля
подлинности не предусмотрено;
• RPRM_Authenticity_UV_Luminescence - проведение процедуры контроля
УФ-люминесценции
материала
документа;
При производстве большинства документов используются материалы, которые не
люминесцируют в УФ-освещении, в отличие от обычной бумаги. Помимо этого,
люминесцирующими свойствами обладают многие клеящие вещества. Данный вид
проверки направлен на выявление подделок, при изготовлении которых использовалась
бумага. Проверяется как бланк целиком, так и отдельно область МСЗ. Для
документов, в которых фотоизображение владельца не люминесцирует, проверяется
и область фото для выявления переклейки. Кроме того, анализируется каждый из
символов МСЗ на предмет наличия остатков клеящих веществ. Это необходимо для
выявления подделок, в которых заменены отдельные символы.
• RPRM_Authenticity_IR_B900
152
- проведение процедуры контроля
контраста МСЗ для схемы ИК-
освещения;
Программные средства SDK
В соответствии с требованиями ICAO символы в МСЗ должны иметь определенный
контраст в ИК-освещении. Данный вид проверки контролирует соответствие данным
требованиям. Проверяется каждый символ, что позволяет выявлять случаи
корректировки частей МСЗ, таких как даты и контрольные цифры.
• RPRM_Authenticity_Image_Pattern
- проведение процедуры контроля
наличия объектов определенной
формы, цвета и яркости на
изображении;
Для защиты от подделок в большинстве документов используются уникальные
рисунки, элементы бланка либо изображения на ламинате, которые могут
проявляться либо изменять свою форму в различных видах освещения. В данном виде
проверки производится сравнение формы, размеров, цвета и местоположения таких
объектов (паттернов) с эталонными. Проверка проводится как в белом, так и в ИК- и
УФ-свете. Также данный вид проверки может включать в себя контроль OVI-объектов,
которые меняют свой цвет в зависимости от освещения. В некоторых документах
личные данные владельца напечатаны специальными чернилами, люминесцирующими в
УФ-свете. Для таких документов проверяется цвет люминесценции и её наличие для
каждого из полей. Зачастую один и тот же элемент защиты контролируется по
отдельности на бланке и на фото, чтобы исключить частичную подделку. Для
некоторых документов используются уникальные алгоритмы проверки объектов,
направленные на выявление подделок исключительно по изображению в белом свете.
• RPRM_Authenticity_Axial_Protection - проведение процедуры контроля
подлинности по изображениям для
схемы
белого
коаксиального
освещения;
Данный вид проверки проводится для документов, при изготовлении которых
используется специальное ламинирующее покрытие, разрушающееся при попытке
отделения его от бланка. Для визуализации данного вида защиты используется
специальная схема освещения, при которой угол наблюдения и угол освещения
совпадают. В тех областях, где ламинат был отклеен, появляются темные области,
поиск которых и осуществляется при данном виде проверки.
• RPRM_Authenticity_UV_Fibers
- проведение процедуры контроля
УФ-люминесценции
защитных
волокон;
На этапе приготовления бумажной смеси для документов в неё добавляют
специальные гибкие волокна, которые могут быть как видимыми, так и невидимыми в
белом свете, и обладают свойствами люминесценции в УФ-освещении. Количество
волокон и их местоположение являются уникальными для каждого образца одного

153Программные средства SDK
документа, однако цвет люминесценции и физические размеры остаются
постоянными. Данный вид проверки направлен на поиск волокон заданного цвета и
оценку их формы и размеров. Также анализируются объекты, которые имитируют
волокна: при их обнаружении пользователю выдается соответствующее сообщение.
• RPRM_Authenticity_IR_Visibility
- проведение процедуры контроля
видимости/невидимости
элементов бланка и персональных
данных для схемы ИК-освещения;
Элементы бланка, фотоизображение владельца, его личные данные могут быть как
ИК прозрачными (невидимыми) и ИК непрозрачными (видимыми), так и частично
видимыми в ИК. При попытке подделать документ эти требования могут не
соблюдаться. В данном виде проверки анализируется контраст в ИК-свете всех этих
элементов. Пристальное внимание уделяется фото. В некоторых документах (чаще
на поликарбонатной основе) фотоизображение в ИК полностью повторяет
изображение в белом свете – это также контролируется. Для документов, где
изображение владельца является частично видимым, проверяется видимость тех
частей фото, которые должны быть видны по результатам статистического
анализа изображений (например, черные волосы или одежда). Также для некоторых
документов проверяется совпадение контуров изображений в белом и ИК-свете, что
необходимо для выявления случаев, когда поддельное фото наносится поверх
исходного.
• RPRM_Authenticity_OCRSecurityText - проведение процедуры контроля
OCR скрытого текста для видимого
или УФ-освещения и его сравнения
с
заданным
источником
аналогичной
текстовой
информации;
Чувствительные персональные текстовые данные могут быть напечатаны в видимой
форме (видны невооружённым взглядом) или в скрытой форме (видны только в УФ
свете с помощью специализированного оборудования). При данной проверке
проводится их считывание и перекрестное сравнение данных. Помимо этого,
контролируется цвет УФ-люминесценции, так как часть полей наносится не черным
цветом, а синим, красным либо другим цветом.
• RPRM_Authenticity_IPI
154
- проведение процедуры контроля
визуализации
невидимых
персональных данных (IPI) и их
сравнения с информацией из
других источников;
Программные средства SDK
Задача данного вида проверки – визуализировать личные данные, которые были
нанесены на изображение владельца при персонализации документа. Чаще всего это
либо номер документа, либо имя/фамилия владельца. Если данные отсутствуют, это
свидетельствует о подделке.
- зарезервировано для внутренних
нужд;
• RPRM_Authenticity_Photo_Embed_Type - проведение процедуры проверки
типа нанесения фотографии;
• RPRM_Authenticity_IR_Photo
В описании каждого документа, включенного в базу данных шаблонов документов SDK,
содержится информация о том, каким образом нанесено изображение владельца:
наклеено либо напечатано. Если фотография была вклеена в документ там, где она
должна быть напечатана, то данный вид проверки обнаружит границы вклеенной
фотографии и укажет на это пользователю.
- проверка
подлинности
OVI
(Optically Variable Ink);
• RPRM_Authenticity_IR_Luminescence - зарезервировано для внутренних
нужд;
• RPRM_Authenticity_Holograms
- проведение процедуры проверки
голограмм
на
статичном
изображении;
• RPRM_Authenticity_OVI
Данный вид проверки может проводиться на статичном
контролируется исключительно наличие голограмм.
изображении,
где
• RPRM Authenticity Holograms Detection - проведение
процедуры
проверки голограмм на серии
кадров;
В данном случае проверка проводится на серии кадров, получаемых с мобильного
устройства. Подтверждается наличие голографического эффекта и для некоторых
документов верифицируется форма рисунка голограммы.
• RPRM_Authenticity_Photo_Area
- проведение процедуры проверки
фотографии
во
внутренних
паспортах РФ;
Специальная проверка, разработанная для защиты от переклейки фотографии в
российских внутренних паспортах, имеющих орнамент по границам фото.
Проверяется форма, цвет и ширина штрихов данного орнамента. Помимо этого,
проводится контроль отсутствия разрывов по границам фото, а также

155Программные средства SDK
контролируется взаимное расположение частей орнамента в пределах фото и на
бланке ‒ несовмещения быть не должно.
- зарезервировано для внутренних
нужд;
• RPRM_Authenticity_Portrait_Comparison
-
проведение
процедуры сравнения фотографий;
• RPRM_Authenticity_UV_Background
В данной проверке проводится сравнение изображений владельца, полученных с бланка
документа в белом свете и из RFID-чипа. Если лица не совпадают ‒ выдается
соответствующее сообщение об ошибке, и оба изображения лица выводятся в
результат на экране для визуального контроля.
• RPRM_Authenticity_BarcodeFormatCheck
-
проведение
процедуры проверки формата
штрихкода;
Реализованы две разновидности данной проверки. Так как в описании документа задано
количество и тип штрихкодов, то контролируется, чтобы все штрихкоды из описания
были найдены и успешно прочитаны. Второй разновидностью является более
подробный анализ результата декодирования двумерных кодов. В рамках одного типа
документа количество строк и столбцов двумерного кода изменяется в небольших
пределах. Код считается поддельным, если количество строк и столбцов не
соответствует статистически обоснованным значениям. Также анализируются
декодированные данные. Если из этих данных по тем или иным причинам не удалось
извлечь все необходимые текстовые и/или графические поля ‒ будет сформировано
сообщение об ошибке.
• RPRM_Authenticity_Kinegram
- проведение процедуры проверки
подлинности Kinegram;
На некоторых документах присутствует дополнительный элемент защиты в виде
голограммы, выполненной в соответствии с технологией Kinegram. Суть проверки
состоит в сравнении голограммы с эталонным значением по определенному алгоритму и
определением, является ли эта голограмма подлинной.
• RPRM_Authenticity_Letter_Screen
- проведение процедуры проверки
подлинности LetterScreen;
На некоторых документах присутствует дополнительное изображение владельца,
сформированное из строк с личными данными в соответствии с технологией
LetterScreen. Суть проверки состоит в контроле параметров, по которым
сформировано текущее дополнительное изображения владельца.
156
Программные средства SDK
• RPRM_Authenticity_Fingerprint_Comparison -
проведение
процедуры сравнения отпечатков
пальцев;
Данный вид проверки возможен лишь при использовании специального оборудования для
считывания отпечатков пальцев. При его наличии выполняется сканирование
отпечатков и сравнение их с теми, которые записаны в RFID-чипе.
• RPRM_Liveness
- проведение процедуры проверки
Liveness;
Это специальный вид проверки, реализованный на мобильных устройствах. Он
направлен на подтверждение того факта, что проверка документа проводится
непосредственно владельцем, а не с использованием его изображения. По специальному
алгоритму считываются параметры лица на различном расстоянии, оцениваются его
геометрические изменения и искажения, проводится сравнение с изображением лица
из документа, и на основе всей этой информации принимается окончательно решение.
• RPRM_Authenticity_Ocr - контроль качества печати персональных данных
по положению печати;
• RPRM_Authenticity_Mrz - проверка правильности размера строк МСЗ, их
взаимного расположения, отсутствия признаков редактирования изображения;
• RPRM_Authenticity_EncryptedIPI – проведение процедуры контроля
визуализации зашифрованных невидимых персональных данных (IPI) и их
сравнения с текстовой информацией из других источников;
Это проверка подлинности документов на улучшенный тип IPI, скрывающий
персональную информацию в виде специального 2D-штрихкода в основном фото.
• RPRM_Authenticity_StatusOnly – проверка подлинности, возвращающая
только статус проверки.
Данный вид проверки показывает только статус проверки подлинности без каких-либо
деталей.
5.4.24. eRPRM_SecurityFeatureType
Перечисление
eRPRM_SecurityFeatureType
содержит
определяющие типы элементов проверки подлинности документа.
enum eRPRM_SecurityFeatureType
{
SecurityFeatureType_Blank
SecurityFeatureType_Fill

идентификаторы,
=
=
0,
1,
157Программные средства SDK
};
SecurityFeatureType_Photo
= 2,
SecurityFeatureType_MRZ
= 3,
SecurityFeatureType_FalseLuminescence
= 4,
SecurityFeatureType_HoloSimple
= 5,
SecurityFeatureType_HoloVerifyStatic
= 6,
SecurityFeatureType_HoloVerifyMultiStatic
= 7,
SecurityFeatureType_HoloVerifyDinamic
= 8,
SecurityFeatureType_Pattern_NotInterrupted
= 9,
SecurityFeatureType_Pattern_NotShifted
= 10,
SecurityFeatureType_Pattern_SameColors
= 11,
SecurityFeatureType_Pattern_IRInvisible
= 12,
SecurityFeatureType_PhotoSize_Check
= 13,
SecurityFeatureType_Portrait_Comparison_vsGhost
= 14,
SecurityFeatureType_Portrait_Comparison_vsRFID
= 15,
SecurityFeatureType_Portrait_Comparison_vsVisual
= 16,
SecurityFeatureType_Barcode
= 17,
SecurityFeatureType_Pattern_DifferentLinesThicknes
= 18,
SecurityFeatureType_Portrait_Comparison_vsCamera
= 19,
SecurityFeatureType_Portrait_Comparison_RFIDvsCamera
= 20,
SecurityFeatureType_GhostPhoto
= 21,
SecurityFeatureType_ClearGhostPhoto
= 22,
SecurityFeatureType_InvisibleObject
= 23,
SecurityFeatureType_LowContrastObject
= 24,
SecurityFeatureType_Photo_Color
= 25,
SecurityFeatureType_Photo_Shape
= 26,
SecurityFeatureType_Photo_Corners
= 27,
SecurityFeatureType_OCR
= 28,
SecurityFeatureType_Portrait_Comparison_ExtvsVisual
= 29,
SecurityFeatureType_Portrait_Comparison_ExtvsRFID
= 30,
SecurityFeatureType_Portrait_Comparison_ExtvsLive
= 31,
SecurityFeatureType_Liveness_Depth
= 32,
SecurityFeatureType_Microtext
= 33,
SecurityFeatureType_FluorescentObject
= 34,
SecurityFeatureType_LandmarksCheck
= 35,
SecurityFeatureType_FacePresence
= 36,
SecurityFeatureType_FaceAbsence
= 38,
SecurityFeatureType_LivenessScreenCapture
= 39,
SecurityFeatureType_LivenessElectronicDevice
= 40,
SecurityFeatureType_LivenessOVI
= 41,
SecurityFeatureType_BarcodeSizeCheck
= 42,
SecurityFeatureType_LasInk
= 43,
SecurityFeatureType_Liveness_MLI
= 44,
SecurityFeatureType_Liveness_BarcodeBackground
= 45,
SecurityFeatureType_Portrait_Comparison_vsBarcode
= 46,
SecurityFeatureType_Portrait_Comparison_RFIDvsBarcode
= 47,
SecurityFeatureType_Portrait_Comparison_ExtvsBarcode
= 48,
SecurityFeatureType_Portrait_Comparison_BarcodevsCamera = 49,
SecurityFeatureType_CheckDigitalSignature
= 50,
SecurityFeatureType_ContactChipClassification
= 51,
SecurityFeatureType_HeadPositionCheck
= 52,
SecurityFeatureType_Liveness_BlackAndWhiteCopyCheck
= 53
Значение констант:
• SecurityFeatureType _Blank
– элемент бланка;
• SecurityFeatureType _Fill
– элемент заполнения;
• SecurityFeatureType _Photo
– фотография;
• SecurityFeatureType _MRZ
– машиносчитываемая зона;
• SecurityFeatureType _FalseLuminescence – область вокруг фото;
• SecurityFeatureType _HoloSimple
- зарезервировано
для
внутреннего использования;
• SecurityFeatureType _HoloVerifyStatic - зарезервировано
для
внутреннего использования;
158
Программные средства SDK
• SecurityFeatureType_HoloVerifyMultiStatic - зарезервировано
для
внутреннего использования;
• SecurityFeatureType _HoloVerifyDinamic - зарезервировано
для
внутреннего использования;
• SecurityFeatureType_Pattern_NotInterrupted - зарезервировано
для
внутреннего использования;
• SecurityFeatureType_Pattern_NotShifted - зарезервировано
для
внутреннего использования;
• SecurityFeatureType_Pattern_SameColors - зарезервировано
для
внутреннего использования;
• SecurityFeatureType_Pattern_IRInvisible - зарезервировано
для
внутреннего использования;
• SecurityFeatureType _PhotoSize_Check
- зарезервировано
для
внутреннего использования;
• SecurityFeatureType _Portrait_Comparison_vsGhost
- сравнение основного портрета
с дополнительным;
• SecurityFeatureType _Portrait_Comparison_vsRFID
- сравнение основного портрета
с портретом в RFID;
• SecurityFeatureType _Portrait_Comparison_vsVisual
- сравнение основного портрета
с портретом на другой
странице.
• SecurityFeatureType _Barcode
-
проверка формата штрих
кода;
• SecurityFeatureType _Pattern_DifferentLinesThickness -
различная толщина линий;
• SecurityFeatureType _Portrait_Comparison_vsCamera
-
сравнение
портрета
с
изображением с камеры;
• SecurityFeatureType _Portrait_Comparison_RFIDvsCamera -
сравнение
портрета
с
изображением из RFID;
• SecurityFeatureType _GhostPhoto
- дополнительный портрет;
• SecurityFeatureType _ClearGhostPhoto
- прозрачный дополнительный
портрет;
• SecurityFeatureType _InvisibleObject
-
невидимый объект;
• SecurityFeatureType _LowContrastObject -
неконтрастный объект;
• SecurityFeatureType _Photo_Color
-
цветность фотографии;
• SecurityFeatureType _Photo_Shape
-
квадратность фотографии;
• SecurityFeatureType _Photo_Corners
-
форма углов фотографии;
• SecurityFeatureType_OCR
-
качество печати текстовых
данных;

159Программные средства SDK
• SecurityFeatureType _Portrait_Comparison_ExtvsVisual -
сравнение портрета: внешнее
изображение с визуальной зоной;
• SecurityFeatureType _Portrait_Comparison_ExtvsRFID
-
сравнение портрета: внешнее
изображение с RFID;
• SecurityFeatureType _Portrait_Comparison_ExtvsLive
-
сравнение портрета: внешнее
изображение с изображением с
камеры;
• SecurityFeatureType _Liveness_Depth
проверка Liveness ;
• SecurityFeatureType_Microtext
проверка микротекста;
• SecurityFeatureType_FluorescentObject проверка
флуоресцентных
объектов (УФ с разными диапазонами длин волн);
• SecurityFeatureType_LandmarksCheck
проверка меcтоположения глаз,
носа и уголков губ;
• SecurityFeatureType_FacePresence
проверка присутствия лица в
заданной области;
• SecurityFeatureType_FaceAbsence
проверка отсутствия лица в
заданной области;
• SecurityFeatureType_LivenessScreenCapture
проверка
использования
фотографии
документа на устройстве вместо
оригинала документа;
• SecurityFeatureType_LivenessElectronicDevice проверка наличия в
кадре устройства, с экрана
которого
сделан
снимок
документа;
• SecurityFeatureType_LivenessOVI
проверка подлинности OVI
элемента;
• SecurityFeatureType_BarcodeSizeCheck
проверка размера штрихкода;
• SecurityFeatureType_LasInk
проверка функции безопасности
LASINK (узнать больше о
LASINK);
• SecurityFeatureType_Liveness_MLI
проверка функции безопасности
Multiple Laser Image (узнать
больше об MLI);
• SecurityFeatureType_Liveness_BarcodeBackground
проверка
фона
штрихкода;
• SecurityFeatureType_Portrait_Comparison_vsBarcode сравнение фото
из визуальной зоны с фото из
штрихкода;
160
Программные средства SDK
• SecurityFeatureType_Portrait_Comparison_RFIDvsBarcode сравнение
фото из RFID с фото из штрихкода;
• SecurityFeatureType_Portrait_Comparison_ExtvsBarcode сравнение
фото из внешнего источника
с фото из штрихкода;
• SecurityFeatureType_Portrait_Comparison_BarcodevsCamera
сравнение фото с камеры с
фото из штрихкода;
• SecurityFeatureType_CheckDigitalSignature проверка цифровой подписи;
• SecurityFeatureType_ContactChipClassification
проверка контактного чипа;
• SecurityFeatureType_HeadPositionCheck
проверка положения головы;
• SecurityFeatureType_Liveness_BlackAndWhiteCopyCheck - проверка на
чёрно-белое изображение.
5.4.25. eSecurityCriticalFlag
Перечисление eSecurityCriticalFlag содержит признак критичности проверки
того или иного элемента подлинности документа.
enum eSecurityCriticalFlag
{
CheckFeatureNotCritical = 0,
CheckFeatureIsCritical = 1
};
Значение констант:
• CheckFeatureNotCritical – элемент защиты может отсутствовать на
подлинных документах;
• CheckFeatureIsCritical – элемент защиты должен присутствовать на
подлинных документах.
5.4.26. eIR_Visibility_Flag
Перечисление eIR_Visibility_Flag
изображения в ИК-диапазоне.
содержит
признак
видимости
элемента
enum eIR_Visibility_Flag
{
ElementInvisible = 0,
ElementVisible
= 1 ,
ElementColored
= 2,
ElementGrayscale = 4,
};
Значение констант:
• ElementInvisible

– элемент невидим;
161Программные средства SDK
• ElementVisible – элемент видим;
• ElementColored – элемент с цветом;
• ElementGrayscale
– элемент в градациях серого.
5.4.27. eLED_Color
Перечисление eLED_Color содержит идентификаторы, определяющие цвет свечения
индикаторов считывателя документов.
enum eLED_Color
{
ledNone = 0,
ledRed
= 1,
ledGreen = 2,
ledOrange = 3
};
Значение констант:
• ledNone
– индикатор выключен;
• ledRed
– красный свет;
• ledGreen – зеленый свет;
• ledOrange – оранжевый свет.
5.4.28. eFDS_Light
Перечисление eFDS_Light содержит идентификаторы, определяющие тип защиты
документа, изображение для которого необходимо отобразить в главной
информационной панели FDS.
enum eFDS_Light
{
fdsWhite
=
fdsUV365
=
fdsIR
=
fdsMaterial =
};
1,
2,
4,
6
Значение констант:
• fdsWhite
– полиграфическая защита;
• fdsUV365
– защита в области УФ-излучения (365 нм);
• fdsIR
– защита в области ИК-излучения (900 нм);
• fdsMaterial – защита на уровне материалов.
5.4.29. eFDS_Panel
Перечисление eFDS_Panel содержит идентификаторы, определяющие тип панели ИСС.
enum eFDS_Panel
{
FDS_Panel_Main
= 0,
FDS_Panel_Countries
= 1,
FDS_Panel_Documents
= 2,
FDS_Panel_Caption
= 3,
FDS_Panel_Description = 4,
FDS_Panel_Illumination = 5,
FDS_Panel_PageType
= 6
};
162
Программные средства SDK
Значение констант:
• FDS_Panel_Main –
• FDS_Panel_Countries
• FDS_Panel_Documents
• FDS_Panel_Caption
• FDS_Panel_Description
• FDS_Panel_Illumination
• FDS_Panel_PageType
панель с изображениями документа;
– панель со списком стран;
– панель со списком документов выбранной страны;
– информационная панель;
– панель с общим описанием документа;
– панель с кнопками, соответствующими различным
типам защиты;
– панель с кнопками, активизирующими изображения
для различных страниц документа.
5.4.30. eFDS_Panel_Position
Перечисление eFDS_Panel_Position содержит идентификаторы, определяющие
расположение и видимость панели ИСС.
enum eFDS_Panel_Position
{
FDS_Panel_Hide
= 0,
FDS_Panel_Show
= 1,
FDS_Panel_ShowTop
= 2,
FDS_Panel_ShowBottom = 3
};
Значение констант:
• FDS_Panel_Hide
– скрыть панель;
• FDS_Panel_Show
– показать панель;
• FDS_Panel_ShowTop
– расположить панель у верхнего края родительского окна;
• FDS_Panel_ShowBottom – расположить панель у нижнего края родительского окна.
5.4.31. eRPRM_OutputFormat
Перечисление eRPRM_OutputFormat содержит идентификаторы, определяющие
формат представления данных и механизм их передачи в пользовательское
приложение при запросе результатов выполнения цикла сканирования и обработки с
помощью функции _CheckResult().
enum eRPRM_OutputFormat
{
ofrDefault
=
ofrTransport_Clipboard =
ofrTransport_File
=
ofrFormat_XML
=
ofrFormat_FileBuffer =
ofrFormat_ImagesXML
=
ofrFormat_JSON
=
ofrFileBuffer_File
=
ofrXML_Clipboard
=
ofrXML_File
=
ofrFileBuffer_XML_Clipboard
=
ofrFileBuffer_XML_File =

0,
0x00000002,
0x00000004,
0x00010000,
0x00020000,
0x00040000,
0x00080000,
ofrTransport_File | ofrFormat_FileBuffer,
ofrTransport_Clipboard | ofrFormat_XML,
ofrTransport_File
| ofrFormat_XML,
ofrXML_Clipboard | ofrFormat _FileBuffer,
ofrXML_File | ofrFormat_FileBuffer,
163Программные средства SDK
ofrJSON_Clipboard
= ofrTransport_Clipboard | ofrFormat_JSON,
ofrJSON_File
= ofrTransport_File
| ofrFormat_JSON,
ofrFileBuffer_JSON_Clipboard
= ofrJSON_Clipboard | ofrFormat_FileBuffer,
ofrFileBuffer_JSON_File = ofrJSON_File | ofrFormat_FileBuffer
};
Значение констант:
• ofrDefault
–
режим по умолчанию. Будет возвращен только
указатель на структуру данных результата;
• ofrTransport_Clipboard – сформированное XML-представление результата
или
графическое
изображение
будет
дополнительно помещено в буфер обмена ОС;
• ofrTransport_File
– сформированное XML-представление результата
или
графическое
изображение
будет
дополнительно записано в файл;
• ofrFormat_XML
– сформировать
XML-представление
структуры
данных результата;
• ofrFormat_FileBuffer
– сформировать образ графического файла,
содержащего запрашиваемое изображение;
• ofrFormat_ImagesXML
– сформировать
XML-представление
образа
графического
файла,
содержащего
запрашиваемое изображение;
• ofrFormat_JSON
– сформировать JSON- представление структуры
данных результата.
5.4.32. eLexAnalysisDepth
Перечисление eLexAnalysisDepth содержит возможные значения настроек
лексического
анализа
для
команд
RPRM_Command_Options_Get_LexAnalysisDepth
и
RPRM_Command_Options_Set_LexAnalysisDepth.
enum eLexAnalysisDepth
{
eLAD_Default
= 0x0000,
eLAD_ShowAllData
= 0x0001,
eLAD_ShowDataAndResults = 0x0002,
eLAD_CheckStopListOFF
= 0x0004,
eLAD_CheckDocNumZeroOFF = 0x0008,
eLAD_ICAOConvertionOFF = 0x0010,
eLAD_ConvertToCyrillicON= 0x0020,
eLAD_GenerateRussiaMRZStrings = 0x0040
eLAD_CompareRussiaAuthority = 0x0080,
eLAD_CheckLowProbabilityEnable = 0x0100
};
Значение констант:
• eLAD_Default
– режим по умолчанию, поля и результат с низкой
вероятностью не выдаются, поля проверяются
на присутствие в "стоп-листе", номер
документа не должен быть нулевым;
• eLAD_ShowAllData
– показывать все прочитанные данные, но
отключать
результаты
сравнения/верификации;
164
Программные средства SDK
• eLAD_ShowDataAndResults – показывать все данные и результаты вне
зависимости от вероятности распознавания;
– отключить проверку полей на присутствие в
"стоп-листе";
• eLAD_CheckDocNumZeroOFF – отключить проверку на нулевой номер
документа;
• eLAD_ICAOConvertionOFF – отключить конверсию значений текстовых
полей в латинский алфавит для сравнения с
МСЗ в соответствии с ICAO 9303;
• eLAD_ConvertToCyrillicON – включить конверсию значений текстовых
полей на латинице в кириллицу;
• eLAD_GenerateRussiaMRZStrings
– включить
создание
поля
ft_MRZ_Strings для российских паспортов
без МСЗ;
• eLAD_CompareRussiaAuthority
- сравнить сгенерированные поля
ft_Authority_RUS c ft_Authority в российском
национальном паспорте;
• eLAD_CheckLowProbabilityEnable - включить фильтрацию результатов с
низкой вероятностью.
• eLAD_CheckStopListOFF
5.4.33. eLexDateFormat
НЕ ИСПОЛЬЗУЕТСЯ
Перечисление eLexDateFormat содержит возможные значения форматов даты для
структуры
TLexDateFormat
для
команд
RPRM_Command_Options_Get_LexDateFormat
и
RPRM_Command_Options_Set_LexDateFormat.
enum eLexDateFormat
{
LDF_DefaultShort
LDF_DefaultLong
LDF_SystemShort
LDF_SystemLong
LDF_Universal
LDF_Custom
};
Значения констант:
• LDF_DefaultShort
• LDF_DefaultLong
• LDF_SystemShort
• LDF_SystemLong
• LDF_Universal
• LDF_Custom

= 0,
= 1,
= 2,
= 3,
= 4,
= 5
– режим по умолчанию, короткий формат даты
текущего пользователя;
– длинный формат даты текущего пользователя;
– короткий формат даты ОС;
– длинный формат даты ОС;
– универсальный формат даты по ISO 8601 вида “YYYY-
MM-DD”;
– формат даты задается вручную.
165Программные средства SDK
5.4.34. eImageQualityCheckType
Перечисление eImageQualityCheckType
проверок качества входных изображений.
содержит возможные значения типов
enum eImageQualityCheckType
{
IQC_ImageGlares
= 0,
IQC_ImageFocus
= 1,
IQC_ImageResolution = 2,
IQC_ImageColorness = 3,
IQC_Perspective
= 4,
IQC_Bounds
= 5,
IQC_ScreenCapture = 6,
IQC_Portrait
= 7,
IQC_Handwritten
= 8,
IQC_Brightness
= 9
};
Значения констант:
• IQC_ImageGlares
– проверка наличия бликов;
• IQC_ImageFocus
– проверка качества фокусировки;
• IQC_ImageResolution – проверка разрешения изображения;
• IQC_ImageColorness – проверка цвета изображения;
• IQC_Perspective
- проверка изображения на предмет перспективы;
• IQC_Bounds
- проверка изображения на предмет попадания
документа в кадр целиком;
• IQC_ScreenCapture
- проверка изображения на предмет съемки с экрана;
• IQC_Portrait
- проверка изображения на предмет наличия
портрета;
• IQC_Handwritten
- проверка изображения (визуальное распознавание
текста OCR) на предмет содержания рукописного текста в
отсканированных полях документа;
• IQC_Brightness
- проверка изображения на предмет достаточной
яркости.
5.4.35. diDocType
Перечисление diDocType содержит возможные значения типов документов.
enum diDocType
{
dtNotDefined
dtPassport
dtIdentityCard
dtDiplomaticPassport
dtServicePassport
dtSeamanIdentityDocument
dtIdentityCardForResidence
dtTravelDocument
dtOther
dtVisaID2
dtVisaID3
dtNationalIdentityCard
dtSocialIdentityCard
dtAliensIdentityCard
dtPrivilegedIdentityCard
dtResidencePermitIdentityCard
dtOriginCard
dtEmergencyPassport
dtAliensPassport
dtAlternativeIdentityCard
dtAuthorizationCard
dtBeginnerPermit
dtBorderCrossingCard
166
= 0,
= 11,
= 12,
= 13,
= 14,
= 15,
= 16,
= 17,
= 99,
= 29,
= 30,
= 20,
= 21,
= 22,
= 23,
= 24,
= 25,
= 26,
= 27,
= 28,
= 32,
= 33,
= 34,
Программные средства SDK
dtChauffeurLicense
dtChauffeurLicenseUnder18
dtChauffeurLicenseUnder21
dtCommercialDrivingLicense
dtCommercialDrivingLicenseInstructionalPermit
dtCommercialDrivingLicenseUnder18
dtCommercialDrivingLicenseUnder21
dtCommercialInstructionPermit
dtCommercialNewPermit
dtConcealedCarryLicense
dtConcealedFirearmPermit
dtConditionalDrivingLicense
dtDepartmentOfVeteransAffairsIdentityCard
dtDiplomaticDrivingLicense
dtDrivingLicense
dtDrivingLicenseInstructionalPermit
dtDrivingLicenseInstructionalPermitUnder18
dtDrivingLicenseInstructionalPermitUnder21
dtDrivingLicenseLearnersPermit
dtDrivingLicenseLearnersPermitUnder18
dtDrivingLicenseLearnersPermitUnder21
dtDrivingLicenseNovice
dtDrivingLicenseNoviceUnder18
dtDrivingLicenseNoviceUnder21
dtDrivingLicenseRegisteredOffender
dtDrivingLicenseRestrictedUnder18
dtDrivingLicenseRestrictedUnder21
dtDrivingLicenseTemporaryVisitor
dtDrivingLicenseTemporaryVisitorUnder18
dtDrivingLicenseTemporaryVisitorUnder21
dtDrivingLicenseUnder18
dtDrivingLicenseUnder21
dtEmploymentDrivingPermit
dtEnhancedChauffeurLicense
dtEnhancedChauffeurLicenseUnder18
dtEnhancedChauffeurLicenseUnder21
dtEnhancedCommercialDrivingLicense
dtEnhancedDrivingLicense
dtEnhancedDrivingLicenseUnder18
dtEnhancedDrivingLicenseUnder21
dtEnhancedIdentityCard
dtEnhancedIdentityCardUnder18
dtEnhancedIdentityCardUnder21
dtEnhancedOperatorsLicense
dtFirearmsPermit
dtFullProvisionalLicense
dtFullProvisionalLicenseUnder18
dtFullProvisionalLicenseUnder21
dtGenevaConventionsIdentityCard
dtGraduatedDrivingLicenseUnder18
dtGraduatedDrivingLicenseUnder21
dtGraduatedInstructionPermitUnder18
dtGraduatedInstructionPermitUnder21
dtGraduatedLicenseUnder18
dtGraduatedLicenseUnder21
dtHandgunCarryPermit
dtIdentityAndPrivilegeCard
dtIdentityCardMobilityImpaired
dtIdentityCardRegisteredOffender
dtIdentityCardTemporaryVisitor
dtIdentityCardTemporaryVisitorUnder18
dtIdentityCardTemporaryVisitorUnder21
dtIdentityCardUnder18
dtIdentityCardUnder21
dtIgnitionInterlockPermit
dtImmigrantVisa
dtInstructionPermit
dtInstructionPermitUnder18
dtInstructionPermitUnder21
dtInterimDrivingLicense
dtInterimIdentityCard
dtIntermediateDrivingLicense
dtIntermediateDrivingLicenseUnder18
dtIntermediateDrivingLicenseUnder21
dtJuniorDrivingLicense
dtLearnerInstructionalPermit
dtLearnerLicense
dtLearnerLicenseUnder18
dtLearnerLicenseUnder21

= 35,
= 36,
= 37,
= 38,
= 39,
= 40,
= 41,
= 42,
= 43,
= 44,
= 45,
= 46,
= 47,
= 48,
= 49,
= 50,
= 51,
= 52,
= 53,
= 54,
= 55,
= 56,
= 57,
= 58,
= 59,
= 60,
= 61,
= 62,
= 63,
= 64,
= 65,
= 66,
= 67,
= 68,
= 69,
= 70,
= 71,
= 72,
= 73,
= 74,
= 75,
= 76,
= 77,
= 78,
= 79,
= 80,
= 81,
= 82,
= 83,
= 84,
= 85,
= 86,
= 87,
= 88,
= 89,
= 90,
= 91,
= 92,
= 93,
= 94,
= 95,
= 96,
= 97,
= 98,
= 100,
= 101,
= 102,
= 103,
= 104,
= 105,
= 106,
= 107,
= 108,
= 109,
= 110,
= 111,
= 112,
= 113,
= 114,
167Программные средства SDK
dtLearnerPermit
dtLearnerPermitUnder18
dtLearnerPermitUnder21
dtLimitedLicense
dtLimitedPermit
dtLimitedTermDrivingLicense
dtLimitedTermIdentityCard
dtLiquorIdentityCard
dtNewPermit
dtNewPermitUnder18
dtNewPermitUnder21
dtNonUsCitizenDrivingLicense
dtOccupationalDrivingLicense
dtOneidaTribeOfIndiansIdentityCard
dtOperatorLicense
dtOperatorLicenseUnder18
dtOperatorLicenseUnder21
dtPermanentDrivingLicense
dtPermitToReenter
dtProbationaryAutoLicense
dtProbationaryDrivingLicenseUnder18
dtProbationaryDrivingLicenseUnder21
dtProbationaryVehicleSalespersonLicense
dtProvisionalDrivingLicense
dtProvisionalDrivingLicenseUnder18
dtProvisionalDrivingLicenseUnder21
dtProvisionalLicense
dtProvisionalLicenseUnder18
dtProvisionalLicenseUnder21
dtPublicPassengerChauffeurLicense
dtRacingAndGamingComissionCard
dtRefugeeTravelDocument
dtRenewalPermit
dtRestrictedCommercialDrivingLicense
dtRestrictedDrivingLicense
dtRestrictedPermit
dtSeasonalPermit
dtSeasonalResidentIdentityCard
dtSeniorCitizenIdentityCard
dtSexOffender
dtSocialSecurityCard
dtTemporaryDrivingLicense
dtTemporaryDrivingLicenseUnder18
dtTemporaryDrivingLicenseUnder21
dtTemporaryIdentityCard
dtTemporaryInstructionPermitIdentityCard
dtTemporaryInstructionPermitIdentityCardUnder18
dtTemporaryInstructionPermitIdentityCardUnder21
dtTemporaryVisitorDrivingLicense
dtTemporaryVisitorDrivingLicenseUnder18
dtTemporaryVisitorDrivingLicenseUnder21
dtUniformedServicesIdentityCard
dtVehicleSalespersonLicense
dtWorkerIdentificationCredential
dtCommercialDrivingLicenseNovice
dtCommercialDrivingLicenseNoviceUnder18
dtCommercialDrivingLicenseNoviceUnder21
dtPassportCard
dtPermanentResidentCard
dtPersonalIdentificationVerification
dtTemporaryOperatorLicense
dtDrivingLicenseUnder19
dtIdentityCardUnder19
dtVisa
dtTemporaryPassport
dtVotingCard
dtHealthCard
dtCertificateOfCitizenship
dtAddressCard
dtAirportImmigrationCard
dtAlienRegistrationCard
dtAPEHCard
dtCouponToDrivingLicense
dtCrewMemberCertificate
dtDocumentForReturn
dtECard
dtEmploymentCard
dtHKSARImmigrationForm
dtImmigrantCard
168
= 115,
= 116,
= 117,
= 118,
= 119,
= 120,
= 121,
= 122,
= 123,
= 124,
= 125,
= 126,
= 127,
= 128,
= 129,
= 130,
= 131,
= 132,
= 133,
= 134,
= 135,
= 136,
= 137,
= 138,
= 139,
= 140,
= 141,
= 142,
= 143,
= 144,
= 145,
= 146,
= 147,
= 148,
= 149,
= 150,
= 151,
= 152,
= 153,
= 154,
= 155,
= 156,
= 157,
= 158,
= 159,
= 160,
= 161,
= 162,
= 163,
= 164,
= 165,
= 166,
= 167,
= 168,
= 169,
= 170,
= 171,
= 172,
= 173,
= 174,
= 175,
= 176,
= 177,
= 178,
= 179,
= 180,
= 181,
= 182,
= 183,
= 184,
= 185,
= 186,
= 187,
= 188,
= 189,
= 190,
= 191,
= 192,
= 193,
Программные средства SDK
dtLabourCard
dtLaissezPasser
dtLawyerIdentityCertificate
dtLicenseCard
dtPassportStateless
dtPassportChild
dtPassportConsular
dtPassportDiplomaticService
dtPassportOfficial
dtPassportProvisional
dtPassportSpecial
dtPermissionToTheLocalBorderTraffic
dtRegistrationCertificate
dtSEDESOLCard
dtSocialCard
dtTBCard
dtVehiclePassport
dtWDocument
dtDiplomaticIdentityCard
dtConsularIdentityCard
dtIncomeTaxCard
dtResidencePermit
dtDocumentOfIdentity
dtBorderCrossingPermit
dtPassportLimitedValidity
dtSIMCard
dtTaxCard
dtCompanyCard
dtDomesticPassport
dtIdentityCertificate
dtResidentIdCard
dtArmedForcesIdentityCard
dtProfessionalCard
dtRegistrationStamp
dtDriverCard
dtDriverTrainingCertificate
dtQualificationDrivingLicense
dtMembershipCard
dtPublicVehicleDriverAuthorityCard
dtMarineLicense
dtTemporaryLearnerDrivingLicense
dtTemporaryCommercialDrivingLicense
dtInterimInstructionalPermit
dtCertificateOfCompetency
dtCertificateOfProficiency
dtTradeLicense
dtPassportPage
dtInvoice
dtPassengerLocatorForm
};
Значение констант соответствует названию.
= 194,
= 195,
= 196,
= 197,
= 198,
= 199,
= 200,
= 201,
= 202,
= 203,
= 204,
= 205,
= 206,
= 207,
= 208,
= 209,
= 210,
= 211,
= 212,
= 213,
= 214,
= 215,
= 216,
= 217,
= 218,
= 219,
= 220,
= 221,
= 222,
= 223,
= 224,
= 225,
= 226,
= 227,
= 228,
= 229,
= 230,
= 231,
= 232,
= 233,
= 234,
= 235,
= 236,
= 237,
= 238,
= 239,
= 240,
= 241,
= 242,
5.4.36. eRPRM_ResultStatus
Перечисление eRPRM_ResultStatus содержит возможные коды возврата из
функций _CheckResult() и _CheckResultFromList().
enum eRPRM_ResultStatus
{
RPRM_ResultStatus_NotAvailable
=
RPRM_ResultStatus_EndOfList
=
RPRM_ResultStatus_InvalidParameter =
RPRM_ResultStatus_IOError
=
RPRM_ResultStatus_InvalidFilename =
RPRM_ResultStatus_ClipboardError =
RPRM_ResultStatus_NotEnoughMemory =
RPRM_ResultStatus_NotSupported
=
};
Значение констант:
• RPRM_ResultStatus_NotAvailable

0xffffffff,
0xfffffffe,
0xfffffffd,
0xfffffffb,
0xfffffffa,
0xfffffff9,
0xfffffff8,
0xfffffff7
– запрошенный
недоступен;
тип
результата
169Программные средства SDK
– на предыдущем шаге получения данных
из полей результатов, представленных в
виде структур-списков, был достигнут
конец списка, и новых данных в
обрабатываемом списке больше нет;
• RPRM_ResultStatus_InvalidParameter – неверный параметр вызова функции;
• RPRM_ResultStatus_IOError
– ошибка файлового вывода;
• RPRM_ResultStatus_InvalidFilename – неверное имя файла;
• RPRM_ResultStatus_ClipboardError – невозможно выполнить операцию
с буфером обмена ОС;
• RPRM_ResultStatus_NotEnoughMemory – не хватает памяти для выполнения
операции;
• RPRM_ResultStatus_NotSupported
– указанный
формат
представления
данных или механизм их передачи
недоступен для заданного типа
результата.
• RPRM_ResultStatus_EndOfList
5.4.37. eRPRM_NotificationCodes
Перечисление eRPRM_NotificationCodes содержит возможные коды сообщений,
получаемых пользовательским приложением через callback-функцию NotifyFunc.
enum eRPRM_NotificationCodes
{
RPRM_Notification_Error
= 0x00000000,
RPRM_Notification_DeviceDisconnected
= 0x00000001,
RPRM_Notification_DocumentReady
= 0x00000002,
RPRM_Notification_Scanning
= 0x00000004,
RPRM_Notification_Calibration
= 0x00000008,
RPRM_Notification_CalibrationProgress
= 0x00000009,
RPRM_Notification_EnumeratingDevices
= 0x0000000C,
RPRM_Notification_ConnectingDevice
= 0x0000000D,
RPRM_Notification_DocumentCanBeRemoved
= 0x0000000E,
RPRM_Notification_LidOpen
= 0x0000000F,
RPRM_Notification_Processing
= 0x00000010,
RPRM_Notification_DownloadingCalibrationInfo = 0x00000011,
RPRM_Notification_LicenseExpired
= 0x00000012,
RPRM_Notification_OperationProgress
= 0x00000013,
RPRM_Notification_LatestAvailableSDK
= 0x00000014,
RPRM_Notification_LatestAvailableDatabase
= 0x00000015,
RPRM_Notification_VideoFrame
= 0x00000016,
RPRM_Notification_CompatibilityMode
= 0x00000017,
};
Значение констант:
• RPRM_Notification_Error
Возникновение некритической ошибки. Код
ошибки (одно из значений eRPRM_ErrorCodes) находится в параметре value.
Обратите внимание, что отрицательные значения кодов ошибки служат для
внутреннего использования и должны игнорироваться.
• RPRM_Notification_DeviceDisconnected Активный
считыватель
документов был отключен от USB-порта ПК, и дальнейшая работа с ним невозможна
• RPRM_Notification_DocumentReady Индикация
срабатывания
датчика
присутствия документа. Значение в value показывает, был ли документ помещен в
считыватель (true) либо удален из него (false)
170
Программные средства SDK
Индикация
выполнения
операции
сканирования изображений. Значение в value показывает начало (false) либо
окончание операции (true)
• RPRM_Notification_Scanning
Индикация
выполнения
операции
калибровки считывателя документов. Значение в value показывает начало (false)
либо окончание операции (true)
• RPRM_Notification_Calibration
• RPRM_Notification_CalibrationProgress Индикация прогресса выполнения
операции калибровки считывателя. Значение в value содержит значение в процентах
от общей длительности операции
Индикация
выполнения
операции поиска подключенных к ПК в текущий момент времени считывателей
документов. Значение в value показывает начало (false) либо окончание (true)
операции
• RPRM_Notification_EnumeratingDevices
• RPRM_Notification_ConnectingDevice Индикация выполнения операции
подключения считывателя документов. Значение в value показывает начало (false)
либо окончание (true) операции
• RPRM_Notification_DocumentCanBeRemoved Индикация момента времени,
когда документ может быть извлечен из считывателя после проведения сканирования
изображений.
• RPRM_Notification_LidOpen
Индикация срабатывания датчика открытия
крышки прибора. Значение в value показывает, была ли крышка открыта (true) либо
закрыта (false)
• RPRM_Notification_Processing Индикация
выполнения
операции
обработки изображений. Значение в value показывает начало (false) либо
окончание операции (true)
Индикация прогресса
скачивания калибровочной информации из считывателя. Значение в value содержит
значение в процентах от общей длительности операции
• RPRM_Notification_DownloadingCalibrationInfo
Индикация того, что лицензия на
обновление SDK для этого устройство истекла. value содержит количество дней с 1
января 1900, в течение которых лицензия была активна.
• RPRM_Notification_LicenseExpired
Индикация прогресса операции.
Значение в value содержит значение в процентах от общей длительности операции
• RPRM_Notification_OperationProgress
Индикация
последней
доступной версии SDK. Значение в value содержит версию в четырех байтах.
• RPRM_Notification_LatestAvailableSDK

171Программные средства SDK
Индикация
последней доступной версии базы данных. Значение в value содержит версию в
четырех байтах.
• RPRM_Notification_LatestAvailableDatabase
• RPRM_Notification_VideoFrame
изображения
видеодетекции.
TVideodetectionNotification*.
Индикация
Значение
в
доступности
value
нового
содержит
Индикация работы устройства
в режиме совместимости. Значение в value содержит eDeviceLimitations*.
• RPRM_Notification_CompatibilityMode
5.4.38. eRPRM_ErrorCodes
Перечисление eRPRM_ErrorCodes содержит возможные коды, возвращаемые
функциями главной управляющей библиотеки SDK и получаемые через callback-
функцию NotifyFunc с приходом сообщения RPRM_Notification_Error.
enum eRPRM_ErrorCodes
{
RPRM_Error_NoError
RPRM_Error_AlreadyDone
RPRM_Error_NoGraphManager
RPRM_Error_CantRegisterMessages
RPRM_Error_NoServiceManager
RPRM_Error_CantConnectServiceManager
RPRM_Error_CantCreateDeviceLibraryEvent
RPRM_Error_InvalidParameter
RPRM_Error_NotInitialized
RPRM_Error_Busy
RPRM_Error_NotEnoughMemory
RPRM_Error_BadVideo
RPRM_Error_ScanAborted
RPRM_Error_CantRecognizeDocumentType
RPRM_Error_CantSetupSensor
RPRM_Error_NotTrueColorDesktop
RPRM_Error_NotAvailable
RPRM_Error_DeviceError
RPRM_Error_DeviceDisconnected
RPRM_Error_WrongThreadContext
RPRM_Error_COMServers
RPRM_Error_NoDocumentReadersFound
RPRM_Error_NoTranslationMngr
RPRM_Error_NoActiveDevice
RPRM_Error_ConnectingDevice
RPRM_Error_Failed
RPRM_Error_LightIsNotAllowed
RPRM_Error_ImageIOError
RPRM_Error_CantStoreCalibrationData
RPRM_Error_DeviceNotCalibrated
RPRM_Error_CantCompensateDistortion
RPRM_Error_OperationCancelled
RPRM_Error_CantLocateDocumentBounds
RPRM_Error_CantRefineImages
RPRM_Error_CantCropRotateImages
RPRM_Error_IncompleteImagesList
RPRM_Error_CantReadMRZ
RPRM_Error_CantFindBarcodes
RPRM_Error_DeviceIDNotSupported
RPRM_Error_DeviceIDNotStored
RPRM_Error_DeviceDriver
RPRM_Error_CalibrationOpenLid
RPRM_Error_Calibration_Brightness
RPRM_Error_Calibration_WhiteBalance
RPRM_Error_Calibration_TargetPosition
RPRM_Error_Calibration_LightBlank
RPRM_Error_Calibration_LightDistortion
RPRM_Error_Calibration_LightLevel
172
= 0x00000000,
= 0x00000001,
= 0x00000002,
= 0x00000003,
= 0x00000004,
= 0x00000006,
= 0x00000009,
= 0x0000000C,
= 0x0000000D,
= 0x0000000E,
= 0x00000011,
= 0x00000014,
= 0x00000015,
= 0x00000016,
= 0x00000018,
= 0x00000019,
= 0x0000001A,
= 0x0000001B,
= 0x00000020,
= 0x00000030,
= 0x00000031,
= 0x00000032,
= 0x00000033,
= 0x00000034,
= 0x00000035,
= 0x00000036,
= 0x00000037,
= 0x00000038,
= 0x00000039,
= 0x0000003A,
= 0x0000003B,
= 0x0000003C,
= 0x0000003D,
= 0x0000003E,
= 0x0000003F,
= 0x00000040,
= 0x00000041,
= 0x00000042,
= 0x00000043,
= 0x00000044,
= 0x00000045,
= 0x00000046,
= 0x00000047,
= 0x00000048,
= 0x00000049,
= 0x0000004A
= 0x0000004B,
= 0x0000004C,
Программные средства SDK
};
RPRM_Error_Calibration_LightLevelHigh
RPRM_Error_Calibration_LightLevelLow
RPRM_Error_8305CameraAbsent
RPRM_Error_NotImplemented
RPRM_Error_RemoveDocument
RPRM_Error_BadDataFile
RPRM_Error_BadInputImage
Значение констант:
• RPRM_Error_NoError
• RPRM_Error_AlreadyDone
= 0x0000004D,
= 0x0000004E,
= 0x00000050,
= 0x00000051,
= 0x00000052,
= 0x00000053, ,
= 0x00000054
Операция завершена успешно
Операция уже выполнялась ранее
• RPRM_Error_NoGraphManager Ошибка
Дальнейшая работа невозможна
подключения
к
DGraph.dll.
Ошибка регистрации управляющих
сообщений Windows. Дальнейшая работа невозможна
• RPRM_Error_CantRegisterMessages
• RPRM_Error_NoServiceManager
Невозможно найти или инициализировать
RSrvMngr.exe. Дальнейшая работа невозможна
• RPRM_Error_CantConnectServiceManager
RSrv Mngr.exe. Дальнейшая работа невозможна
Ошибка
подключения
к
• RPRM_Error_CantCreateDeviceLibraryEvent Ошибка
создания
управляющих элементов библиотеки управления устройством. Дальнейшая работа
невозможна
• RPRM_Error_InvalidParameter Неверный параметр вызова функции
Главная управляющая библиотека не была
• RPRM_Error_NotInitialized
проинициализирована
• RPRM_Error_BusyВыполняется предыдущая команда
• RPRM_Error_NotEnoughMemoryНе
запрашиваемого действия
хватает
памяти
для
выполнения
• RPRM_Error_BadVideo
Видео работает в замедленном режиме –
менее 3 кадров в секунду. Данная ситуация может возникнуть из-за проблем с
правильным функционированием драйвера устройства и системных средств Windows.
Дальнейшая работа с устройством невозможна. Это ошибка может возникнуть только
при подключении устройств, управляемых посредством DirectShow
Сканирование не завершено, поскольку документ
был извлечен из устройства до момента получения всех необходимых изображений
• RPRM_Error_ScanAborted

173Программные средства SDK
• RPRM_Error_CantRecognizeDocumentType
документа
Не удалось определить тип
Во
время
инициализации
устройства
обнаружено
присутствие
документа,
что
мешает
проведению
настройки чувствительности датчика. Необходимо извлечь документ и повторить
операцию подключения
• RPRM_Error_CantSetupSensor
Текущие настройки цветности рабочего
стола ОС препятствуют нормальной работе с устройством (для считывателей с
управлением посредством DirectShow). Рабочий стол должен иметь цветность 24 или
32 бита на цвет
• RPRM_Error_NotTrueColorDesktop
Запрошенная операция недоступна в
• RPRM_Error_NotAvailable
текущий момент времени
• RPRM_Error_DeviceError Ошибка инициализации устройства. Дальнейшая
работа с ним невозможна
• RPRM_Error_DeviceDisconnected Устройство
было
отключено
от
ПК
и
выполнение запрошенного действия невозможно
• RPRM_Error_WrongThreadContext Функция _Free() вызвана не из того
рабочего потока приложения, из которого вызывалась функция _Initialize()
• RPRM_Error_COMServers
Ошибка функционирования используемых COM-
серверов
• RPRM_Error_NoDocumentReadersFound
документов, подключенного к ПК
• RPRM_Error_NoTranslationMngr
Не найдено ни одного считывателя
Ошибка подключения к RTrans.exe
• RPRM_Error_NoActiveDevice
Выполнение
запрошенной
невозможно
из-за
отсутствия
подключенного
RPRM_Command_Device_ Connect) считывателя документов
• RPRM_Error_ConnectingDevice
Дальнейшая работа с ним невозможна
• RPRM_Error_Failed
Ошибка
подключения
операции
(командой
устройства.
Общая ошибка выполнения запрошенной операции
• RPRM_Error_LightIsNotAllowed
Указанная комбинация схем освещения
не может быть использована при проведении цикла сканирования
174
Программные средства SDK
• RPRM_Error_ImageIOError
манипуляциях с изображениями
Ошибка
файлового
• RPRM_Error_CantStoreCalibrationData
калибровки
• RPRM_Error_DeviceNotCalibrated
запрашиваемое действие невозможно
ввода/вывода
при
Невозможно сохранить данные
Устройство
не
Ошибка
компенсации геометрических искажений изображений
• RPRM_Error_CantCompensateDistortion
откалибровано,
при
проведении
• RPRM_Error_OperationCancelled Текущая операция прервана пользователем
• RPRM_Error_CantLocateDocumentBounds
документа на изображении
Не удалось определить границы
• RPRM_Error_CantRefineImages
Ошибка при
неравномерности освещения и цветовой коррекции
проведении
компенсации
• RPRM_Error_CantCropRotateImages Ошибка при повороте или обрезке
изображения по найденным границам документа
• RPRM_Error_IncompleteImagesList Предоставленный для обработки список
изображений не полон (для команды RPRM_Command_ProcessImagesList)
• RPRM_Error_CantReadMRZ
Не удалось найти или прочитать МСЗ
• RPRM_Error_CantFindBarcodes Не удалось найти или прочитать штрихкод
• RPRM_Error_DeviceIDNotSupported Прошивка
считывателя
не
поддерживает сохранение идентификационного номера (по умолчанию он равен
0х0000)
• RPRM_Error_DeviceIDNotStored
Идентификационный номер не прошит
в память считывателя (по умолчанию он равен 0хFFFF)
Необходимо обновить драйвер устройcтва
(для считывателей, оборудованных цифровой камерой Cypress или Micron).
Дальнейшая работа со считывателем невозможна
• RPRM_Error_DeviceDriver
• RPRM_Error_CalibrationOpenLid
Крышка считывателя открыта, что
мешает проведению калибровки (для считывателей, оборудованных цифровой
камерой Cypress или Micron). Необходимо закрыть крышку и повторить операцию
• RPRM_Error_Calibration_Brightness
неудовлетворительная

Калибровка
яркости
картинки
175Программные средства SDK
• RPRM_Error_Calibration_WhiteBalance Калибровка
неудовлетворительная
баланса
белого
• RPRM_Error_Calibration_TargetPosition
Калибровка положения тест-объекта неудовлетворительная
• RPRM_Error_Calibration_LightBlank
неудовлетворительное
Свечение калибровочной картинки
• RPRM_Error_Calibration_LightDistortion
калибровочной картинки неудовлетворительная
• RPRM_Error_Calibration_LightLevel
неудовлетворительная
Равномерность
Калибровочная
свечения
картинка
• RPRM_Error_Calibration_LightLevelHigh
Калибровочная картинка слишком светлая
• RPRM_Error_Calibration_LightLevelLow Калибровочная картинка слишком
темная
• RPRM_Error_8305CameraAbsent
Не обнаружена видеокамера считывателя
8305 (при построении списка установленных в системе считывателей). Работа со
считывателем 8305 невозможна
• RPRM_Error_NotImplemented
Вызванная команда не реализована
Необходимо
инициализации считывателя документов
• RPRM_Error_RemoveDocument
• RPRM_Error_BadDataFile
удалить
документ
до
Файл данных отсутствует или не может быть
прочитан
• RPRM_Error_ BadInputImage
Изображение во входном файле не в фокусе
и/или содержит блики
5.4.39. eRPRM_Commands
Перечисление eRPRM_Commands содержит набор команд главной управляющей
библиотеки SDK.
enum eRPRM_Commands
{
RPRM_Command_Device_Count
= 0x00000001,
RPRM_Command_Device_Features
= 0x00000002,
RPRM_Command_Device_RefreshList
= 0x00000003,
RPRM_Command_Device_ActiveIndex
= 0x00000004,
RPRM_Command_Device_Connect
= 0x00000005,
RPRM_Command_Device_Disconnect
= 0x00000006,
RPRM_Command_Device_Light_ScanList_Clear
= 0x00000007,
RPRM_Command_Device_Light_ScanList_AddTo
= 0x00000008,
RPRM_Command_Device_Light_ScanList_Default
= 0x00000016,
RPRM_Command_Device_Light_ScanList_Count
= 0x00000017,
176
Программные средства SDK
RPRM_Command_Device_Light_ScanList_Item
= 0x00000018,
RPRM_Command_Device_Light_TurnOn
= 0x00000009,
RPRM_Command_Device_LED
= 0x0000000B,
RPRM_Command_Device_PlaySound
= 0x0000000F,
RPRM_Command_Device_Set_ParamLowLight
= 0x0000000C,
RPRM_Command_Device_Get_ParamLowLight
= 0x0000000D,
RPRM_Command_Device_Calibration
= 0x00000015,
RPRM_Command_Process
= 0x00000019,
RPRM_Command_Options_GraphicFormat_Count
= 0x0000001A,
RPRM_Command_Options_GraphicFormat_Name
= 0x0000001B,
RPRM_Command_Options_GraphicFormat_Select
= 0x0000001C,
RPRM_Command_Options_GraphicFormat_ActiveIndex
= 0x00000020,
RPRM_Command_Options_GetSDKCapabilities
= 0x0000001E,
RPRM_Command_Options_GetSDKAuthCapabilities = 0x00000035,
RPRM_Command_Options_Set_MRZTestQualityParams
= 0x00000022,
RPRM_Command_Options_Get_MRZTestQualityParams
= 0x00000023,
RPRM_Command_ProcessImagesList
= 0x00000024,
RPRM_Command_Options_Set_CurrentDocumentType
= 0x00000027,
RPRM_Command_Options_Get_CurrentDocumentType
= 0x00000028,
RPRM_Command_Options_Set_CustomDocTypeMode
= 0x00000029,
RPRM_Command_Options_Get_CustomDocTypeMode
= 0x0000002A,
RPRM_Command_Get_DocumentsInfoList
= 0x0000002B,
RPRM_Command_OCRLexicalAnalyze
= 0x0000002C,
RPRM_Command_Device_IsCalibrated
= 0x0000002D,
RPRM_Command_Options_Set_CheckResultHeight
= 0x0000002E,
RPRM_Command_Device_Set_WorkingVideoMode
= 0x00000030,
RPRM_Command_Device_Get_WorkingVideoMode
= 0x00000031,
RPRM_Command_Options_Set_AuthenticityCheckMode
= 0x00000032,
RPRM_Command_Options_Get_AuthenticityCheckMode
= 0x00000033,
RPRM_Command_Options_Get_BatteryStatus
= 0x00000034
RPRM_Command_Options_BuildExtLog
= 0x00000040,
RPRM_Command_Device_SetFrequencyDivider
= 0x00000041,
RPRM_Command_Device_Get_DriverVersion
= 0x00000042,
RPRM_Command_Device_APM_Mode
= 0x00000044,
RPRM_Command_Device_UseVideoDetection
= 0x00000045,
RPRM_Command_ExpertAnalyze
= 0x00000046,
RPRM_Command_ClearResults
= 0x00000047,
RPRM_Command_Options_GraphicFormat_SetCompressionRatio = 0x00000048
RPRM_Command_Options_GraphicFormat_GetCompressionRatio = 0x00000049,
RPRM_Command_Process_Cancel
= 0x0000004A,
RPRM_Command_ExcludeCapabilities
= 0x0000004B,
RPRM_Command_ExcludeAuthCapabilities
= 0x0000004C,
RPRM_Command_MakeSingleShot
= 0x0000004D,
RPRM_Command_Device_GetFrequencyDivider
= 0x0000004E,
RPRM_Command_ComplexAuthenticityCheck
= 0x0000004F,
RPRM_Command_Options_Set_GlareCompensation
= 0x00000050,
RPRM_Command_Options_Set_ExtendProcessingModes
= 0x00000051,
RPRM_Command_Options_Get_AppendVisa
= 0x00000052,
RPRM_Command_Options_Set_AppendVisa
= 0x00000053,
RPRM_Command_Options_Set_MultiPageProcessingMode = 0x00000054,
RPRM_Command_Device_Get_Calibration_FrequencyDivider
= 0x00000055,
RPRM_Command_PortraitGraphicalAnalyze
= 0x00000056,
RPRM_Command_Options_Set_SmartUV
= 0x00000057,
RPRM_Command_Options_Set_RotateResultImages
= 0x00000058,
RPRM_Command_BSIDocCheckXML
= 0x00000059,
RPRM_Command_Options_Get_QuickMrzProcessing
= 0x0000005A,
RPRM_Command_Options_Set_QuickMrzProcessing
= 0x0000005B,
RPRM_Command_Device_SetVideoDetectionDivider = 0x0000005C,
RPRM_Command_Device_GetVideoDetectionDivider = 0x0000005D,
RPRM_Command_Device_SetRequiredOcrFields
= 0x0000005E,
RPRM_Command_Device_GetRequiredOcrFields
= 0x0000005F,
RPRM_Command_Options_Get_BatteryNumber
= 0x00000060,
RPRM_Command_Options_Get_QuickBoardingPassProcessing
= 0x00000061,
RPRM_Command_Options_Set_QuickBoardingPassProcessing
= 0x00000062,
RPRM_Command_Options_Set_WaitForReadingComplete
= 0x00000063,
RPRM_Command_ReadingComplete
= 0x00000064,
RPRM_Command_Options_Get_LexAnalysisDepth
= 0x00000065,
RPRM_Command_Options_Set_LexAnalysisDepth
= 0x00000066,
RPRM_Command_Options_Get_LexDateFormat
= 0x00000067,
RPRM_Command_Options_Set_LexDateFormat
= 0x00000068,
RPRM_Command_Device_Get_GetJpegImages
= 0x00000069,
RPRM_Command_Device_Set_GetJpegImages
= 0x0000006A,
RPRM_Command_BSIDocCheckXMLv2
= 0x0000006B,
RPRM_Command_Device_Get_TrustDPI
= 0x0000006C,
RPRM_Command_Device_Set_TrustDPI
= 0x0000006D,
RPRM_Command_Options_Get_LexParams
= 0x0000006E,
RPRM_Command_Options_Set_LexParams
= 0x0000006F,

177Программные средства SDK
RPRM_Command_Options_Get_StopOnBadInputImage
= 0x00000070,
RPRM_Command_Options_Set_StopOnBadInputImage
= 0x00000071,
RPRM_Command_Set_ProcessParametersJson
= 0x00000072,
RPRM_Command_Options_Set_VideodetectionLowSensibility
= 0x00000073,
RPRM_Command_Options_Set_TrustVideodetectionResult
= 0x00000074,
RPRM_Command_Device_Get_LED
= 0x00000075,
RPRM_Command_Get_DatabaseInfo
= 0x00000076,
RPRM_Command_Device_Fingerprints_Scan
= 0x00000077,
RPRM_Command_Fingerprints_Compare
= 0x00000078,
RPRM_Command_Add_External_Containers
= 0x00000079,
RPRM_Command_Fingerprints_Search
= 0x00000080
};
Подробное описание каждой команды приводится далее.
5.4.40. eDocumentStatus
Перечисление eDocumentStatus содержит возможные статусы документа при
видеодетекции.
enum eDocumentStatus
{
eDS_BadImage,
eDS_DocumentAbsent,
eDS_DocumentMoving,
eDS_DocumentFix,
eDS_DocumentFixWait,
eDS_DocumentPresent
};
Значения констант:
• eDS_BadImage
– невозможно обработать изображение;
• eDS_DocumentAbsent – документ отсутствует;
• eDS_DocumentMoving – документ перемещается;
• eDS_DocumentFix
– для внутреннего использования;
• eDS_DocumentFixWait – для внутреннего использования;
• eDS_DocumentPresent – документ присутствует.
5.4.41. eDeviceLimitations
Перечисление eDeviceLimitations содержит ограничения устройства.
enum eDeviceLimitations
{
DL_NONE
= 0x00000000,
DL_USB2
= 0x00000001,
DL_32bit
= 0x00000002,
};
Значения констант:
• DL_NONE
178
– устройство не имеет ограничений;
Программные средства SDK
– устройство подключено к порту USB 2.0;
– устройство использует 32-битную платформу.
• DL_USB2
• DL_32bit
5.5. СИСТЕМА КОМАНД SDK
Основной функцией библиотеки, посредством которой пользовательское приложение
может инициировать все необходимые действия для работы со считывателями
документов, является функция _ExecuteCommand(). В качестве параметров она
принимает командный триплет: код команды (параметр command), входной параметр
команды (параметр params) и указатель на контейнер-приемник (параметр result)
для возвращаемых результатов.
Описание каждой отдельной команды приводится ниже по следующей схеме:
Код команды
Входной параметр
Выходной параметр
Назначение:
<Краткое описание>
5.5.1. RPRM_Command_Device_Count
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
определение общего количества считывателей документов,
подключенных к ПК в текущий момент времени
5.5.2. RPRM_Command_Device_Features
Входной параметр
Выходной параметр
Назначение:
– long
– TRegulaDeviceProperties **
получение информации о характеристиках считывателя
документов
Индекс считывателя документов в общем списке указывается во входном параметре
команды.
Память под TRegulaDeviceProperties выделяется главной управляющей
библиотекой и не требует освобождения в пользовательском приложении.
5.5.3. RPRM_Command_Device_RefreshList
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
обновление общего списка
считывателей документов

подключенных
к
ПК
179Программные средства SDK
Не используется.
Для построения списка подключенных устройств необходимо выполнить
переинициализацию главной управляющей библиотеки последовательностью
вызовов функций _Free() и _Initialize().
5.5.4. RPRM_Command_Device_ActiveIndex
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
определение индекса текущего активного считывателя
документов
5.5.5. RPRM_Command_Device_Connect
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
активизация конкретного считывателя из общего списка
Индекс считывателя документов в общем списке указывается во входном параметре
команды.
В случае указания вместо индекса устройства значения –1 возможны два варианта
продолжения работы:
• если в списке подключенных к ПК устройств находится только один считыватель
документов, он будет подключен по умолчанию;
• если в списке подключенных к ПК устройств находятся несколько считывателей
документов, то будет подключен первый из них.
5.5.6. RPRM_Command_Device_Disconnect
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
отключение текущего активного считывателя документов
5.5.7. RPRM_Command_Device_Light_ScanList_Clear
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
очистка списка схем освещения для сканирования
5.5.8. RPRM_Command_Device_Light_ScanList_Default
Входной параметр
Выходной параметр
180
– не используется
– не используется
Программные средства SDK
Назначение:
заполнение списка схем освещения для сканирования
значениями по умолчанию
5.5.9. RPRM_Command_Device_Light_ScanList_Count
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
определение общего количества элементов в списке схем
освещения для сканирования
5.5.10. RPRM_Command_Device_Light_ScanList_Item
Входной параметр
Выходной параметр
Назначение:
– long
– long *
чтение значения конкретного элемента из списка схем
освещения для сканирования
Индекс запрашиваемого элемента списка указывается во входном параметре команды.
5.5.11. RPRM_Command_Device_Light_ScanList_AddTo
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
занесение нового элемента в список схем освещения для
сканирования
Во входном параметре указывается идентификатор схемы освещения (возможна
и комбинация идентификаторов). Принимаются только значения, которые присутствовали
в списке схем освещения для сканирования, заполненном значениями по умолчанию.
5.5.12. RPRM_Command_Device_Light_TurnOn
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение схемы освещения
Во входном параметре указывается идентификатор схемы освещения (возможна
и комбинация идентификаторов), которую необходимо активизировать. Принимаются
любые корректные комбинации идентификаторов.
Эта команда может использоваться в целях тестирования и никакого влияния на
проведение цикла сканирования и обработки данных не оказывает.

181Программные средства SDK
5.5.13. RPRM_Command_Device_LED
Входной параметр
Выходной параметр
Назначение:
– TIndicationLED *
– не используется
задание логики поведения
считывателя документов
индикаторных светодиодов
5.5.14. RPRM_Command_Device_Set_ParamLowLight
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установка значения экспозиции видеокамеры при получении
изображений для схемы УФ-освещения
5.5.15. RPRM_Command_Device_ PlaySound
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
управление звуковым сигналом считывателя документов
5.5.16. RPRM_Command_Device_Get_ParamLowLight
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
чтение текущего значения экспозиции видеокамеры при
получении изображений для схемы УФ-освещения
5.5.17. RPRM_Command_Device_Calibration
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
проведение калибровки активного считывателя документов
5.5.18. RPRM_Command_Process
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
проведение цикла сканирования и обработки данных для
активного считывателя документов
Во входном параметре команды должна содержаться комбинация значений из
перечисления eRPRM_GetImage_Modes, которая определяет набор функций
получения и обработки изображений для данного цикла и, соответственно, набор
запрашиваемых результатов.
182
Программные средства SDK
5.5.19. RPRM_Command_ProcessImagesList
Входной параметр
Выходной параметр
Назначение:
– TResultContainerList *
– long
проведение цикла обработки данных для списка изображений
Список изображений, предназначенных для обработки, передается во входном
параметре params. Пользовательское приложение несет ответственность за
выделение памяти под этот список и его элементы.
Во втором параметре команды result, который обычно используется для получения
результатов, для этой команды передается комбинация значений из перечисления
eRPRM_GetImage_Modes, определяющая набор функций обработки изображений для
данного цикла и, соответственно, набор запрашиваемых результатов.
5.5.20. RPRM_Command_Options_GraphicFormat_Count
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
определение общего количества графических форматов
записи изображений
5.5.21. RPRM_Command_Options_GraphicFormat_Select
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
выбор графического формата записи изображений
Во входном параметре указывается индекс графического формата в общем списке.
5.5.22. RPRM_Command_Options_GraphicFormat_Name
Входной параметр
Выходной параметр
Назначение:
– long
– char **
получение символьного имени одного из
графических форматов записи изображений
доступных
Во входном параметре указывается индекс графического формата в общем списке.
Память для хранения передаваемой символьной строки выделяется главной управляющей
библиотекой и не требует освобождения в пользовательском приложении.
Возвращаемая символьная строка содержит расширение файла запрашиваемого
формата (например, «.BMP»).

183Программные средства SDK
5.5.23. RPRM_Command_Options_GraphicFormat_ActiveIndex
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение индекса текущего графического формата записи
изображений
5.5.24. RPRM_Command_Options_GetSDKCapabilities
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
определение набора функциональных возможностей
главной управляющей библиотеки при работе с текущим
активным считывателем документов
Возвращаемое в выходном параметре значение – комбинация значений из
перечисления eRPRM_Capabilities.
5.5.25. RPRM_Command_Options_GetSDKAuthCapabilities
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
определение набора MCL проверок подлинности при работе
с текущим активным считывателем документов
5.5.26. RPRM_Command_Options_Set_MRZTestQualityParams
Входной параметр
Выходной параметр
Назначение:
– TCommandsMRZTestQuality *
– не используется
установка параметров контроля качества заполнения МСЗ
документа
5.5.27. RPRM_Command_Options_Get_MRZTestQualityParams
Входной параметр
Выходной параметр
Назначение:
– не используется
– TCommandsMRZTestQuality **
получение текущих параметров
заполнения МСЗ документа
контроля
качества
Память для хранения заполняемой структуры TCommandsMRZTestQuality выделяется
главной управляющей библиотекой и не требует освобождения в пользовательском
приложении.
184
Программные средства SDK
5.5.28. RPRM_Command_Options_Get_CurrentDocumentType
Входной параметр
Выходной параметр
Назначение:
– не используется
– char **
получение текущего значения символьного идентификатора
типа документа, выбираемого по умолчанию для проведения
последующих операций распознавания
5.5.29. RPRM_Command_Options_Set_CurrentDocumentType
Входной параметр
Выходной параметр
Назначение:
– char *
– не используется
установка символьного идентификатора типа документа,
выбираемого по умолчанию для проведения последующих
операций распознавания
Память для хранения передаваемой символьной строки выделяется главной
управляющей библиотекой и не требует освобождения в пользовательском
приложении.
5.5.30. RPRM_Command_Options_Set_CustomDocTypeMode
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
активизация режима пользовательского определения типа
документа
5.5.31. RPRM_Command_Options_Get_CustomDocTypeMode
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение
текущего
значения
активности
пользовательского определения типа документа
режима
5.5.32. RPRM_Command_Get_DocumentsInfoList
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
получение полного списка документов, хранящихся в
подключенной базе данных документов
Результат
типа
RPRM_ResultType_DocumentsInfoList
передается
в
пользовательское приложение через вызов callback-функции ResultReceivingFunc
и доступен через вызов функции _CheckResult().

185Программные средства SDK
5.5.33. RPRM_Command_OCRLexicalAnalyze
Входной параметр
Выходной параметр
Назначение:
– TDocVisualExtendedInfo *
– не используется
проведение лексического анализа текстовых данных,
полученных операциями чтения МСЗ, полей заполнения
документа, штрихкодов и данных из памяти RFID-
микросхемы документа
Структура TDocVisualExtendedInfo, передаваемая во входном параметре команды,
должна содержать данные из памяти RFID-микросхемы и может быть получена при
совместной работе с «SDK для считывателей бесконтактных идентификационных
микросхем».
При отсутствии данных чтения RFID-микросхемы во входном параметре допустима
передача значения 0 (NULL).
5.5.34. RPRM_Command_Device_IsCalibrated
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
определение факта проведения калибровки для активного
устройства
Возвращаемое значение (TRUE или FALSE) показывает, был ли откалиброван активный
считыватель документов или данную процедуру необходимо провести заново.
5.5.35. RPRM_Command_Device_Set_WorkingVideoMode
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
переключение между
сенсора видеокамеры
доступными
режимами
работы
В качестве входного параметра используется одно из значений перечисления
eRPRM_VideoModes (определяется на основании характеристик подключенного
считывателя документов TRegulaDeviceProperties).
5.5.36. RPRM_Command_Device_Get_WorkingVideoMode
Входной параметр
Выходной параметр
Назначение:
186
– не используется
– long *
получение текущего значения режима работы сенсора
видеокамеры
Программные средства SDK
5.5.37. RPRM_Command_Options_Set_CheckResultHeight
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установка требуемой высоты (в точках) изображений,
получаемых с помощью функций CheckResultFromList()
и CheckResult()
При получении изображений в качестве результатов проведения цикла сканирования
с помощью функций CheckResultFromList() и CheckResult() их размер (высота) будет
приведен в соответствие с установленным данной командой значением. Для получения
изображений в оригинальном размере необходимо установить данный параметр в 0.
Этот параметр игнорируется при вызове _CheckResult() в следующих случаях:
• получение RPRM_ResultType_RawImage без параметра output установленного
в ofrFormat_XML и/или ofrFormat_FileBuffer;
• получение RPRM_ResultType_EOSImage.
5.5.38. RPRM_Command_Options_Set_AuthenticityCheckMode
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
задание набора функций проверки подлинности документа
(с заданным RPRM_GetImage_Modes_Authenticity при
выполнении команды RPRM_Command_Process)
Во входном параметре задается комбинация значений из перечисления
eRPRM_Authenticity.
5.5.39. RPRM_Command_Options_Get_AuthenticityCheckMode
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение текущего набора функций проверки подлинности
документа
5.5.40. RPRM_Command_Options_Get_BatteryStatus
Входной параметр
Выходной параметр
Назначение:
– long
– long *
получение текущего статуса заряда аккумулятора с
выбранным индексом мобильных версий считывателя
документов. При отсутствии в считывателе опции
RPRM_DeviceAdditionalFeature_Accumulator возвращает код
ошибки RPRM_ResultStatus_NotAvailable
Возвращаемое значение (выходной параметр):
• 0–100 – заряд аккумулятора, %;
• 0xFF – нет батареи;
• 0xFE – идет заряд;

187Программные средства SDK
• 0xF0
– заряд 100 %.
5.5.41. RPRM_Command_Options_BuildExtLog
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение/выключение ведения протокола работы
Файлы протокола работы SDK с подробной информацией о производимых действиях
создаются в директориях: \Users\[User Name]\AppData\Local\Regula\Logs.
5.5.42. RPRM_Command_Device_SetFrequencyDivider
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установка делителя частоты видеочипа
Для стабильной работы под операционной системой Windows 7 или на
малопроизводительном компьютере последовательно устанавливайте делитель от 1
до 5 до тех пор, пока не добьетесь стабильной работы.
5.5.43. RPRM_Command_Device_Get_DriverVersion
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение версии драйвера
5.5.44. RPRM_Command_Device_APM_Mode
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установка режима работы считывателя документов
Для уменьшения электромагнитного излучения или увеличения длительности работы
от аккумуляторов мобильных версий считывателя документов установите с помощью
этой команды APM = 1.
5.5.45. RPRM_Command_Device_UseVideoDetection
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
зарезервировано для внутренних нужд
5.5.46. RPRM_Command_ExpertAnalyze
Входной параметр
188
– TDocVisualExtendedInfo *
Программные средства SDK
Выходной параметр
Назначение:
– не используется
зарезервировано для внутренних нужд
5.5.47. RPRM_Command_ClearResults
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
очистка выделенной памяти под предыдущие результаты
обработки документа
5.5.48.RPRM_Command_Options_GraphicFormat_SetCompressionRatio
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установка коэффициента сжатия для сохранения в
графических форматах, использующих алгоритмы сжатия с
потерей информации (например, JPEG). Значение параметра от 0
до 10
5.5.49.RPRM_Command_Options_GraphicFormat_GetCompressionRatio
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение текущего коэффициента сжатия для сохранения
в графических форматах, использующих алгоритмы сжатия
с потерей информации (например, JPEG)
5.5.50. RPRM_Command_Process_Cancel
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
отмена процесса сканирования или калибровки
5.5.51. RPRM_Command_ExcludeCapabilities
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
задание набора eRPRM_Capabilities, исключенного из
дальнейшей работы. Выполняется до подключения устройства
5.5.52. RPRM_Command_ExcludeAuthCapabilities
Входной параметр
Выходной параметр
– long
– не используется

189Программные средства SDK
Назначение:
задание набора eRPRM_Authenticity, исключенного из
дальнейшей работы. Выполняется до подключения устройства
5.5.53. RPRM_Command_MakeSingleShot
Входной параметр
Выходной параметр
Назначение:
– long
– long (используется как входной)
съемка одного кадра со светом eRPRM_Lights во входном
параметре и режимом съемки eRPRM_GetImage_Modes
(long) в выходном параметре
5.5.54. RPRM_Command_Device_GetFrequencyDivider
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение значения делителя частоты видеочипа
5.5.55. RPRM_Command_ComplexAuthenticityCheck
Входной параметр
Выходной параметр
Назначение:
– не используется
– не используется
проведение анализа результатов проверки подлинности всех
страниц текущего многостраничного документа
5.5.56. RPRM_Command_Options_Set_GlareCompensation
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение (входной параметр != 0) или отключение
(входной параметр == 0) режима компенсации бликов на
белом и ИК-изображениях
5.5.57. RPRM_Command_Options_Set_ExtendProcessingModes
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение (входной параметр != 0) или отключение
(входной параметр ==
0) режима автоматического
включения режимов обработки при их необходимости
5.5.58. RPRM_Command_Options_Get_AppendVisa
Не используется.
190
Программные средства SDK
5.5.59. RPRM_Command_Options_Set_AppendVisa
Не используется.
5.5.60. RPRM_Command_Options_Set_MultiPageProcessingMode
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение (входной параметр != 0) или отключение
(входной параметр ==
0) режима многостраничной
обработки (по умолчанию включен)
5.5.61. RPRM_Command_Device_Get_Calibration_FrequencyDivider
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение значения делителя частоты видеочипа, при
котором был откалиброван прибор
5.5.62. RPRM_Command_PortraitGraphicalAnalyze
Входной параметр
Выходной параметр
Назначение:
– TResultContainerList *
– не используется
проведение сравнения портретов, полученных при
сканировании документа, а также из RFID (передается во
входном параметре)
5.5.63. RPRM_Command_Options_Set_SmartUV
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение (входной параметр != 0) или отключение
(входной параметр == 0) режима улучшения качества
получаемых изображений в УФ
5.5.64. RPRM_Command_Options_Set_RotateResultImages
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение (входной параметр != 0) или отключение
(входной параметр == 0) режима поворота результирующих
изображений в соответствии с ориентацией портрета

191Программные средства SDK
5.5.65. RPRM_Command_BSIDocCheckXML
Входной параметр
Выходной параметр
Назначение:
– TResultContainerList *
– char **
создание результата в формате XML по стандарту BSI TR-
03135 v1.
5.5.66. RPRM_Command_Options_Get_BatteryNumber
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение количества установленных батарей.
5.5.67. RPRM_Command_Options_Get_QuickBoardingPassProcessing
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение
состояние
посадочных талонов.
режима
быстрой
обработки
5.5.68. RPRM_Command_Options_Set_QuickBoardingPassProcessing
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение (входной параметр != 0) или отключение
(входной параметр == 0) режима быстрой обработки
посадочных талонов.
5.5.69. RPRM_Command_Options_Set_QuickMrzProcessing
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
включение (входной параметр != 0) или отключение
(входной параметр == 0) режима быстрой обработки МСЗ.
5.5.70. RPRM_Command_Options_Get_QuickMrzProcessing
Входной параметр
Выходной параметр
Назначение:
192
– не используется
– long *
получение состояния режима быстрой обработки МСЗ.
Программные средства SDK
5.5.71. RPRM_Command_Device_SetVideoDetectionDivider
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установка делителя размера кадра видеодетекции (Входной
параметр = 2 – размер / 2, и т.д.).
5.5.72. RPRM_Command_Device_GetVideoDetectionDivider
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получение значения делителя размера кадра видеодетекции.
5.5.73. RPRM_Command_Device_SetRequiredOcrFields
Входной параметр
Выходной параметр
Назначение:
– TDwordArray *
– не используется
установка требуемых полей OCR.
5.5.74. RPRM_Command_Device_GetRequiredOcrFields
Входной параметр
Выходной параметр
Назначение:
– не используется
– TDwordArray **
получение установленного параметра требуемых полей OCR.
5.5.75. RPRM_Command_Options_Set_WaitForReadingComplete
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установить (Входной параметр != 0) или отключить (Входной
параметр
==
0)
значение
параметра
WaitForReadingComplete. Используется в считывателях 72x3
совместно с командой RPRM_Command_ReadingComplete.
5.5.76. RPRM_Command_ReadingComplete
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
cообщает, что чтение RFID закончено и можно выбрасывать
карточку. Используется в считывателях 72x3 совместно с
командой
RPRM_Command_Options_Set_WaitForReadingComplet.

193Программные средства SDK
5.5.77. RPRM_Command_Options_Get_LexAnalysisDepth
Не используется.
5.5.78. RPRM_Command_Options_Set_LexAnalysisDepth
Не используется.
5.5.79. RPRM_Command_Options_Get_LexDateFormat
Не используется.
5.5.80. RPRM_Command_Options_Set_LexDateFormat
Не используется.
5.5.81. RPRM_Command_Device_Get_GetJpegImages
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получить значение параметра GetJpegImages.
5.5.82. RPRM_Command_Device_Set_GetJpegImages
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установить значение параметра GetJpegImages.
5.5.83. RPRM_Command_BSIDocCheckXMLv2
Входной параметр
Выходной параметр
Назначение:
– TResultContainerList *
– char **
получить результат XML в соответствии с форматом BSI
Technical Guideline TR-03135-2.
5.5.84. RPRM_Command_Options_Get_TrustDPI
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *
получить значение параметра TrustDPI.
5.5.85. RPRM_Command_Options_Set_TrustDPI
Входной параметр
194
– long
Программные средства SDK
Выходной параметр
Назначение:
– не используется
установить значение параметра TrustDPI.
5.5.86. RPRM_Command_Options_Get_LexParams
Входной параметр
Выходной параметр
Назначение:
– не используется
– char **
получить параметры лексического анализа в формате JSON.
5.5.87. RPRM_Command_Options_Set_LexParams
Входной параметр
Выходной параметр
Назначение:
– char *
– не используется
установить параметры лексического анализа в формате
JSON.
5.5.88. RPRM_Command_Options_Get_StopOnBadInputImage
Входной параметр
Выходной параметр
Назначение:
– не используется
– long *, по умолчанию FALSE
получить значение параметра StopOnBadInputImage.
5.5.89. RPRM_Command_Options_Set_StopOnBadInputImage
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установить значение параметра StopOnBadInputImage.
5.5.90. RPRM_Command_Set_ProcessParametersJson
Входной параметр
Выходной параметр
Назначение:
– char *
– не используется
установить параметры в формате JSON.
Подробную информацию о настройках JSON, задаваемых через
RPRM_Command_Set_ProcessParametersJson, см. раздел 5.6. Настройки JSON.
5.5.91. RPRM_Command_Options_Set_VideodetectionLowSensibility
Входной параметр
Выходной параметр
Designation:
– long
– не используется
установить
значение
VideodetectionLowSensibility.

параметра
195Программные средства SDK
5.5.92. RPRM_Command_Options_Set_TrustVideodetectionResult
Входной параметр
Выходной параметр
Назначение:
– long
– не используется
установить
значение
TrustVideodetectionResult.
параметра
5.5.93. RPRM_Command_Device_Get_LED
Входной параметр
Выходной параметр
Назначение:
– не используется
– TIndicationLED *
получение логики поведения индикаторных светодиодов
считывателя документов.
5.5.94. RPRM_Command_Get_DatabaseInfo
Входной параметр
Выходной параметр
Назначение:
– не используется
– char **
получение информации о базе данных в формате строки
JSON.
5.5.95. RPRM_Command_Device_Fingerprints_Scan
Input parameter
Output parameter
Designation:
– char *
– не используется
получение сканов отпечатков пальце в формате строки JSON.
5.5.96. RPRM_Command_Fingerprints_Compare
Input parameter
Output parameter
Designation:
– char *
– не используется
получение информации о сравнении отпечатков пальцев в
формате строки JSON.
5.5.97. RPRM_Command_Add_External_Containers
Input parameter
Output parameter
Designation:
– TResultContainerList*
– не используется
добавление контейнеров в список внутренних контейнеров
SDK.
5.5.98. RPRM_Command_Fingerprints_Search
Input parameter
Output parameter
196
– char *
– не используется
Программные средства SDK
Designation:
получение информации о поиске отпечатков пальцев
(dllPath и searchParams) в формате строки JSON.
Результат
хранится
в
контейнере
с
типом
RPRM_ResultType_FingerprintDatabaseCheck.

197Программные средства SDK
5.6. НАСТРОЙКИ JSON
Настройки,
описанные
в
данном
разделе,
RPRM_Command_Set_ProcessParametersJson.
задаются
через
команду
5.6.1. Trivia
Regula SW использует следующий формат для создания UUID для журнала XML:
00000004-0007-0000-0000-000032BF7CC1
Формат состоит из следующих частей:
• Последняя часть – внутренний идентификатор шаблона документа Регулы.
000032BF7CC1 можно сузить до 32BF7CC1, что является шестнадцатеричным
эквивалентом десятичного 32-битного целого числа со знаком. 851410113. Этот
десятичный идентификатор ранее использовался для фильтров проверки
подлинности. Обратите внимание, он может быть отрицательным. Для
идентификатора шаблона документа для остальной части UUID устанавливаются
все нули.
• Первая
часть
–
00000004
–
проверка
идентификатора
как
eRPRM_Authenticity.
В
данном
случае
0x4
=
RPRM_Authenticity_Image_Pattern.
• Вторая часть – 0007 – идентификатор конкретной области проверки для каждого
элемента XML-лога dco:BasicCheckResult. Может быть 0. Будет FFFF для
dco:CheckGroup и dco:CompositeCheckResult.
В исправлении Regula Document Reader SDK 6.1 и с версии Regula Document Reader SDK
6.2 данный подход к формированию UUID позволяет идентифицировать документы и
их индивидуальные проверки. Были приняты меры, чтобы свести к минимуму
возможность изменения UUID dco:BasicCheckResult при обновлении базы данных
шаблонов и/или обновлении SDK.
Например:
{
"processParam":
{
"authSafeMode": true,
"config":
[
{
"docID":
[
851410113,
-2033442960
],
198
Программные средства SDK
"docUUID":
[
"00000000-0000-0000-0000-000032BF7CC1",
"00000000-0000-0000-0000-000086CC1F70"
],
"excludeAuthChecks": 3
}
]
},
"bsiTr03135":
{
"version": 3,
"evaluationChecks":
{
"patternsVis": true,
"patternsIr": true,
"patternsFalseLum": true,
"irVisPhoto": true,
"ids":
[
"00000004-000E-0000-0000-0000ACCCB9BB"
],
"types":
[
16
]
}
},
"dePersonalize":
[
{
"allTextFields": true,
"allGraphicFields": true
}
],
"processParameters":
{
"extPortrait":
{
"url": "http://localhost:41101",
"threshold": 50,
"proxy": "",
"proxy_userpwd": "",
"proxy_type": 0,
"mode": "service",
"serviceTimeout": 3000
}
}
}

199Программные средства SDK
5.6.2. Режим Authenticity Safe
Параметр определяет способ проверки подлинности. Изменения в этом режиме
включают следующее:
1. Отключена проверка паттернов в ИК и видимом спектре.
2. Отключена дополнительная УФ-люминесцентная проверка областей, не
описанных как паттерны. В обычном режиме осуществляется проверка того, что
некоторые области изображения выглядят так, как ожидается (как описано в этом
шаблоне документа в базе данных) – фактические паттерны, а также проверяется
отсутствие избыточного УФ-люминесценции за пределами этих конкретных областей
– дополнительная проверка. При включенном режиме Authenticity Safe Mode эта
дополнительная проверка не выполняется.
3. Отключено сравнение портрета держателя в ИК и видимом свете для некоторых
документов.
Отключенные проверки не выполняются, поэтому при данном подходе собрать
статистику невозможно.
•
processParam – корневой узел конфигурации.
o authSafeMode – (bool) включает/отключает данный режим. По
умолчанию отключено.
5.6.3. Отключение проверки подлинности
Данный параметр позволяет отключить проверку подлинности для определенных
идентификаторов шаблона документа. Идентификаторы могут быть указаны как целые
числа со знаком ИЛИ как UUID документа, отображаемые в TR XML-журнала.
Отключенные проверки не выполняются, поэтому при данном подходе собрать
статистику невозможно.
•
processParam – корневой узел конфигурации.
o config – (array of objects)
▪ excludeAuthChecks – (unsigned int) – комбинация проверок
eRPRM_Authenticity, которая должна быть отключена для
заданных идентификаторов шаблона документа.
▪ docID – (array of signed integers) – список идентификаторов
документов в виде целых чисел со знаком.
▪ docUUID – (array of strings) – список UUID документов.
5.6.4. Режим Evaluation
Это рекомендуемый подход. Он позволяет выполнять все проверки документов и
собирать статистику, а также указывать отдельные проверки или группы проверок для
200
Программные средства SDK
конкретных документов, которые не учитываются при расчете общего статуса
документа «pass/fail».
•
bsiTr03135 – корневой раздел файла JSON, связанный с созданием журнала
XML. Будет расширен в следующих версиях.
o version – в настоящее время поддерживается только версия 3, для
будущего использования.
o evaluationChecks – раздел, описывающий, какие проверки элементов
защиты должны быть помечены как «evaluation», что не влияет на общий
статус документа «pass/fail».
▪ patternsVis - (bool) – паттерны в видимом свете.
▪ patternsIr - (bool) – паттерны в ИК.
▪ patternsFalseLum – (bool) – паттерны ложного свечения -
области в УФ, не входящие в описанные (специфичные для
шаблона документа) паттерны, но имеющие подозрительное
свечение.
▪ irVisPhoto - (bool) – сравнение фото в ВИС и ИК на конкретных
документах (связано с шаблоном).
▪ ids – (массив строк UUID) – массив определенных областей
конкретного dco:BasicCheckResult, который будет помечен
как «evaluation» (подробности см. в разделе Trivia). Полезно для
маркировки конкретных отдельных областей проверки в качестве
«evaluation».
▪ types – (int array) – массив типов проверок идентификаторов,
таких как eRPRM_Authenticity. Например, при прибавлении к
этому массиву 16 люминесцирующих волокон, проверка всех
документов станет «evaluation». Полезно для отключения всей
группы проверки для всех документов.
5.6.5. Обезличивание изображений
Изображения полностраничных документов можно обезличить путём размывания
определённых областей документа. Области могут быть указаны в виде текстовых или
графических полей или в виде прямоугольника в миллиметрах. Кроме того, можно
применить фильтр для указания точного идентификатора шаблона документа (docId),
страны и/или типа документа («D», «P» в качестве country и docType) или формата
документа (areas.format).
•
dePersonalize – массив объектов, описывающих, какие графические и
текстовые поля и области документа нужно скрыть.
o allTextFields – (bool) – все текстовые поля как в МСЗ, так и в
визуальной зоне должны быть размыты.
o textFieldTypes – (array of unsigned integers) – один из объектов
eVisualFieldType.

201Программные средства SDK
o allGraphicFields – (bool) – все графические поля в зоне визуального
контроля документа должны быть размыты.
o graphicFieldTypes – (array of unsigned integers) – один из объектов
eGraphicFieldType.
o docId – (signed integer) – идентификатор шаблона документа в виде
целого числа со знаком. Может использоваться для определения
конкретного типа документа, подлежащего обезличиванию. Редко
используемый.
o country – (string) – код выдавшего документ государства. Для
использования с docType. Редко используемый.
o docType – (string) – код класса документа (первые два символа МСЗ «<»
удалены). Для использования с country. Редко используемый.
o areas – (array of objects) – определенные области для размытия для
определенных форматов документов. Редко используемый.
▪ format – (unsigned integer) – формат документа, одно из
значений CDocFormat. Используется как флаг фильтра, если этот
документ нужно обезличить.
▪ area – (object) – прямоугольник области, которую необходимо
размыть, в миллиметрах.
• left (signed integer) – левая часть прямоугольника, в
миллиметрах;
• top (signed integer) – верхняя часть прямоугольника, в
миллиметрах;
• right (signed integer) – правая часть прямоугольника, в
миллиметрах;
• bottom (signed integer) – нижняя часть прямоугольника, в
миллиметрах.
5.6.6. Сравнение портретов
Сравнение портретов может быть выполнено как внутри, так и снаружи специальным
сервисом.
•processParameters – корневой узел конфигурации. Обратите внимание, это
другой корневой узел.
o extPortrait – узел конфигурации портретного сравнения
▪ url – (string) – адрес специализированного сервиса сравнения
портретов. По умолчанию http://localhost:41101
▪ threshold – (integer) – процент результата порогового
сравнения. Выше этого порога — «pass», равное или меньше —
«fail». По умолчанию 50.
▪ proxy – (string) – адрес прокси-сервера. По умолчанию не задан.
202Программные средства SDK
▪
▪
▪
▪
proxy_userpwd – (string) – пользователь прокси-сервера и
пароль согласно документации cURL
(https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html). По
умолчанию не задан.
proxy_type – (integer) – тип прокси-сервера согласно
документации cURL
(https://curl.se/libcurl/c/CURLOPT_PROXYTYPE.html). По умолчанию
0 (CURLPROXY_HTTP).
mode – (string, case-insensitive) – поведение модуля, возможные
значения:
• AUTO – если сервис доступен во время инициализации
PasspR40, тогда сервис используется. До версии SDK 6.1
являлось настройкой по умолчанию.
• LEGACY – используется только внутренний алгоритм
портретного сравнения PasspR40.
• SERVICE – используется только сервис. Начиная с версии
SDK 6.1 – настройка по умолчанию.
serviceTimeout – (unsigned integer) – таймаут. Значение по
умолчанию – 3000.
5.6.7. Проверки стоп-листа
По умолчанию неуспешные проверки стоп-листа (как по текстовой базе данных SQL,
так и по базе портретов) не влияют на общий статус обработки TStatus. Для того,
чтобы они влияли на общий статус, необходимо установить параметр
respectStopList в processParam:
{
"processParam":
{
"respectStopList": true
}
}
Чтобы задать расширенный стоп-лист, добавьте секцию ExtendedStopList в
customParams. Если в стоп-лист нужно включить документы конкретных стран, то
необходимо указать код страны по ICAO и поля (см. перечисление
eVisualFieldType) с соответствующими значениями, например:
{
"processParam":
{
"customParams": {
"extendedStopList": {
"POL": [
{
"8": "VZOREC",

203Программные средства SDK
"9": "ANA",
"5": "02.01.1981"
}
],
}
}
}
}
Если необходимо добавить документы всех стран, используется значение ALL:
{
"processParam":
{
"customParams": {
"extendedStopList": {
"ALL": [
{
"8": "VZOREC",
"9": "ANA",
"5": "02.01.1981"
}
],
}
}
}
}
Обратите внимание, что даты всегда задаются в формате DD.MM.YYYY
5.6.8. Интеграция Face SDK
Интеграция Face SDK с Document Reader добавляет автоматическое сопоставление лиц
и поиск по портрету, полученному из документа (визуальная зона и RFID-чип) или по
живому фото (селфи) владельца.
Для добавления интеграции Face API, используйте useFaceApi:
{
"processParam":
{
" useFaceApi ": true
}
}
Настройки для Face SDK могут быть определены как через JSON, так и через
переменные окружения. Значения, указанные в JSON, имеют приоритет, то есть если
один адрес сервиса указан в переменной окружения REGULA_FACEAPI_URL, а другой
204
Программные средства SDK
– в processParam.faceApi.url,
processParam.faceApi.url.
будет
использован
адрес,
указанный
в
Настройки JSON и переменные окружения описаны в онлайн-документации:
•Как настроить через JSON
•Переменные окружения для интеграции Face SDK
По умолчанию добавляется только функциональность сравнения – match. Чтобы
добавить поиск по лицу (search), необходимо установить значение match+search в
поле mode.
Ниже приведены параметры, которые могут быть использованы для выполнения
полной идентификации в одном запросе, т.е. чтение и проверка документа, а также
сравнение изображений лица. Обратите внимание, что во всех случаях необходимо
включить параметр useFaceApi.
5.6.8.1. livePortrait
Чтобы добавить живое фото владельца документа (селфи) для сравнения с фото из
визуальной зоны документа, используйте livePortrait:
{
"processParam":
{
"useFaceApi": true
},
"List": [],
"livePortrait": "base64image"
}
5.6.8.2. extPortrait
Чтобы добавить фотографии из внешнего источника, например, из базы данных,
используйте extPortrait:
{
"processParam":
{
"useFaceApi": true
},
"List": [],
"extPortrait": "base64image"
}

205Программные средства SDK
5.6.8.3. oneShotIdentification
Чтобы вырезать селфи из того же кадра, что и документ, и отправить его в Face API в
качестве live portrait, установите значение oneShotIdentification в true:
{
"processParam":
{
"useFaceApi": true,
"oneShotIdentification": true
}
}
5.6.9. Включение обнаружения Card Access Number
Чтобы включить обнаружение Card Access Number (CAN) при использовании
сценариев с определением местоположения документа и чтением MRZ (например,
сценарий MrzAndLocate), используйте doDetectCan:
{
"processParam":
{
"doDetectCan": true
}
}
206

